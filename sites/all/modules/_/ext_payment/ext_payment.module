<?php

/**
 * Implements hook_menu().
 */
function ext_payment_menu()
{
    $items['user/%/orders/%/pay'] = array (
        'title' => 'Оплатить заказ',
        'page callback' => 'ext_payment_commerce_order_pay_again',
        'page arguments' => array(3),
        'access arguments' => array('edit own commerce_order entities'),
        'type' => MENU_LOCAL_ACTION,
    );

    return $items;
}
/**
 * ------------------------------------------ Яндекс.Касса (Yandex.Kassa) ----------------------------------------------
 */

/**
 * alter yamoney_api_fail
 * возврат со страницы оплаты яндекса без оплаты
 * или возврат с яндекса при НЕудачной оплате
 * редирект на страницу оформленного заказа
 */
function ext_payment_yamoney_api_fail()
{
    $params = drupal_get_query_parameters();
    if (!empty($params['orderId'])) {
        if ($order = commerce_order_load($params['orderId'])) commerce_checkout_complete($order);
        drupal_goto('checkout/' . $params['orderId'] . '/complete');
    }
}

/**
 * alter yamoney_api_complete
 * возврат с яндекса при Удачной оплате
 * редирект на страницу оформленного заказа
 */
function ext_payment_yamoney_api_complete()
{
    $params = drupal_get_query_parameters();
    if (!empty($params['orderId'])) {
        if ($order = commerce_order_load($params['orderId'])) commerce_checkout_complete($order);
        drupal_goto('checkout/' . $params['orderId'] . '/complete');
    }
}

function ext_payment_commerce_payment_method_info_alter(&$payment_methods)
{
    $payment_methods['ya_commerce_api']['display_title'] = '<div class="carrier">' . t('Pay online') . '</div><div class="message">Через Яндекс. Банковские карты, банк-онлайн и другие.</div>';
    $payment_methods['commerce_rbspayment']['display_title'] = '<div class="carrier">' . t('Pay online') . '</div><div class="message">Через Сбербанк. Банковские карты, банк-онлайн и другие.</div>';
}


/**
 * функция повторной оплаты из просмотра заказа
 * на базе функции ya_commerce_api_submit_form_submit модуля yamoney_api v.1.0.13
 */
use YandexCheckout\Common\Exceptions\ApiException;
use YandexCheckout\Model\PaymentStatus;
use YandexCheckout\Request\Payments\CreatePaymentRequestSerializer;
function ext_payment_commerce_order_pay_again($order_id)
{

    $modulePath = drupal_get_path('module', 'yamoney_api');
    require_once $modulePath.DIRECTORY_SEPARATOR.'YandexMoneyLogger.php';
    require_once $modulePath.DIRECTORY_SEPARATOR.'InstallmentsApi.php';

    if (variable_get('yamoney_api_shop', 1) && $order = commerce_order_load($order_id)) {

        $user = user_load($order->uid);

        $modulePath = drupal_get_path('module', 'yamoney_api');
        require_once $modulePath.DIRECTORY_SEPARATOR.'yandex-checkout-sdk-php'.DIRECTORY_SEPARATOR.'autoload.php';
        $apiClient = yamoney_api__common__get_api_client();

        $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
        $currency_code = $order_wrapper->commerce_order_total->currency_code->value();
        $amount        = $order_wrapper->commerce_order_total->amount->value();
        $amount        = round(commerce_currency_amount_to_decimal($amount, $currency_code), 2);

        //        if (variable_get('yamoney_api_paymode') == 'kassa') {
        $paymentMethod = '';
        //        }

        $builder        = ya_commerce_api_get_create_payment_request_builder($order, $amount, $paymentMethod, $order_wrapper);
        $paymentRequest = $builder->build();
        $serializer     = new CreatePaymentRequestSerializer();
        $serializedData = $serializer->serialize($paymentRequest);
        YandexMoneyLogger::info('Create payment request: '.json_encode($serializedData));
        try {
            $response = $apiClient->createPayment($paymentRequest);
            if ($response && $response->status !== PaymentStatus::CANCELED) {
                $transaction = commerce_payment_transaction_new('ya_commerce_api', $order->order_id);
                $transaction->instance_id   = 'ya_commerce_api|commerce_payment_ya_commerce_api';
                $transaction->remote_id     = $response->id;
                $transaction->amount        = $amount * 100;
                $transaction->currency_code = $currency_code;
                $transaction->status        = COMMERCE_PAYMENT_STATUS_PENDING;
                $transaction->remote_status = $response->getStatus();
                commerce_order_status_update($order, YAMONEY_API_ORDER_STATUS_PENDING);
                $ymTransaction           = new YAMoneyApiTransaction();
                $ymTransaction->uid      = isset($user->uid) ? $user->uid : 0;
                $ymTransaction->amount   = $amount;
                $ymTransaction->mail     = isset($user->mail) ? $user->mail : $order->mail;
                $ymTransaction->order_id = $order->order_id;
                $ymTransaction->payment_id = $response->getId();
                $ymTransaction->status   = $response->getStatus();
                if (commerce_payment_transaction_save($transaction) && commerce_order_save($order)
                    && yamoney_api_transaction_save($ymTransaction)
                ) {
                    $confirmationUrl = $response->confirmation->confirmationUrl;
                    drupal_goto($confirmationUrl);
                }
            } else {
                YandexMoneyLogger::error('Payment not created. Order id: '.$order->order_number);
                drupal_set_message(t('Unable to create payment.'), 'error');
            }

        } catch (ApiException $e) {
            YandexMoneyLogger::error('Api error: '.$e->getMessage());
            drupal_set_message(t('Unable to pay with this method.'), 'error');
            drupal_goto(request_uri());
        }
    }
}

/**
 * проверить все транзакции заказа и сменить их статус
 * на сервере ЯД на предмет оплаты
*/
function ext_payment_ya_commerce_api_check_order_paid($order)
{
    if (is_numeric($order)) $order = commerce_order_load($order);

    if ($order) {
        $balance = commerce_payment_order_balance($order);
        if (!$balance) {
            return FALSE;
        }

        // если сумма заказа и оплаченного не совпадает, проверить транзакции на сервере
        if ($balance['amount'] > 0) {
            $apiClient = yamoney_api__common__get_api_client();
            $transactions = commerce_payment_transaction_load_multiple([], ['order_id' => $order->order_id]);
            foreach ($transactions as $transaction) {
                $paymentId = $transaction->remote_id;
                if ($paymentId && $payment = $apiClient->getPaymentInfo($paymentId)) {
                    if ($payment->getPaid()) {
                        // изменить заодно статус транзакции
                        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
                        commerce_payment_transaction_save($transaction);
                    }
                }
            }
        }

        if (commerce_payment_order_balance($order)['amount'] == 0) {
            // изменить статус заказа
            if (in_array($order->status, ['cart', 'pending'])
                || strpos($order->status, 'checkout_') === 0) {
                commerce_order_status_update($order, 'paid');
            }
            return TRUE;
        }
    }
    return false;
}

