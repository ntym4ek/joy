<?php

/**
 * @file
 * Defines an example shipping method for testing and development.
 */


/**
 * Implements hook_commerce_shipping_method_info().
 */
function cdek_commerce_shipping_method_info()
{
    $shipping_methods['cdek_shipping_method'] = array(
        'title' => t('СДЭК shipping method'),
        'description' => t('Defines shipping method by СДЭК.'),
    );

    return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function cdek_commerce_shipping_service_info()
{
  $shipping_services['cdek_shipping_service'] = array(
    'title' => t('СДЭК shipping service'),
    'display_title' => t('СДЭК'),
    'shipping_method' => 'cdek_shipping_method',
    'price_component' => 'cdek',
    'weight' => 5,
    'callbacks' => array(
      'rate' => 'cdek_service_rate_order',
      'details_form' => 'cdek_service_details_form',
      'details_form_validate' => 'cdek_service_details_form_validate',
      'details_form_submit' => 'cdek_service_details_form_submit',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function cdek_service_rate_order($shipping_service, $order)
{
  $rate = array(
    'amount' => 0,
    'currency_code' => 'RUB',
    'data' => [],
  );

  if (!ext_checkout_non_free_shipping($order)) {
    return $rate;
  }

  // todo для проверки только манагерам
  if (!user_has_role(PRODUCT_MANAGER_RID)) {
    return false;
  }

  // при переходе на страницу оформления запрос на расчёт выполняется дважды:
  // при первом построении формы и автонажатии кнопки Recalc
  // чтобы страница открывалась без задержек расчёт делаем только по кнопке Recalc
  if (arg(0) != 'checkout') {
    $rates = &drupal_static(__FUNCTION__);
    if (!$rates) {
      $rate_request = cdek_build_rate_request($order);

      if ($rate_request["receiver_zipcode"]) {
        $cache_key = $rate_request["receiver_zipcode"] . $rate_request['weight'] . $rate_request['amount'];
        //            if (strpos($_SERVER['HTTP_HOST'], '.local') === false)  {
        // todo кеш не учитывает применение купона
        //              $cache = commerce_shipping_rates_cache_get('boxberry' . $cache_key, $order, variable_get('commerce_boxberry_cache_timeout', 86400));
        //            } else {
        $cache = commerce_shipping_rates_cache_get('cdek' . $cache_key, $order, 1); // секунда в кэше
        //            }

        if (!$cache) {
          $response = cdek_api_request($rate_request);

          // поле с данными о доставке
          $order_wr = entity_metadata_wrapper('commerce_order', $order);
          $field_name = commerce_physical_order_shipping_field_name($order);
          $field_data = json_decode($order_wr->{$field_name}->field_data->value(), TRUE);

          // если ошибка
          if (isset($response["error"])) {
            $rate['data']['errors'][] = $response["error"][0]["text"];
            $field_data['cdek'] = [];
          }
          else {
            // сохраняем стоимость доставки
            if (empty($field_data['cdek'])) {
              $field_data['cdek'] = [];
            }
            //            $field_data['cdek'] = [];
            $field_data['cdek']['calc_backend'] = $response['result'];

            $rate['amount'] = ceil($response['result']['price']) * 100;
            $rate['data']['delivery_time'] = $response['result']['deliveryPeriodMax'];
            if (!empty($field_data['cdek']['point']['address'])) {
              $rate['data']['address'] = $field_data['cdek']['cityName'] . ', ' . $field_data['cdek']['point']['address'];
            }

            commerce_shipping_rates_cache_set('cdek' . $cache_key, $order, $rate);
          }
          $order_wr->{$field_name}->field_data = json_encode($field_data);
          $order_wr->{$field_name}->save();
        }
        else {
          $rate = $cache;
        }
      }
      else {
        $rate['data']['errors'][] = 'выберите населенный пункт из списка';
      }
    }
  }

  // если доставка всё ещё равна нулю, то это ошибка
  return ($rate['amount'] != 0 || isset($rate['data']['errors'])) ? $rate : false;
}

/**
 * подготовить массив для запроса
 */
function cdek_build_rate_request($order)
{
  $order_wr = entity_metadata_wrapper('commerce_order', $order);

  // Determine the shipping profile reference field name for the order.
  $field_name = commerce_physical_order_shipping_field_name($order);
  $shipping_profile = $order_wr->{$field_name}->value();

  // базовые данные
  $items = [];
  $zipcode = $weight = $amount = $target_point = $order_weight = $tariff_id = $receiver_city_id = '';
  if (isset($shipping_profile->field_data['und'][0]['value'])) {
    $data = json_decode($shipping_profile->field_data['und'][0]['value'], TRUE);
    $zipcode = empty($data['region']['data']['postal_code']) ? '' : $data['region']['data']['postal_code'];
    $order_weight = commerce_physical_order_weight($order, 'kg')['weight'];
    $amount = $order_wr->commerce_order_total->value()['amount'] / 100;

    // составить список товаров
    foreach ($order_wr->commerce_line_items as $delta => $line_item_wr) {
      // Get the weight value of product line items.
      if (in_array($line_item_wr->getBundle(), commerce_product_line_item_types())) {
        $weight = commerce_physical_product_line_item_weight($line_item_wr->value());
        if (!empty($weight['weight'])) {
          $weight['weight'] /= $line_item_wr->quantity->value();
          $converted_weight = physical_weight_convert($weight, 'kg');
          $dimensions = commerce_physical_product_line_item_dimensions($line_item_wr->value());
          foreach ($dimensions as $dimensions_item) {
            if (isset($dimensions_item['length'])) {
              $converted_dimensions = physical_dimensions_convert($dimensions_item, 'cm');
              $items[] = [
                'weight' => $converted_weight['weight'],
                'height' => $converted_dimensions['height'],
                'width' => $converted_dimensions['width'],
                'length' => $converted_dimensions['length'],
              ];
            }
          }
        }
      }
    }



    // возможно пункт уже выбран, нужно получить данные о нём
    if (!empty($data["cdek"]["point"]["id"])) {
      $receiver_city_id = $data["cdek"]["city"];
    }
  }

  // $calc->setAuth('UBjaIOcwj8y2kC7zxZrXrgXLWZ9t35mq', '9t53FnSEEXLlP0fD25QVsaESMJA6SsAv');
  // $calc->setAuth('z9GRRu7FxmO53CQ9cFfI6qiy32wpfTkd', 'w24JTCv4MnAcuRTx0oHjHLDtyt3I6IBq'); тест
  return [
    'account' => 'z9GRRu7FxmO53CQ9cFfI6qiy32wpfTkd',
    'pass' => 'w24JTCv4MnAcuRTx0oHjHLDtyt3I6IBq',
    'sender_city_id' => 241,                                  // из Чепецка
    'receiver_city_id' => $receiver_city_id,
    'sender_zipcode' => '613040',                             // из Чепецка
    'receiver_zipcode' => $zipcode,
    'tariff_id' =>  136,                                      // устанавливаем режим доставки: склад-склад
    'items' => $items,
    'amount' => $amount,
    'weight' => $order_weight,
  ];
}

/**
 * выполнить запрос стоимости
 */
function cdek_api_request($data)
{
  // Авторизация. Для получения логина/пароля (в т.ч. тестового) обратитесь к разработчикам СДЭК -->
  include_once ('src/CdekSDK/CdekClient.php');
  $client = new CdekClient();
  $client->setAuth($data['account'], $data['pass']);


  // id города установлен в случае его выбора в виджете
  // то есть имеет приоритет
  if ($data['receiver_city_id']) {
      $client->setSenderCityId($data['sender_city_id']);
      $client->setReceiverCityId($data['receiver_city_id']);
  } else {
    $client->setSenderCityPostCode($data['sender_zipcode']);
    $client->setReceiverCityPostCode($data['receiver_zipcode']);
  }

  // выбираем тариф
  $client->setTariffId($data['tariff_id']);
  // добавляем места в отправление
  foreach ($data['items'] as $item) {
    $client->addGoodsItemBySize($item['weight'], $item['length'], $item['width'], $item['height']);
  }

  if ($client->calculate() === true) {
    return $client->getResult();
  }

  return $client->getError();
}

/**
 * Allows modules to alter the options array generated to select a shipping
 * service on the checkout form.
 */
function cdek_commerce_shipping_service_rate_options_alter(&$options, $order)
{
  if (isset($order->shipping_rates['cdek_shipping_service'] )) {
    $line_item = $order->shipping_rates['cdek_shipping_service'];
    $line_item_wr = entity_metadata_wrapper('commerce_line_item', $line_item);
    $data = $line_item_wr->commerce_unit_price->data->value();

    $message = $cost = '';
    if (empty($data['errors'])) {
      $cost = $line_item_wr->commerce_unit_price->amount->value();
      $cost = $cost ? commerce_currency_format($cost, 'RUB') : t('free');
    } else {
      $message = implode('<br />', $data['errors']);
    }

    $options['cdek_shipping_service'] = '<div class="carrier">Заберу в<br />СДЭК</div>' .
      '<div class="message">' . $message . '</div>' .
      '<div class="cost">' . $cost . '</div>';
  }
}


/**
 * Shipping service callback: returns the shipping service details form.
 */
function cdek_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service)
{
    $pane_form = array();

    if (!empty($order->shipping_rates['cdek_shipping_service'])) {
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $order->shipping_rates['cdek_shipping_service']);
        if ($line_item_wrapper->value()) $data = $line_item_wrapper->commerce_unit_price->data->value();
    }

    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $weight = commerce_physical_order_weight($order, 'kg')['weight'];

    $products_amount_base = commerce_price_component_total($order_wrapper->commerce_order_total->value(), 'base_price')['amount'];

    $pane_form['order_amount'] = ['#type' => 'hidden', '#value' => $products_amount_base/100, '#attributes' => ['class' => ['cdek-order-amount']]];
    $pane_form['order_weight'] = ['#type' => 'hidden', '#value' => $weight, '#attributes' => ['class' => ['cdek-order-weight']]];

    // выбор и ссылка на карту
    $method = '';

//    if (empty($data['cdek']['point']) && empty($data['cdek']['courier'])) $link = '<a href="#" id="cdek_link"><strong>Выбрать пункт выдачи на карте</strong></a>';
//    if (empty($data['cdek']['courier']) && !empty($data['cdek']['pvz'])) {
//        $method = $data['cdek']['cityName'] . ', ' . $data['cdek']['pvz']['address'] . ' (' . $data['cdek']['id'] . ')';
//        $link = '(<a href="#" id="cdek_link"><strong>изменить пункт выдачи или выбрать доставку курьером</strong></a>)';
//    }
//    if (!empty($data['cdek']['courier']) && empty($data['cdek']['pvz'])) {
//        $method = 'Курьером до двери';
//        $link = '(<a href="#"  id="cdek_link"><strong>получить в пункте выдачи</strong></a>' . ')';
//    }
//
//    // адрес пункта выдачи
//    $pane_form['select'] = [
//        '#markup' => '<div class="col-xs-12 form-item form-type-select form-group">' .
//                        '<label class="control-label">Адрес пункта выдачи</label>' .
//                        '<div><span class="cdek_addr">' . $method . '</span> ' . $link . '</div>' .
//                    '</div>'
//        ];
  $pane_form['select'] = [
    '#type' => 'item',
    '#markup' => '' .
      '<label class="control-label">Адрес пункта выдачи</label>' .
      '<div><span class="cdek_addr">' . (empty($data['address']) ? '' : $data['address']) . '</span> ' .
      (empty($data['address']) ?
        '<a href="#" id="cdek_link"><strong>Выбрать пункт выдачи на карте</strong></a>'
        : ' (' . '<a href="#"  id="cdek_link"><strong>изменить пункт выдачи</strong></a>' . ')') .
      '</div>' .
      ''
  ];


    if (!empty($data['cdek']['courier'])) {
        $pane_form['addr'] = [
            '#title' => 'Адрес',
            '#type' => 'textfield',
        ];
        $pane_form['office'] = [
            '#title' => 'Квартира/Офис',
            '#type' => 'textfield',
        ];
    }

    $pane_form['username'] = array(
        '#title' => 'Фамилия, Имя, Отчество',
        '#type' => 'textfield',
    );
    $pane_form['phone'] = array(
        '#title' => 'Телефон',
        '#type' => 'textfield',
        '#attributes' => ['class' => ['masked-phone']],
    );

    // комментарий к заказу
    $pane_form['notes'] = array(
        '#title' => t('Notes to order'),
        '#type' => 'textarea',
        '#rows' => 2,
    );
    $pane_form['callme'] = array(
        '#title' => t('Call me to get details about my order and delivery'),
        '#type' => 'checkbox',
    );

    return $pane_form;
}

/**
 * Shipping service callback: validates the shipping service details.
 */
function cdek_service_details_form_validate($details_form, $details_values, $shipping_service, $order, $form_parents)
{
    if (isset($details_values['addr']) && drupal_strlen($details_values['addr']) < 8)     {
        form_set_error(implode('][', array_merge($form_parents, ['addr'])), 'Укажите адрес доставки для курьера.');
        return false;
    }

    $fields = array();
    if (drupal_strlen($details_values['username']) < 8) { $fields[] = 'username'; }
    if (drupal_strlen($details_values['phone']) < 5) { $fields[] = 'phone'; }

    if ($fields) {
        $message = 'Поля, выделенные красным, не заполнены или заполнены с ошибкой.';
        foreach($fields as $field) {
            form_set_error(implode('][', array_merge($form_parents, array($field))), $message);
            $message = '';
        }
        return false;
    } else {
        return true;
    }
}

/**
 * Shipping service callback: increases the shipping line item's unit price if
 * express delivery was selected.
 */
function cdek_service_details_form_submit($details_form, $details_values, $line_item)
{
    $order_wrapper = entity_metadata_wrapper('commerce_order', $line_item->order_id);
    $order_wrapper->field_username = $details_values['username'];
    $order_wrapper->field_phone = $details_values['phone'];
    if (!empty($details_values['addr'])) $order_wrapper->commerce_customer_shipping->field_addr = $details_values['addr'];
    if (!empty($details_values['office'])) $order_wrapper->commerce_customer_shipping->field_office = $details_values['office'];
    $order_wrapper->commerce_customer_shipping->field_callme = $details_values['callme'];
    $order_wrapper->commerce_customer_shipping->save();
    $order_wrapper->save();
}


/**
 * Implements hook_preprocess_page
 */
function cdek_preprocess_page(&$vars)
{
    // добавляем скрипт СДЭК
    if (strpos($_GET['q'], 'checkout') === 0) {
        drupal_add_js(drupal_get_path('module', 'cdek') . '/widget/widjet.js');
        drupal_add_js(drupal_get_path('module', 'cdek') . '/js/cdek.js');
    }
}
