<?php

/**
 * @file
 * Defines an example shipping method for testing and development.
 */


/**
 * Implements hook_commerce_shipping_method_info().
 */
function cdek_commerce_shipping_method_info()
{
    $shipping_methods['cdek_shipping_method'] = array(
        'title' => t('СДЭК shipping method'),
        'description' => t('Defines shipping method by СДЭК.'),
    );

    return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function cdek_commerce_shipping_service_info()
{
  $shipping_services['cdek_shipping_service'] = array(
    'title' => t('СДЭК shipping service'),
    'display_title' => t('СДЭК'),
    'shipping_method' => 'cdek_shipping_method',
    'price_component' => 'cdek',
    'weight' => 5,
    'callbacks' => array(
      'rate' => 'cdek_service_rate_order',
      'details_form' => 'cdek_service_details_form',
      'details_form_validate' => 'cdek_service_details_form_validate',
      'details_form_submit' => 'cdek_service_details_form_submit',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function cdek_service_rate_order($shipping_service, $order)
{
  $rate = array(
    'amount' => -1,
    'currency_code' => 'RUB',
    'data' => [],
  );

  // для проверки только манагерам
//  if (!user_has_role(PRODUCT_MANAGER_RID)) {
//    return false;
//  }

  // при переходе на страницу оформления запрос на расчёт выполняется дважды:
  // при первом построении формы и автонажатии кнопки Recalc
  // чтобы страница открывалась без задержек расчёт делаем только по кнопке Recalc
  if (arg(0) != 'checkout') {
    $rates = &drupal_static(__FUNCTION__);
    if (!$rates) {
      $rate_request = cdek_build_rate_request($order);

      // поле с данными о доставке
      $order_wr = entity_metadata_wrapper('commerce_order', $order);
      $field_name = commerce_physical_order_shipping_field_name($order);
      $field_data = json_decode($order_wr->{$field_name}->field_data->value(), TRUE);

      if (empty($rate_request["errors"])) {
        $cache_key = $rate_request["receiver_zipcode"] . $rate_request['weight'] . $rate_request['amount'] . $rate_request["target_point"];
        if (strpos($_SERVER['HTTP_HOST'], '.local') === false)  {
          $cache = commerce_shipping_rates_cache_get('cdek' . $cache_key, $order, 600);
        } else {
          $cache = commerce_shipping_rates_cache_get('cdek' . $cache_key, $order, 0);
        }

        if (!$cache) {
          try {
            $response = cdek_api_request($rate_request);
          } catch (Exception $e) {
            $response["error"][] = ['text' => $e->getMessage()];
          }

          // если ошибка
          if (isset($response["error"])) {
            if ($response["error"][0]["code"] == 3) {
              $rate['data']['errors'][] = 'Нет доставки в этот населенный пункт';
            }
            else {
              $rate['data']['errors'][] = $response["error"][0]["text"];
            }
            $field_data['cdek'] = [];
          }
          else {
            // сохраняем стоимость доставки
            if (empty($field_data['cdek'])) {
              $field_data['cdek'] = [];
            }
            $field_data['cdek']['calc_backend'] = $response['result'];

            $rate['amount'] = ceil($response['result']['price']) * 100;
            $rate['data']['delivery_time'] = $response['result']['deliveryPeriodMax'];
            if (!empty($field_data['cdek']['point']['address'])) {
              $rate['data']['address'] = $field_data['cdek']['cityName'] . ', ' . $field_data['cdek']['point']['address'];
            }

            if (!ext_checkout_non_free_shipping($order)) {
              $rate['amount'] = 0;
            }

            commerce_shipping_rates_cache_set('cdek' . $cache_key, $order, $rate);
          }
        }
        else {
          $rate = $cache;
        }
      }
      else {
        $rate['data']['errors'] = $rate_request['errors'];
        $field_data['cdek'] = [
          'errors' => $rate_request['errors'],
        ];
      }

      $order_wr->{$field_name}->field_data = json_encode($field_data);
      $order_wr->{$field_name}->save();
    }
  }

  // если доставка всё ещё равна нулю, то это ошибка
  return ($rate['amount'] != -1 || isset($rate['data']['errors'])) ? $rate : false;
}

/**
 * подготовить массив для запроса
 */
function cdek_build_rate_request($order)
{
  $request = [];
  $order_wr = entity_metadata_wrapper('commerce_order', $order);

  // Determine the shipping profile reference field name for the order.
  $field_name = commerce_physical_order_shipping_field_name($order);
  $shipping_profile = $order_wr->{$field_name}->value();

  // базовые данные
  $items = [];
  $zipcode = $weight = $amount = $target_point = $order_weight = $tariff_id = $receiver_city_id = '';
  if (isset($shipping_profile->field_data['und'][0]['value'])) {
    $data = json_decode($shipping_profile->field_data['und'][0]['value'], TRUE);
    if (empty($data['region']['data']['postal_code'])) {
      $request['errors']['zipcode'] = 'Не задан индекс';
    } else {
      $zipcode = $data['region']['data']['postal_code'];
    }
    $order_weight = commerce_physical_order_weight($order, 'kg')['weight'];
    $amount = $order_wr->commerce_order_total->value()['amount'] / 100;

    $check = ext_order_check_product_parameters($order);
    if ($check['weight']['weight'] > 100) {
      $request['errors']['weight'] = 'Вес превышает 100 кг';
    }
    elseif (empty($check['errors'])) {
      foreach ($check['products'] as $product) {
        $weight = physical_weight_convert($product['weight'], 'kg');
        $dimentions = physical_dimensions_convert($product['dimentions'], 'cm');
        $items[] = [
          'weight' => $weight['weight'],
          'height' => ceil($dimentions['height']),
          'width' => ceil($dimentions['width']),
          'length' => ceil($dimentions['length']),
        ];
      }
    } else {
      $request['errors'] = $check['errors'];
    }

    // возможно пункт уже выбран, нужно получить данные о нём
    if (!empty($data["cdek"]["point"]["id"])) {
      $receiver_city_id = $data["cdek"]["city"];
      $target_point = $data["cdek"]["point"]["id"];
    }

    // $calc->setAuth('DCCP2Y0vHfQJXdxesgu5xcfZzAXB5kMx', '2IHAf3whPpeUz85BPqrVuQGz21B9dfDV');
    // $calc->setAuth('z9GRRu7FxmO53CQ9cFfI6qiy32wpfTkd', 'w24JTCv4MnAcuRTx0oHjHLDtyt3I6IBq'); тест
    $request += [
      'account' => 'DCCP2Y0vHfQJXdxesgu5xcfZzAXB5kMx',
      'pass' => '2IHAf3whPpeUz85BPqrVuQGz21B9dfDV',
      'sender_city_id' => 241,                                  // из Чепецка
      'receiver_city_id' => $receiver_city_id,
      'sender_zipcode' => '613040',                             // из Чепецка
      'receiver_zipcode' => $zipcode,
      'target_point' => $target_point,                          // пункт выдачи, если выбран
      'tariff_id' =>  136,                                      // устанавливаем режим доставки: склад-склад
      'items' => $items,
      'amount' => $amount,
      'weight' => $order_weight,
    ];
  }

  return $request;
}

/**
 * выполнить запрос стоимости
 */
function cdek_api_request($data)
{
  // Авторизация. Для получения логина/пароля (в т.ч. тестового) обратитесь к разработчикам СДЭК -->
  include_once ('src/CdekSDK/CdekClient.php');
  $client = new CdekClient();
  $client->setAuth($data['account'], $data['pass']);


  // id города установлен в случае его выбора в виджете
  // то есть имеет приоритет
  if ($data['receiver_city_id']) {
      $client->setSenderCityId($data['sender_city_id']);
      $client->setReceiverCityId($data['receiver_city_id']);
  } else {
    $client->setSenderCityPostCode($data['sender_zipcode']);
    $client->setReceiverCityPostCode($data['receiver_zipcode']);
  }

  // выбираем тариф
  $client->setTariffId($data['tariff_id']);
  // добавляем места в отправление
  foreach ($data['items'] as $item) {
    $client->addGoodsItemBySize($item['weight'], $item['length'], $item['width'], $item['height']);
  }

  if ($client->calculate() === true) {
    return $client->getResult();
  }

  return $client->getError();
}

/**
 * Allows modules to alter the options array generated to select a shipping
 * service on the checkout form.
 */
function cdek_commerce_shipping_service_rate_options_alter(&$options, $order)
{
  if (isset($order->shipping_rates['cdek_shipping_service'] )) {
    $line_item = $order->shipping_rates['cdek_shipping_service'];
    $line_item_wr = entity_metadata_wrapper('commerce_line_item', $line_item);
    $data = $line_item_wr->commerce_unit_price->data->value();

    $message = $cost = '';
    if (empty($data['errors'])) {
      $cost = $line_item_wr->commerce_unit_price->amount->value();
      $cost = $cost ? commerce_currency_format($cost, 'RUB') : t('free');
    } else {
      $message = '<span class="text-danger">' . implode(', ', $data['errors']) . '</span>';
    }

    $options['cdek_shipping_service'] = '<div class="carrier">Заберу в<br />СДЭК</div>' .
      '<div class="message">' . $message . '</div>' .
      '<div class="cost">' . $cost . '</div>';
  }
}


/**
 * Shipping service callback: returns the shipping service details form.
 */
function cdek_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service)
{
  $pane_form = array();
  if (!empty($order->shipping_rates['cdek_shipping_service'])) {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $order->shipping_rates['cdek_shipping_service']);
    if ($line_item_wrapper->value()) {
      $data = $line_item_wrapper->commerce_unit_price->data->value();
    }
  }

  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $weight = commerce_physical_order_weight($order, 'kg')['weight'];
  $products_amount_base = commerce_price_component_total($order_wrapper->commerce_order_total->value(), 'base_price')['amount'];
  $pane_form['order_amount'] = ['#type' => 'hidden', '#value' => $products_amount_base/100, '#attributes' => ['class' => ['cdek-order-amount']]];
  $pane_form['order_weight'] = ['#type' => 'hidden', '#value' => $weight, '#attributes' => ['class' => ['cdek-order-weight']]];

  $pane_form['select'] = [
    '#type' => 'item',
    '#markup' =>
      '<label class="control-label">Адрес пункта выдачи</label>' .
      '<div><span class="cdek_addr">' . (empty($data['address']) ? '' : $data['address']) . '</span> ' .
      (empty($data['address']) ?
        '<a href="#" id="cdek_link"><strong>Выбрать пункт выдачи на карте</strong></a>'
        : ' (' . '<a href="#"  id="cdek_link"><strong>изменить пункт выдачи</strong></a>' . ')') .
      '</div>'
  ];

  $user_info = ext_user_get_user_info($order->uid, true);

  $pane_form['username'] = array(
    '#title' => 'Фамилия, Имя, Отчество',
    '#type' => 'textfield',
    '#default_value' => empty($user_info['name']['fullname']) ? '' : $user_info['name']['fullname'],
  );
  $pane_form['phone'] = array(
    '#title' => 'Телефон',
    '#type' => 'textfield',
    '#attributes' => ['class' => ['masked-phone']],
    '#default_value' => empty($user_info['phone']) ? '' : $user_info['phone'],
  );

  $pane_form['callme'] = array(
    '#title' => t('Call me to get details about my order and delivery'),
    '#type' => 'checkbox',
    '#default_value' => empty($user_info['address']['callme']) ? '' : $user_info['address']['callme'],
  );

  return $pane_form;
}

/**
 * Shipping service callback: validates the shipping service details.
 */
function cdek_service_details_form_validate($details_form, $details_values, $shipping_service, $order, $form_parents)
{
  $order_wr = entity_metadata_wrapper('commerce_order', $order);
  $field_name = commerce_physical_order_shipping_field_name($order);
  $field_data = json_decode($order_wr->{$field_name}->field_data->value(), TRUE);

  $validate = true;
  if (empty($field_data["cdek"]["point"]["id"])) {
    form_set_error(implode('][', array_merge($form_parents, ['select'])), 'Выберите пункт доставки на карте и нажмите "Выбрать"');
    $validate = false;
  }

  $field = 'username';
  if (empty($details_values[$field])) {
    form_set_error(implode('][', array_merge($form_parents, [$field])), 'Заполните это поле');
    $validate = false;
  }
  if (drupal_strlen($details_values[$field]) < 5) {
    form_set_error(implode('][', array_merge($form_parents, [$field])), 'Поле заполнено некорректно');
    $validate = false;
  }
  $field = 'phone';
  if (!ext_user_valid_phone($details_values[$field])) {
    form_set_error(implode('][', array_merge($form_parents, [$field])), 'Укажите в формате 7 (xxx) xxx-xxxx');
    $validate = false;
  }

  return $validate;
}

/**
 * Shipping service callback: increases the shipping line item's unit price if
 * express delivery was selected.
 */
function cdek_service_details_form_submit($details_form, $details_values, $line_item)
{
    $order_wrapper = entity_metadata_wrapper('commerce_order', $line_item->order_id);
    $order_wrapper->field_username = $details_values['username'];
    $order_wrapper->field_phone = ext_user_normalize_phone($details_values['phone']);
    if (!empty($details_values['addr'])) $order_wrapper->commerce_customer_shipping->field_addr = $details_values['addr'];
    if (!empty($details_values['office'])) $order_wrapper->commerce_customer_shipping->field_office = $details_values['office'];
    $order_wrapper->commerce_customer_shipping->field_callme = $details_values['callme'];
    $order_wrapper->commerce_customer_shipping->save();
    $order_wrapper->save();
}

// callback функция, возвращающая информацию о доставке для заказов
function cdek_shipping_service_info($item, $shipping_profile)
{
  $field_data = empty($shipping_profile->field_data['und'][0]['value']) ? null : json_decode($shipping_profile->field_data['und'][0]['value'], true);

  return [
    'title' => $item->line_item_label,
    'method' => $item->commerce_shipping_service['und'][0]['value'],
    'address' => empty($field_data["cdek"]["point"]["address"]) ? '' : $field_data["cdek"]["point"]["address"],
    'point_id' => empty($field_data["cdek"]["point"]["id"]) ? '' : $field_data["cdek"]["point"]["id"],
  ];
}

/**
 * Implements hook_preprocess_page
 */
function cdek_preprocess_page(&$vars)
{
    // добавляем скрипт СДЭК
    if (strpos($_GET['q'], 'checkout') === 0) {
        drupal_add_js(drupal_get_path('module', 'cdek') . '/widget/widjet.js');
        drupal_add_js(drupal_get_path('module', 'cdek') . '/js/cdek.js');
    }
}
