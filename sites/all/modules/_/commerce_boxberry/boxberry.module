<?php

/**
 * @file
 * Defines an example shipping method for testing and development.
 */


/**
 * Implements hook_commerce_shipping_method_info().
 */
function boxberry_commerce_shipping_method_info()
{
    $shipping_methods['boxberry_shipping_method'] = array(
        'title' => t('Boxberry shipping method'),
        'description' => t('Defines shipping method by Boxberry.'),
    );

    return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function boxberry_commerce_shipping_service_info()
{
  $shipping_services['boxberry_shipping_service'] = array(
    'title' => t('Boxberry shipping service'),
    'display_title' => 'Boxberry',
    'shipping_method' => 'boxberry_shipping_method',
    'price_component' => 'shipping',
    'weight' => 2,
    'callbacks' => array(
      'rate' => 'boxberry_service_rate_order',
      'details_form' => 'boxberry_service_details_form',
      'details_form_validate' => 'boxberry_service_details_form_validate',
      'details_form_submit' => 'boxberry_service_details_form_submit',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function boxberry_service_rate_order($shipping_service, $order)
{
    $rate = array(
        'amount' => -1,
        'currency_code' => 'RUB',
        'data' => [],
    );

  // при переходе на страницу оформления запрос на расчёт выполняется дважды:
  // при первом построении формы и автонажатии кнопки Recalc
  // чтобы страница открывалась без задержек расчёт делаем только по кнопке Recalc
  if (arg(0) != 'checkout') {
    $rates = &drupal_static(__FUNCTION__);
    if (!$rates) {
      $rate_request = boxberry_build_rate_request($order);

      // поле с данными о доставке
      $order_wr = entity_metadata_wrapper('commerce_order', $order);
      $field_name = commerce_physical_order_shipping_field_name($order);
      $field_data = json_decode($order_wr->{$field_name}->field_data->value(), TRUE);

      if (empty($rate_request["errors"])) {
        $cache_key = $rate_request['zipcode'] . $rate_request['weight'] . $rate_request['amount'];
        //            if (strpos($_SERVER['HTTP_HOST'], '.local') === false)  {
        // todo кеш не учитывает применение купона
        //              $cache = commerce_shipping_rates_cache_get('boxberry' . $cache_key, $order, variable_get('commerce_boxberry_cache_timeout', 86400));
        //            } else {
        $cache = commerce_shipping_rates_cache_get('boxberry' . $cache_key, $order, 1); // секунда в кэше
        //            }

        if (!$cache) {
          $response = boxberry_api_request($rate_request);

          // если пустой ответ или ошибка
          if (count($response['cost_data']) <= 0 || !empty($response['cost_data'][0]['err'])) {
            $rate['data']['errors'][] = $response['cost_data'][0]['err'];
            $field_data['boxberry'] = [];
          }
          // если стомость нулевая
          elseif ($response["cost_data"]["price_base"] == 0) {
            $field_data['boxberry'] = [];
            //                      $rate['data']['errors'][] = 'Пунктов выдачи не найдено';
            return FALSE;
          }
          // расчёт выполнен
          else {
            // сохраняем стоимость доставки
            if (empty($field_data['boxberry'])) {
              $field_data['boxberry'] = [];
            }
            $field_data['boxberry'] = array_merge($field_data['boxberry'], $response);

            $rate['amount'] = ceil($response['cost_data']['price_base']) * 100;
            $rate['data']['delivery_time'] = $response['cost_data']['delivery_period'];
            if (!empty($field_data['boxberry']['point_data']['address'])) {
              $rate['data']['address'] = $field_data['boxberry']['point_data']['address'];
            }

            if (!ext_checkout_non_free_shipping($order)) {
              $rate['amount'] = 0;
            }

            commerce_shipping_rates_cache_set('boxberry' . $cache_key, $order, $rate);
          }
        }
        else {
          $rate = $cache;
        }
      }
      else {
        $rate['data']['errors'] = $rate_request['errors'];
        $field_data['boxberry'] = [];
      }

      $order_wr->{$field_name}->field_data = json_encode($field_data);
      $order_wr->{$field_name}->save();
    }
  }

  // если доставка всё ещё равна нулю, то это ошибка
  return ($rate['amount'] != -1 || isset($rate['data']['errors'])) ? $rate : false;
}

/**
 * подготовить массив для запроса
 */
function boxberry_build_rate_request($order)
{
  $request = [];

  // проверка веса и размеров
  $check = ext_order_check_product_parameters($order);
  if ($check['weight']['weight'] > 100) {
    $request['errors']['weight'] = 'Вес превышает 100 кг';
  }
  elseif (!empty($check['errors']['weight'])) {
    $request['errors'] = $check['errors'];
  }

  if (empty($request['errors'])) {
    $order_wr = entity_metadata_wrapper('commerce_order', $order);
    $field_name = commerce_physical_order_shipping_field_name($order);
    $shipping_profile = $order_wr->{$field_name}->value();

    // базовые данные
    $zipcode = $weight = $amount = $target_point = '';
    if (isset($shipping_profile->field_data['und'][0]['value'])) {
      $data = json_decode($shipping_profile->field_data['und'][0]['value'], TRUE);
      $zipcode = empty($data['region']['data']['postal_code']) ? '' : $data['region']['data']['postal_code'];
      $weight = commerce_physical_order_weight($order, 'g')['weight'];
      $amount = $order_wr->commerce_order_total->value()['amount'] / 100;

      // возможно пункт уже выбран, нужно получить данные о нём
      $target_point = empty($data['region']['data']['boxberry_id']) ? NULL : $data['region']['data']['boxberry_id'];
      if (!empty($data['boxberry'])) {
        $target_point = empty($data['boxberry']['point']['id']) ? '' : $data['boxberry']['point']['id'];
      }
    }

    if (empty($zipcode)) {
      $request['errors']['zipcode'] = 'Выберите населенный пункт из списка';
    }
  }

  $request += [
      'zipcode' => $zipcode,
      'weight' => $weight,
      'amount' => $amount,
      'target_point' => $target_point,
  ];

    return $request;
}

/**
 * выполнить запрос стоимости
 */
function boxberry_api_request($data)
{
    // стоимость доставки
    $url = 'http://api.boxberry.ru/json.php?token=bfac706581729d6129d54c6a8089635c&method=DeliveryCosts' .
        '&weight=' . $data['weight'] .
        ($data['zipcode'] ? '&zip=' . $data['zipcode'] : '') .
        ($data['target_point'] ? '&target=' . $data['target_point'] : '') .
        '&ordersum=' . $data['amount'];
    $handle = fopen($url, "rb"); $contents = stream_get_contents($handle); fclose($handle);
    $response['cost_data'] = json_decode($contents, TRUE);

    if (!empty($data['zipcode'])) {
        $url = 'http://api.boxberry.ru/json.php?token=bfac706581729d6129d54c6a8089635c&method=ZipCheck&Zip=' . $data['zipcode'];

        $handle = fopen($url, "rb");
        $contents = stream_get_contents($handle); fclose($handle);
        $contents = json_decode($contents,true);
        $response['courier'] = array_shift($contents);
    }

    // описание точки
    if ($data['target_point']) {
        $url = 'http://api.boxberry.ru/json.php?token=bfac706581729d6129d54c6a8089635c&method=PointsDescription&code=' . $data['target_point'];
        $handle = fopen($url, "rb");
        $contents = stream_get_contents($handle);
        fclose($handle);
        $response['point_data'] = json_decode($contents, TRUE);
    }

    return $response;
}

/**
 * Allows modules to alter the options array generated to select a shipping
 * service on the checkout form.
 */
function boxberry_commerce_shipping_service_rate_options_alter(&$options, $order)
{
    if (isset($order->shipping_rates['boxberry_shipping_service'] )) {
        $line_item = $order->shipping_rates['boxberry_shipping_service'];
        $line_item_wr = entity_metadata_wrapper('commerce_line_item', $line_item);
        $data = $line_item_wr->commerce_unit_price->data->value();

        $message = $cost = '';
        if (empty($data['errors'])) {
            $cost = $line_item_wr->commerce_unit_price->amount->value();
            $cost = $cost ? commerce_currency_format($cost, 'RUB') : t('free');
        } else {
          $message = '<span class="text-danger">' . 'Ошибка расчёта: ' . drupal_strtolower(implode(', ', $data['errors'])) . '</span>';
        }

        $options['boxberry_shipping_service'] = '<div class="carrier">Заберу в<br />Boxberry</div>' .
                                                '<div class="message">' . $message . '</div>' .
                                                '<div class="cost">' . $cost . '</div>';
    }
}


/**
 * Shipping service callback: returns the shipping service details form.
 */
function boxberry_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service)
{
    $pane_form = array();

    if (!empty($order->shipping_rates['boxberry_shipping_service'])) {
        $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $order->shipping_rates['boxberry_shipping_service']);
        if ($line_item_wrapper->value()) $data = $line_item_wrapper->commerce_unit_price->data->value();
    }

    // адрес пункта выдачи
    $pane_form['select'] = [
        '#type' => 'item',
        '#markup' =>    '<label class="control-label">Адрес пункта выдачи</label>' .
                        '<div><span class="boxberry_addr_show">' . (empty($data['address']) ? '' : $data['address']) . '</span> ' .
                        (empty($data['address']) ?
                            '<a href="#" id="boxberry_link"><strong>Выбрать пункт выдачи на карте</strong></a>'
                            : ' (' . '<a href="#"  id="boxberry_link"><strong>изменить пункт выдачи</strong></a>' . ')') .
                        '</div>'
        ];

  $user_info = ext_user_get_user_info($order->uid, true);

  $pane_form['username'] = array(
    '#title' => 'Фамилия, Имя, Отчество',
    '#type' => 'textfield',
    '#default_value' => empty($user_info['name']['fullname']) ? '' : $user_info['name']['fullname'],
  );
  $pane_form['phone'] = array(
    '#title' => 'Телефон',
    '#type' => 'textfield',
    '#attributes' => ['class' => ['masked-phone']],
    '#default_value' => empty($user_info['phone']) ? '' : $user_info['phone'],
  );

  $pane_form['callme'] = array(
    '#title' => t('Call me to get details about my order and delivery'),
    '#type' => 'checkbox',
    '#default_value' => empty($user_info['address']['callme']) ? '' : $user_info['address']['callme'],
  );

    return $pane_form;
}

/**
 * Shipping service callback: validates the shipping service details.
 */
function boxberry_service_details_form_validate($details_form, $details_values, $shipping_service, $order, $form_parents)
{
  $order_wr = entity_metadata_wrapper('commerce_order', $order);
  $field_name = commerce_physical_order_shipping_field_name($order);
  $field_data = json_decode($order_wr->{$field_name}->field_data->value(), TRUE);

  $validate = true;
  if (empty($field_data["boxberry"]["point_data"]) || isset($field_data["boxberry"]["point_data"]["err"])) {
    form_set_error(implode('][', array_merge($form_parents, ['select'])), 'Выберите пункт доставки на карте и нажмите "Выбрать отделение"');
    $validate = false;
  }

  $field = 'username';
  if (empty($details_values[$field])) {
    form_set_error(implode('][', array_merge($form_parents, [$field])), 'Заполните это поле');
    $validate = false;
  }
  if (drupal_strlen($details_values[$field]) < 5) {
    form_set_error(implode('][', array_merge($form_parents, [$field])), 'Поле заполнено некорректно');
    $validate = false;
  }
  $field = 'phone';
  if (!ext_user_valid_phone($details_values[$field])) {
    form_set_error(implode('][', array_merge($form_parents, [$field])), 'Укажите в формате 7 (xxx) xxx-xxxx');
    $validate = false;
  }

  return $validate;
}

/**
 * Shipping service callback
 */
function boxberry_service_details_form_submit($details_form, $details_values, $line_item)
{
    $order_wrapper = entity_metadata_wrapper('commerce_order', $line_item->order_id);
    $order_wrapper->field_username = $details_values['username'];
    $order_wrapper->field_phone = $details_values['phone'];
    $order_wrapper->commerce_customer_shipping->field_callme = $details_values['callme'];
    $order_wrapper->commerce_customer_shipping->save();
    $order_wrapper->save();
}

/**
 * Implements hook_preprocess_page
 */
function boxberry_preprocess_page(&$vars)
{
    // добавляем скрипт Boxberry
    if (strpos($_GET['q'], 'checkout') === 0) {
        drupal_add_js('https://points.boxberry.de/js/boxberry.js');
        drupal_add_js(drupal_get_path('module', 'boxberry') . '/js/boxberry.js');
    }
}

// callback функция, возвращающая информацию о доставке для заказов
function boxberry_shipping_service_info($item, $shipping_profile)
{
    $component_data = empty($item->commerce_total['und'][0]['data']) ? [] : $item->commerce_total['und'][0]['data'];
    $field_data = empty($shipping_profile->field_data['und'][0]['value']) ? null : json_decode($shipping_profile->field_data['und'][0]['value'], true);
    $point_id = empty($shipping_profile->field_boxberry_target['und'][0]['value']) ? null : $shipping_profile->field_boxberry_target['und'][0]['value'];

    if (!$point_id && !empty($field_data['boxberry'])) {
        $point_id = $field_data['boxberry']['point_data']['id'];
    }

    return [
        'title' => $item->line_item_label,
        'method' => $item->commerce_shipping_service['und'][0]['value'],
        'address' => empty($component_data['address']) ? '' : $component_data['address'],
        'point_id' => $point_id,
    ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function boxberry_form_commerce_checkout_form_checkout_alter(&$form, &$form_state)
{
    // проверить, может быть для Boxberry пункт уже выбран
    // сбросить ошибку для модуля вывода ошибок под элементами
    if (!empty($form_state['input']['commerce_shipping']['service_details']['boxberry_set'])) {
        unset($form_state['storage']['errors']['commerce_shipping][service_details][select']);
    }
}
