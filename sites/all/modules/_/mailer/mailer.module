<?php
require 'includes/mailer.email.inc';
require 'includes/mailer.sms.inc';

define('SUBSCRIPTION_NOTIFY_EMAIL', 628);
define('SUBSCRIPTION_NOTIFY_SMS', 629);
define('SUBSCRIPTION_PROMO_EMAIL', 630);
define('SUBSCRIPTION_PROMO_SMS', 631);

/**
 * Implements hook_menu()
 */
function mailer_menu()
{
    $items['admin/config/joy/mailer'] = array(
        'title' => 'Рассылка',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mailer_email_form'),
        'access arguments' => array('access manager settings'),
        'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/mailer.email.inc',
    );
    $items['admin/config/joy/mailer/email'] = array(
      'title' => 'Рассылка E-Mail',
      'type' => MENU_DEFAULT_LOCAL_TASK,
    );
    $items['admin/config/joy/mailer/sms'] = array(
        'title' => 'Рассылка SMS',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('mailer_sms_form'),
        'access arguments' => array('access manager settings'),
        'type' => MENU_LOCAL_TASK,
        'file' => 'includes/mailer.sms.inc',
    );

  $items['unsubscribe'] = array(
    'title' => t('Unsubscribe'),
    'page callback' => 'mailer_unsubscribe_callback',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

    return $items;
}

/**
 * Implements hook_cron().
 */
function mailer_cron()
{
    // добавляем задания для рассылки уведомлений о брошенных Корзинах
    mailer_queue_cart_orphan_mails();
    // добавляем задания для рассылки уведомлений на Отзыв о товарах
    mailer_queue_order_review_mails();
    // добавляем задания для рассылки уведомлений на Отзыв о сервисе
    mailer_queue_shop_review_mails();
}

/**
 * Implements hook_cron_queue_info().
 */
function mailer_cron_queue_info()
{
    $queues['cart_orphan_mails_queue'] = array(
        'worker callback' => 'mailer_send_cart_orphan_mails',
    );
    $queues['order_review_mails_queue'] = array(
        'worker callback' => 'mailer_send_order_review_mails',
    );
    $queues['shop_review_mails_queue'] = array(
        'worker callback' => 'mailer_send_shop_review_mails',
    );

    $queues['manual_mails_queue'] = array(
      'worker callback' => 'mailer_send_manual_mails',
    );

    $queues['manual_sms_queue'] = array(
        'worker callback' => 'mailer_send_manual_sms',
    );

    return $queues;
}


/**
 * отправка письма с уведомлением о брошенной Корзине
 * 00000001 - флаг отправленного уведомления
 * время жизни > 24 часов, без изменения > 8 часов
 */
function mailer_queue_cart_orphan_mails()
{
    // найти брошенные корзины ()
    $query = db_select('commerce_order', 'co');
    $query->condition('co.created', REQUEST_TIME - 86400, '<');
    $query->condition('co.changed', REQUEST_TIME - 28800, '<');
    $query->condition('co.mail', '', '<>');
    $query->condition('co.status', ['cart', 'checkout_checkout', 'checkout_payment' ], 'IN');
    $query->leftJoin('field_data_field_flags', 'ff', 'ff.entity_id = co.order_id');
    $query->fields('co', ['order_id']);
    $query->fields('ff', ['field_flags_value']);
    if ($results = $query->execute()->fetchAll()) {
        // сформировать очередь из операций уведомления
        $queue = DrupalQueue::get('cart_orphan_mails_queue');
        foreach($results as $item) {
            // проверяем на наличие неуведомлённых корзин
            if ((!$item->field_flags_value || !($item->field_flags_value & bindec('00000001')))) {
                $queue->createItem($item->order_id);
                // установить флаг уведомления
                $order_wr = entity_metadata_wrapper('commerce_order', $item->order_id);
                $flags = $order_wr->field_flags->value();
                $order_wr->field_flags = $flags | bindec('00000001');
                $order_wr->save();
            }
        }
    }
}

/**
 * cron queue worker callback
 */
function mailer_send_cart_orphan_mails($order_id)
{
  $order_wr = entity_metadata_wrapper('commerce_order', $order_id);
  $uid = $order_wr->uid->value();
  $user_info = ext_user_get_user_info($uid, $order_id);

  // отправить всем незарегистрированным и зарегистрированным, если есть подписка
  if (!empty($user_info['email']) && (!$uid || mailer_check_subscription(SUBSCRIPTION_PROMO_EMAIL, $uid))) {
    $account = user_load($uid);
    $params['account'] = $account;
    $params['order_info'] = ext_order_get_order_info($order_wr->value());
    drupal_mail('mailer', 'cart_orphan', $order_wr->mail->value(), user_preferred_language($account), $params);
  }
  if (!empty($user_info['phone']) && (!$uid || mailer_check_subscription(SUBSCRIPTION_PROMO_SMS, $uid))) {
    $params['phone'] = $user_info['phone'];
    mailer_send_sms('cart_orphan', $params);
  }
}


/**
 * отправка письма с просьбой оставить Отзыв для отправленных заказов
 * 00000010 - флаг отправленного уведомления
 * время с момента отправки > 2 недель
 */
function mailer_queue_order_review_mails()
{
    $query = db_select('commerce_order', 'co');
    $query->condition('co.changed', REQUEST_TIME - 1209600, '<');
    $query->condition('co.mail', '', '<>');
    $query->condition('co.status', 'completed');
    $query->leftJoin('field_data_field_flags', 'ff', 'ff.entity_id = co.order_id');
    $query->fields('co', ['order_id', 'uid']);
    $query->fields('ff', ['field_flags_value']);
    if ($results = $query->execute()->fetchAll()) {
        // формируем очередь из операций уведомления
        $queue = DrupalQueue::get('order_review_mails_queue');
        foreach($results as $item) {
          // проверяем все на наличие неуведомлённых заказов
          if (!$item->field_flags_value || !($item->field_flags_value & bindec('00000010'))) {
            $queue->createItem($item->order_id);
            // watchdog('mailer_order', 'Постановка в очередь. Заказ ' . $item->order_id, [], WATCHDOG_DEBUG);

            // установить флаг
            $order_wr = entity_metadata_wrapper('commerce_order', $item->order_id);
            $flags = $order_wr->field_flags->value();
            $order_wr->field_flags = $flags | bindec('00000010');
            $order_wr->save();
          }
        }
    }
}

/**
 * cron queue worker callback
 */
function mailer_send_order_review_mails($order_id)
{
  $order_wr = entity_metadata_wrapper('commerce_order', $order_id);
  $uid = $order_wr->uid->value();
  $user_info = ext_user_get_user_info($uid, $order_id);

  // отправить всем незарегистрированным и зарегистрированным, если есть подписка
  if (!empty($user_info['email']) && (!$uid || mailer_check_subscription(SUBSCRIPTION_NOTIFY_EMAIL, $uid))) {
    $account = user_load($uid);
    $params['account'] = $account;
    $params['order_info'] = ext_order_get_order_info($order_wr->value());
    // таблица со списком препаратов
    $td = 'border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; padding: 4px 8px;';
    $table = 'Товары не найдены.';
    if ($order_wr->commerce_line_items->count()) {
      $table = [
        'header' => [
          [
            'data' => 'Наименование',
            'style' => $td . 'min-width: 350px; text-align: center;'
          ],
          [
            'data' => 'Ссылка',
            'style' => $td . 'width: 150px; text-align: center;'
          ],
        ],
      ];
      foreach ($order_wr->commerce_line_items as $item_wrapper) {
        if (in_array($item_wrapper->type->value(), commerce_product_line_item_types())) {
          $pid = $item_wrapper->commerce_product->product_id->value();
          $title = $item_wrapper->commerce_product->title->value();
          $nid = _get_product_display_by_product_id($pid);
          $table['rows'][] = [
            ['data' => $title, 'style' => $td],
            [
              'data' => '<a href="' . url('node/' . $nid, [
                  'absolute' => TRUE,
                  'fragment' => 'scroll-to-block-views-product-reviews-block'
                ]) . '">поставить оценку</a>',
              'style' => $td . 'text-align:center;'
            ],
          ];
        }
      }
    }
    $params['table'] = $table;
    drupal_mail('mailer', 'leave_review', $order_wr->mail->value(), user_preferred_language($account), $params);
  }
  if (!empty($user_info['phone']) && (!$uid || mailer_check_subscription(SUBSCRIPTION_NOTIFY_SMS, $uid))) {
    $params['phone'] = $user_info['phone'];
    mailer_send_sms('leave_review', $params);
  }
  // watchdog('mailer_order', 'Отправка. Заказ ' . $order_id, [], WATCHDOG_DEBUG);
}


/**
 * отправка письма с просьбой оставить Отзыв на магазин
 * 00000100 - флаг отправленного уведомления
 * время с момента отправки > 2 недель и 2х дней
 */
function mailer_queue_shop_review_mails()
{
  $query = db_select('commerce_order', 'co');
  $query->condition('co.changed', REQUEST_TIME - 1382400, '<');
  $query->condition('co.mail', '', '<>');
  $query->condition('co.status', 'completed');
  $query->leftJoin('field_data_field_flags', 'ff', 'ff.entity_id = co.order_id');
  $query->fields('co', ['order_id', 'uid']);
  $query->fields('ff', ['field_flags_value']);
  if ($results = $query->execute()->fetchAll()) {
    // формируем очередь из операций уведомления
    $queue = DrupalQueue::get('shop_review_mails_queue');
    foreach($results as $index => $item) {
      // проверяем все на наличие неуведомлённых заказов
      if ((!$item->field_flags_value || !($item->field_flags_value & bindec('00000100')))) {
        $queue->createItem($item->order_id);
        // watchdog('mailer_shop', 'Постановка в очередь. Заказ ' . $item->order_id, [], WATCHDOG_DEBUG);

        // после поставновки сразу меняем флаг
        $order_wr = entity_metadata_wrapper('commerce_order', $item->order_id);
        $flags = $order_wr->field_flags->value();
        $order_wr->field_flags = $flags | bindec('00000100');
        $order_wr->save();
      }
    }
  }
}

/**
 * cron queue worker callback
 */
function mailer_send_shop_review_mails($order_id)
{
  $order_wr = entity_metadata_wrapper('commerce_order', $order_id);
  $uid = $order_wr->uid->value();
  $user_info = ext_user_get_user_info($uid, $order_id);

  // отправить всем незарегистрированным и зарегистрированным, если есть подписка
  if (!empty($user_info['email']) && (!$uid || mailer_check_subscription(SUBSCRIPTION_NOTIFY_EMAIL, $uid))) {
    $account = user_load($uid);
    $params['account'] = $account;
    $params['order_info'] = ext_order_get_order_info($order_wr->value());
    drupal_mail('mailer', 'leave_shop_review', $order_wr->mail->value(), user_preferred_language($account), $params);
  }
  if (!empty($user_info['phone']) && (!$uid || mailer_check_subscription(SUBSCRIPTION_NOTIFY_SMS, $uid))) {
    $params['phone'] = $user_info['phone'];
    mailer_send_sms('leave_shop_review', $params);
  }

  // проблема с отправкой множества писем одному пользователю
  // watchdog('mailer_shop', 'Отправка. Заказ ' . $order_id, [], WATCHDOG_DEBUG);
}

/**
 * cron queue worker callback
 */
function mailer_send_manual_mails($params)
{
   drupal_mail('mailer', 'manual', $params['mail'], 'ru', $params);
}

/**
 * cron queue worker callback
 */
function mailer_send_manual_sms($params)
{
  mailer_send_sms('manual', $params);
}

/**
 * проверка наличия подписки у пользователя
 */
function mailer_check_subscription($subscription_tid, $user)
{
  if (is_numeric($user)) {
    $user = user_load($user);
  }

  $flag = flag_get_flag('subscriptions');
  return $user->uid && $flag && $flag->is_flagged($subscription_tid, $user->uid);
}


/**
 * --------------------------------- Форма полной отписки от Уведомлений -----------------------------------------------
 *
 * menu callback
 */
function mailer_unsubscribe_callback()
{
  $mail = empty($_GET['mail']) ? '' : $_GET['mail'];
  if ($mail && $user = ext_user_user_load_by_login($mail)) {
    $form = drupal_get_form('mailer_unsubscribe_form', $user->uid);
    return drupal_render($form);
  } else {
    drupal_goto('<front>');
  }
}

/**
 * форма подтверждения отписки
 */
function mailer_unsubscribe_form($form, $form_state, $uid)
{
  $form['#attributes'] = ['class' => ['unsubscribe-form']];
  $form['uid'] = ['#type' => 'hidden', '#value' => $uid];
  $form['text'] = ['#markup' => '<h3 class="text-center">' . t('You going to unsubscribe from our E-Mails') . '</h3>'];
  $form['actions'] = [
    '#type' => 'container',
    '#attributes' => ['class' => ['text-center']]
  ];
  $form['actions']['unsubscribe'] = [
    '#type' => 'submit',
    '#value' => t('Unsubscribe'),
    '#attributes' => ['class' => ['btn-primary', 'btn-wide']]
  ];
  $form['actions']['setup'] = ['#markup' => '<div class="setup-link">' . l(t('Set up subscribes'), "/user/$uid/subscriptions") . '</div>'];

  return $form;
}

function mailer_unsubscribe_form_submit($form, &$form_state)
{
  mailer_unsubscribe_all($form_state['values']['uid']);

  $form_state['redirect'] = '<front>';
}

/**
 * Отписка пользователя от Email рассылок
 * @param $uid
 */
function mailer_unsubscribe_all($uid)
{
  if ($account = user_load($uid)) {
    if (!empty($account->mail)) {
      if ($flag = flag_get_flag('subscriptions')) {
        $flag->flag('unflag', SUBSCRIPTION_NOTIFY_EMAIL, $account);
        $flag->flag('unflag', SUBSCRIPTION_PROMO_EMAIL, $account);
      }
    }
  }
}


