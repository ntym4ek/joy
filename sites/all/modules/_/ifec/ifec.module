<?php

/**
 * @file
 * Drupal hooks.
 */

define('IFEC_MESSAGE_DEFAULT', -1);
define('IFEC_MESSAGE_LEAVE', 0);
define('IFEC_MESSAGE_ALTERNATE', 1);
define('IFEC_MESSAGE_REMOVE', 2);

/**
 * Implements hook_menu().
 */
function ifec_menu() {
  $items = array();

  $items['admin/config/user-interface/ifec'] = array(
    'title' => 'Inline Form Errors',
    'description' => 'Administer which forms to use with field messages.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ifec_settings_form'),
    'access arguments' => array('administer inline form errors'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'ifec.settings.inc',
  );
  $items['admin/config/user-interface/ifec/%ifec_form_id/delete'] = array(
    'title' => 'Delete form_id',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ifec_form_id_delete_form', 4),
    'access arguments' => array('administer inline form errors'),
    'type' => MENU_CALLBACK,
    'file' => 'ifec.settings.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function ifec_permission() {
  return array(
    'administer inline form errors' => array(
      'title' => t('administer inline form errors'),
      'description' => t('Administer global Inline Form Errors settings and individual form conversions'),
    ),
  );
}

/**
 * Implements hook_help().
 */
function ifec_help($path, $arg) {
  switch ($path) {
    case 'admin/help#ifec':
      $output = '<p>' . t('IFE or Inline Form Errors allows you to place form submission error inline with the form elements. Three options are provided for setting your inline error behavior. You can configure the default behavior or override the behavior on a per form basis. You can add as many forms as you like.') . '</p>';

      $output .= '<p>' . t('IFE provides three behaviors for the configured forms') . '</p>';

      $output .= '<ul>';
      $output .= '<li>' . t('<strong>Leave the messages in place</strong>, this option will copy the error messages and place them inline. The original error messages set by Drupal will remain in place') . '</li>';
      $output .= '<li>' . t("<strong>Show an alternate message</strong>, this option will replace the original messages with a generic error message such as 'Please correct all errors.'. This message can be set in the IFE configuration page. The original error messages are placed inline with the form elements") . '</li>';
      $output .= '<li>' . t('<strong>Remove all messages</strong>, this option will remove all error messages and place them inline with the form element') . '</li>';
      $output .= '</ul>';

      $output .= '<p>' . t('In all cases only the messages related to the form will be touched. All other messages will remain in tact.') . '</p>';

      return $output;

    case 'admin/config/user-interface/ifec':
      return '<p>' . t('This page provides the interface for adding new forms to use inline errors. Just add the form_id of the forms you wish to alter. An * can be used as a wildcard. The default settings can be overridden on a per form basis.') . '</p>';
  }
}

/**
 * Menu loader function to fetch a form id.
 */
function ifec_form_id_load($form_id, $reset = FALSE) {
  $form_ids = ifec_load_form_ids($reset);

  foreach ($form_ids as $form_id_pattern => $form_settings) {
    if (ifec_match_form_id($form_id, $form_id_pattern)) {
      return $form_settings;
    }
  }

  return FALSE;
}

/**
 * Check if a form ID pattern matches a given form ID.
 *
 * @param string $form_id
 *   The form ID to compare the pattern to.
 * @param string $form_id_pattern
 *   A form ID pattern. Ex. webform_*.
 *
 * @return bool
 *   TRUE if the pattern matches the form_id, FALSE otherwise.
 */
function ifec_match_form_id($form_id, $form_id_pattern) {
  // Convert form_id_pattern to a regular expression: replace /* with asterisks.
  $to_replace = array('/\\\\\*/');
  $replacements = array('.*');

  // Quote regular expression characters.
  $form_id_pattern_quoted = preg_quote($form_id_pattern, '/');

  // Create regular expression.
  $form_id_pattern_regex = '/^(' . preg_replace($to_replace, $replacements, $form_id_pattern_quoted) . ')$/';

  return (bool) preg_match($form_id_pattern_regex, $form_id);
}

/**
 * Implements hook_theme().
 */
function ifec_theme() {
  return array(
    'ifec_settings_form_ids' => array(
      'render element' => 'form',
      'file' => 'ifec.theme.inc',
    ),
  );
}

/**
 * Load all form ids from the data base.
 */
function ifec_load_form_ids($reset = FALSE) {
  ctools_include('export');
  static $form_ids;

  // Ensure that the schema cache is not stale when trying to load.
  $schema = drupal_get_schema('ifec');
  if (!isset($schema['export']) || $reset) {
    ctools_export_load_object_reset('ifec');
    drupal_get_schema('ifec', TRUE);
  }

  // Load form settings.
  if (!isset($form_ids) || $reset) {
    $form_ids = ctools_export_load_object('ifec');
  }

  return $form_ids;
}

/**
 * Helper function to determine the display settings of a form.
 */
function ifec_form_id_display($form_id) {
  if ($form_id->display == IFEC_MESSAGE_DEFAULT) {
    $display = variable_get('ifec_display', IFEC_MESSAGE_ALTERNATE);
  }
  else {
    $display = $form_id->display;
  }

  return $display;
}

//function ifec_module_implements_alter(&$implementations, $hook)
//{
//    // Name of the hook.
//    if ($hook != 'form_alter') {
//        return;
//    }
//    $module = 'ifec';
//    $group = $implementations[$module];
//    unset($implementations[$module]);
//    $implementations[$module] = $group;
//}

/**
 * Implements hook_form_alter().
 */
function ifec_form_alter(&$form, &$form_state, $form_id) {
  $status = variable_get('ifec_show_everywhere', 0);
  if ($status && !in_array($form_id, _ifec_blacklist())) {
    $ifec_options = new stdClass();
    $ifec_options->status = TRUE;
    $ifec_options->display = -1;
  }
  else {
    $ifec_options = ifec_form_id_load($form_id);
  }

  if ($ifec_options && $ifec_options->status) {
    $display = ifec_form_id_display($ifec_options);

    $form['#ifec_display'] = $display;
    // Commerce checkout.
    if (strpos($form_id, 'commerce_checkout_form') !== FALSE) {
      $form['buttons']['continue']['#validate'][] = 'ifec_form_validator';
    }
    else {
      $form['#validate'][] = 'ifec_form_validator';
    }
  }

  // Print form_ids.
  if (variable_get('ifec_show_form_ids', 0)) {
    $form['ifec_form_id'] = array(
      '#markup' => t('Form ID: @form_id', array('@form_id' => $form_id)),
      '#weight' => -1000,
      '#access' => user_access('administer inline form errors'),
    );
  }

  // восстановление ошибок для элементов ajax форм не проходящих валидацию
//  if (in_array($form_id, ['commerce_checkout_form_checkout'])) {
  if ($_GET['q'] == 'system/ajax') {
      ifec_form_errors_set($form, $form_state);
  }

}

/**
 * Return an array of core form ids that are not compatible with ife
 */
function _ifec_blacklist() {
  return array(
    'menu_overview_form',
    'block_admin_display_form',
    'book_admin_edit',
    'filter_admin_order',
    'profile_admin_overview',
    'taxonomy_overview_terms',
    'node_form', // attachment upload has tabledrag
  );
}

/**
 * Custom form validation handler.
 */
function ifec_form_validator(&$form, &$form_state) {
  static $global_error_processed = FALSE;

  // Commerce checkout.
  if (strpos($form['#form_id'], 'commerce_checkout_form') !== FALSE && isset($form_state['storage']['errors'])) {
    foreach ($form_state['storage']['errors'] as $name => $message) {
      form_set_error($name, $message);
    }
    unset($form_state['storage']['messages']);
  }
  $form_errors = form_get_errors();
  if (!empty($form_errors)) {
    ifec_element_errors_set($form, $form['#ifec_display']);

    if ($form['#ifec_display'] == IFEC_MESSAGE_ALTERNATE && !$global_error_processed) {
      $message = filter_xss_admin(variable_get('ifec_general_message', 'Please correct all highlighted errors and try again.'));
      drupal_set_message($message, 'error');

      $global_error_processed = TRUE;
    }
  }

  // This function returns TRUE, because is does not really validate anything
  // and to support commerce modules this function needs to have a return value.
  return TRUE;
}

/**
 * General function to check if a form element has an error.
 * This function will then set the error on the element to be later used
 * by our theming function theme_ifec_form_element().
 */
function ifec_element_errors_set(&$element, $display, $carry_down = FALSE) {
  if (!isset($_SESSION['messages']['error'])) {
    return;
  }

    // Recurse through all children.
    foreach (element_children($element) as $key) {
        if (isset($element[$key]) && $element[$key]) {
            ifec_element_errors_set($element[$key], $display, $carry_down);
        }
    }

  // Check for errors and settings.
  $errors = form_get_errors();

  $element_id = implode('][', $element['#parents']);
  if (!empty($errors[$element_id])) {
    $error_message = $errors[$element_id];

    // Get error id.
    $error_id = array_search($error_message, $_SESSION['messages']['error']);

    if ($error_id !== FALSE) {
      if (isset($display) && $display != IFEC_MESSAGE_LEAVE) {
        unset($_SESSION['messages']['error'][$error_id]);
        $_SESSION['messages']['error'] = array_values($_SESSION['messages']['error']);
      }

      if (count($_SESSION['messages']['error']) <= 0) {
        unset($_SESSION['messages']['error']);
      }

      // Add error message to the element.
        $element['#ifec_error'] = $error_message;
        $element['#description'] = '<span class="text-danger">' . $error_message . '</span>';

      // Found a matching error, no need to continue.
      return;
    }
  }

}

/**
 * Проверяем наличие ошибок в хранилище
 * и при ajax обновлении формы заново проставляем ошибки
 *
 * вызов функции пока прописывается в альтере ajax формы
 * @todo общий альтер форм в этом модуле
 */
function ifec_form_errors_set(&$form, &$form_state)
{
    form_clear_error();
    if (!empty($form_state['storage']['errors'])) {
        foreach ($form_state['storage']['errors'] as $key => $error_message) {
            $parents = explode('][', $key);
            $counter = 0;
            $element = &$form;
            $element_state = $form_state['input'];
            do {
                $child = $parents[$counter++];
                $element = &$element[$child];
                $element_state = $element_state[$child];
            } while (isset($parents[$counter]));

            if (empty($element_state)) {
                $element['#description'] = '<span class="text-danger">' . $error_message . '</span>';
                form_set_error($key, $error_message);
                $error_id = array_search($error_message, $_SESSION['messages']['error']);
                unset($_SESSION['messages']['error'][$error_id]);
            } else {
                unset($form_state['storage']['errors'][$key]);
            }
        }
    }

    if (isset($_SESSION['messages']['error']) && count($_SESSION['messages']['error']) <= 0) {
        unset($_SESSION['messages']['error']);
    }
}

/**
 * Implements hook_schema_alter().
 *
 * Makes the ife table usable by ctools' export.inc.
 */
function ifec_schema_alter(&$schema) {
  $schema['ifec']['export'] = array(
    'key' => 'form_id',
    'primary key' => 'form_id',
    'identifier' => 'ifec',
    'default hook' => 'ifec_default_settings',
    'can disable' => FALSE,
    'api' => array(
      'owner' => 'ifec',
      'api' => 'ifec',
      'minimum_version' => 1,
      'current_version' => 1,
    ),
  );
}


/**
 * Implements hook_preprocess_page
 */
function ifec_preprocess_page(&$vars)
{
    // добавляем скрипт
    drupal_add_js(drupal_get_path('module', 'ifec') . '/js/ifec.js', ['scope' => 'footer']);
}
