<?php

// вес в КГ до которого доставка может быть бесплатной
// при ноле ограничений нет
define('CHECKOUT_FREE_SHIPPING_MIN_WEIGHT_AMOUNT', variable_get('free_shipping_weight', 0));


/**
 * Implements hook_menu().
 */
function commerce_helper_menu()
{
    $items['admin/config/joy'] = array(
        'title' => 'Настройки сайта',
        'page callback' => 'system_admin_menu_block_page',
        'access arguments' => array('access administration pages'),
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system'),
    );
    $items['admin/config/joy/shop'] = array(
        'title' => 'Настройки магазина',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('commerce_helper_settings'),
        'access arguments' => array('access manager settings'),
        'file' => 'includes/commerce_helper.admin.inc',
    );
  $items['services/free-shipping-cost'] = array(
    'page callback' => 'commerce_helper_free_shipping_cost_ajax_callback',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

    return $items;
}

/**
 * Implements hook_menu_alter().
 */
function commerce_helper_menu_alter(&$items)
{
    // убрать из админки локальную задачу "Simulate checkout completion"
    unset($items['admin/commerce/orders/%commerce_order/edit/checkout']);

    // убрать настройки DaData для всех кроме админа
//    $items['admin/config/user-interface/dadata']['access callback'] = 'commerce_helper_user_has_role';
//    $items['admin/config/user-interface/dadata']['access arguments'] = array('administrator');
}

/**
 * hook_module_implements_alter
 * change hook execution order
 */
function commerce_helper_module_implements_alter(&$implementations, $hook)
{
    if (in_array($hook, ['form_alter'])) {
        // commerce_helper - last
        $module = 'commerce_helper';
        if (isset($implementations[$module])) {
            $group = $implementations[$module];
            unset($implementations[$module]);
            $implementations[$module] = $group;
        }
    }
}


/**
 * Preprocess function for theme_html()
 */
function commerce_helper_preprocess_html(&$vars)
{
    // страница печати счёта, добавить класс
    if (arg(0) == 'user' && arg(2) == 'orders' && arg(4) == 'print') {
        $vars['classes_array'][] = 'page-print';
    }
}

/**
 * Implements hook_preprocess_page
 */
function commerce_helper_preprocess_page(&$vars)
{
    // страницы обновляются по AJAX, но если пользователь перешёл на странице по кнопкам
    // Назад или Вперёд в браузере, то открывается кэшированная страница с данными до обновления по AJAX
    // запрещаем кэширование этих страниц
    if (arg(0) == 'cart' || arg(0) == 'checkout' && empty(arg(3))) {
        // устанавливаем заголовки
        drupal_add_http_header('Cache-Control', 'max-age=0, private, no-cache, no-store, must-revalidate, no-transform');
        drupal_add_http_header('Expires', gmdate("D, d M Y H:i:s \G\M\T", date(time()) - 86400));
    }

    // заменить шаблон страницы для печати user/%/orders/%/print
    if (arg(0) == 'user' && arg(2) == 'orders' && arg(4) == 'print') {
        $vars['theme_hook_suggestions'][] = 'page__print';
    }
}

/**
 * Implements hook_preprocess_page
 */
function commerce_helper_process_page(&$vars)
{
    // добавляем библиотеку ajax (добавление товаров в корзину)
    drupal_add_library('system', 'drupal.ajax');
}


/**
 * Implements hook_form_alter
 */
function commerce_helper_form_alter(&$form, &$form_state, $form_id)
{
  // --------------------------------- Изменение формы добавления в корзину
  // e.g form id: commerce_cart_add_to_cart_form_u6onPJSgS7pOgw0Tlo7zHy42LTQzbV913taANkYQKTo
    if (strpos($form_id, 'commerce_cart_add_to_cart_form') !== FALSE) {
        commerce_helper_form_commerce_add_to_cart_form_alter($form, $form_state);
    }

    // -------------------------------- В админке для менеджеров
    if ($form_id == 'commerce_order_ui_order_form') {
        // изменить набор статусов заказа
        $form['order_status']['status']['#options'] = array(
            'cart' => 'Корзина',
            'canceled' => 'Отменён',
            'paid' => 'Оплачен, ожидает обработки',
            'pending' => 'Ожидает обработки',
            'processing' => 'В обработке',
            'completed' => 'Отправлен',
        );

        if ($GLOBALS['user']->uid != 1) {
            // устаревшее поле, заменено полем field_parcel_number в профиле доставки
            $form['field_track_number']['#access'] = false;

//            $form['order_history']['#access'] = false;
//            $form['commerce_line_items']['und']['actions']['#access'] = false;
            $form['field_flags']['#access'] = false;
            if (isset($form['commerce_customer_shipping']['und']['profiles'][0])) {
                $form['commerce_customer_shipping']['und']['profiles'][0]['field_boxberry_target']['#access'] = FALSE;
                $form['commerce_customer_shipping']['und']['profiles'][0]['field_data']['#access'] = FALSE;
                $form['commerce_customer_shipping']['und']['profiles'][0]['field_area']['#access'] = FALSE;
                $form['commerce_customer_shipping']['und']['profiles'][0]['field_username']['#access'] = FALSE;
            }
        }

        // добавить возможность смены способа оплаты в админке
        $form['payment_method'] = [
            '#type' => 'select',
            '#title' => 'Способ оплаты',
            '#options' => [
                'ya_commerce_api|commerce_payment_ya_commerce_api' => 'Шлюз Яндекса',
                'commerce_rbspayment|commerce_payment_commerce_rbspayment' => 'Шлюз Сбербанка',
                'bank_transfer|commerce_payment_bank_transfer' => 'Банковский счёт',
                'pay_on_delivery|commerce_payment_pay_on_delivery' => 'Оплата при получении',
            ],
            '#default_value' => empty($form['#entity']->data['payment_method']) ? '' : $form['#entity']->data['payment_method'],
        ];

        // не менять метод оплаты, если оплачен
        if (!empty($form_state["commerce_order"])) {
          $balance = commerce_payment_order_balance($form_state["commerce_order"]);
          if (isset($balance['amount']) && $balance['amount'] === 0) {
            $form['payment_method']['#disabled'] = true;
          }
        }
        array_unshift($form['actions']['submit']['#submit'], 'commerce_helper_commerce_order_ui_order_form_submit');
    }
}

// submit callback
function commerce_helper_commerce_order_ui_order_form_submit(&$form, &$form_state)
{
    // If the user is editing an order, load a fresh copy to merge changes to.
    if ($form_state['commerce_order']->order_id) {
        $form_state['commerce_order'] = commerce_order_load($form_state['commerce_order']->order_id);
    }

    // Merge changes into the order object in the form state so it is accessible
    // by field handlers.
    $order = $form_state['commerce_order'];

    // изменим способ оплаты
    $order->data['payment_method'] = $form_state['values']['payment_method'];
    commerce_order_save($order);
}

function commerce_helper_form_commerce_add_to_cart_form_alter(&$form, &$form_state)
{
    // назначить постобработку для добавления класса активному элементу
    if (!empty($form['attributes'])) {
        foreach($form['attributes'] as $field_name => &$field) {
            if (strpos($field_name, '_attribute_') || $field_name == 'field_p_tare') {
                $field['#after_build'][] = 'commerce_helper_radios_alter';
            }
        }
    }

    // если товар в наличии
    if (empty($form_state['default_product']->field_p_out_of_stock['und'][0]['value'])) {
        // - AJAXификация кнопки --------------------------------------------------------
        // - проверка наличия товара в корзине и смена состояния и текста кнопки --------
        $product_id = isset($form['product_id']) ? $form['product_id']['#value'] : null;
        if (in_array($product_id, _get_order_product_ids($GLOBALS['user']->uid))) {
            $form['submit']['#prefix'] = '<div class="btn-group" role="group"><a class="btn btn-primary btn-empty" href="/cart">Перейти в корзину</a>';
            $form['submit']['#value'] = '+1';
            $form['submit']['#attributes']['class'][] = 'btn-primary';
            $form['submit']['#suffix'] = '</div>';
        } else {
            $form['submit']['#value'] = 'В корзину';
            $form['submit']['#attributes']['class'][] = 'btn-primary';
        }
        $form['submit']['#ajax'] = array('callback' => 'commerce_helper_add_to_cart_ajax_callback');
        $form['#submit'][] = 'commerce_helper_add_to_cart_form_submit';
    }
    // если товара нет
    else {
        $form['submit']['#value'] = 'Товар ожидается';
        $form['submit']['#disabled'] = true;
        $form['submit']['#attributes']['class'][] = 'btn-warning';
    }

    // настройка мультиопций
    if (!empty($form['line_item_fields'])) {
        $have_options = false;
        foreach ($form['line_item_fields'] as $field_name => &$field) {
            if (strpos($field_name, '_option_')) {
                // проверить в Варианте продукта наличие установленных для поля опций
                // если есть - вывести
                $options = [];
                if (isset($form_state['default_product']->{$field_name}['und']) && is_array($form_state['default_product']->{$field_name}['und'])) {
                    foreach ($form_state['default_product']->{$field_name}['und'] as $value) {
                        $options[$value['value']] = $field['und']['#options'][$value['value']];
                    }
                }

                if ($options) {
                    $have_options = true;
                    $field['und']['#type'] = 'radios';
                    $field['und']['#options'] = $options;
                    $field['und']['#after_build'][] = 'commerce_helper_radios_alter';
                    if (count($options) == 1) {
                        $field['und']['#default_value'] = key($options);
                    } else {
                        $field['und']['#default_value'] = '';
                        $form_state['input']['line_item_fields'][$field_name]['und'] = null;
                        $form_state['values']['line_item_fields'][$field_name]['und'][0]['value'] = null;
                    }
                }
                else {
                    $field['#access'] = FALSE;
                }
            }
        }
        if ($have_options) {
            // нужно проверить, что опции были заданы
            array_unshift($form['#validate'], 'commerce_helper_add_to_cart_form_validate');
        }
    }
}

function commerce_helper_add_to_cart_ajax_callback($form, $form_state)
{
    drupal_get_messages();
    $product_ids = commerce_cart_add_to_cart_form_product_ids($form_state['line_item']);
    $class = drupal_html_class(commerce_cart_add_to_cart_form_id($product_ids));
    return array(
        '#type' => 'ajax',
        '#commands' => array(
            ajax_command_replace('.'. $class, trim(render($form))),
            ajax_command_invoke('#cart', 'html', [trim(ext_order_cart_info_block())]),
        ),
    );
}

function commerce_helper_add_to_cart_form_validate($form, &$form_state)
{
    foreach ($form_state['values']['line_item_fields'] as $field_name => $field) {
        if (strpos($field_name, '_option_')
            && $form['line_item_fields'][$field_name]['#access']
            && empty($field['und'][0]['value'])) {
                form_set_error('line_item_fields][' . $field_name, 'Выберите ' . $form['line_item_fields'][$field_name]['und']['#title']);
        }
    }
}

function commerce_helper_add_to_cart_form_submit($form, &$form_state)
{
    $form_state['rebuild'] = TRUE;
}


/**
 * -------------------------------- Корзина (Cart) -------------------------------------------------------------------
 */
function commerce_helper_form_views_form_commerce_cart_form_default_alter(&$form, $form_state)
{
    if (arg(0) != 'admin') {

        if (!empty($form_state['order']) && $form['output']['#markup'] != '') {
            $form['#attributes']['class'][] = 'commerce-cart-form-checkout';

            foreach ($form['edit_delete'] as $key => &$item) {
                if (isset($item['#value'])) {
                    $item['#value'] = _bootstrap_icon('trash');
                }
            }

            // добавить свои действия на сабмит
            $form['actions']['checkout']['#submit'][] = 'commerce_helper_form_views_form_commerce_cart_form_submit';


          // авторизация или регистрация пользователя
          if (!$GLOBALS["user"]->uid) {
            $form['actions']['login'] = [
              '#type' => 'container',
              '#attributes' => ['class' => ['cs-login']],
            ];
            // сначала выводим форму ввода телефона
            if (empty($form_state['user_code'])) {
              $form['actions']['checkout']['#access'] = false;

              $form['actions']['login']['greet'] = [
                '#markup' => '<div class="greet">Не получилось Вас узнать, давайте авторизуемся для продолжения!</div>',
              ];
              $form['actions']['login']['phone'] = [
                '#type' => 'textfield',
                '#attributes' => ['class' => ['masked-phone'], 'placeholder' => ['Введите номер телефона']],
                '#default_value' => '',
              ];
              $form['actions']['login_send_sms'] = [
                '#type' => 'submit',
                '#name' => 'login_send_sms',
                '#value' => 'Получить СМС',
                '#validate' => ['commerce_helper_cart_login_send_sms_validate', 'ifec_form_validator'],
                '#submit' => ['commerce_helper_cart_login_send_sms_submit'],
                '#attributes' => ['class' => ['btn-info', 'btn-lg', 'btn-wide']],
              ];
            }
            // если телефон уже был введён, то форму ввода СМС сообщения
            else {
              $form['actions']['login']['greet'] = [
                '#markup' => '<div class="greet">Введите код из СМС и перейдём к оформлению!</div>',
              ];
              $form['actions']['login']['messages'] = array(
                '#type' => 'markup',
                '#markup' => theme('status_messages'),
              );
              $form['actions']['login']['code'] = [
                '#type' => 'textfield',
                '#attributes' => ['placeholder' => ['Четырёхзначный код']],
                '#default_value' => '',
              ];
//              $form['actions']['login']['login_check_sms'] = [
//                '#type' => 'submit',
//                '#name' => 'login_check_sms',
//                '#value' => 'К оформлению',
//                '#submit' => ['commerce_helper_cart_login_check_sms_submit'],
//                '#attributes' => ['class' => ['btn-brand', 'btn-lg', 'btn-wide']],
//              ];
              $form['actions']['login_repeat_sms'] = [
                '#type' => 'submit',
                '#name' => 'login_repeat_sms',
                '#value' => 'Повторно отправить СМС',
                '#validate' => ['commerce_helper_cart_login_repeat_sms_validate', 'ifec_form_validator'],
                '#limit_validation_errors' => [['code']],
                '#submit' => ['commerce_helper_cart_login_repeat_sms_submit'],
                '#attributes' => ['class' => ['btn-link', 'btn-wide']],
                '#weight' => 10,
              ];
              $form['actions']['login_change_phone'] = [
                '#type' => 'submit',
                '#name' => 'login_change_phone',
                '#value' => 'Изменить телефон',
                '#limit_validation_errors' => [],
                '#submit' => ['commerce_helper_cart_login_change_phone_submit'],
                '#attributes' => ['class' => ['btn-link', 'btn-wide']],
                '#weight' => 11,
              ];

              // проверка кода при нажатии на Перейти к оформлению
              $form['actions']['checkout']['#weight'] = 9;
              if (empty($form['actions']['checkout']['#validate'])) {
                $form['actions']['checkout']['#validate'] = [];
              }
              array_unshift($form['actions']['checkout']['#validate'], 'commerce_helper_cart_sms_validate');
              $form['actions']['checkout']['#validate'][] = 'ifec_form_validator';
              array_unshift($form['actions']['checkout']['#submit'], 'commerce_helper_cart_login_check_sms_submit');
              // текст при нажатии на кнопку
              $form['actions']['checkout']['#attributes']['data-processing-label'] = 'Проверяем код...';
            }

            // ссылка на вход по email
            $form['actions']['login_email'] = [
              '#type' => 'submit',
              '#name' => 'login_email',
              '#value' => 'Войти по e-mail',
              '#limit_validation_errors' => [],
              '#submit' => ['commerce_helper_cart_login_email_submit'],
              '#attributes' => ['class' => ['btn-link', 'btn-wide']],
              '#weight' => 12,
            ];
          } else {
            $form['actions']['checkout']['#attributes']['data-processing-label'] = 'Подождите...';
          }

          // order summary
          $form['actions']['#prefix'] = '<div class="ch-info-container">';
            $form['actions']['checkout']['#attributes']['class'][] = 'btn-primary btn-lg checkout-continue';
            $form['actions']['checkout']['#value'] = 'Перейти к оформлению';
            $form['actions']['#suffix'] = '</div>';

            $order_wrapper = entity_metadata_wrapper('commerce_order', $form_state['order']);

            $order_total = $order_wrapper->commerce_order_total->value();
            $products_base_amount = commerce_price_component_total($order_total, 'base_price')['amount'];
            $products_amount = commerce_line_items_total($order_wrapper->commerce_line_items, commerce_product_line_item_types())['amount'];
            $discount_amount = $products_amount - $products_base_amount;

            $products_qty = commerce_line_items_quantity($order_wrapper->commerce_line_items, commerce_product_line_item_types());

            // вес заказа
            $weight = commerce_physical_order_weight($form_state['order'], 'kg')['weight'];
            $weight_text = number_format($weight, 2) . ' кг';

            $header = '<h4>Предварительный итог</h4>';

            // доставка
            $delivery_text = 'платная';

            if ($reason_to_pay = ext_checkout_non_free_shipping($form_state['order'])) {
                if ($reason_to_pay['reason'] == 'cost') {
                    $free_shipping = 'Ещё немножко! До бесплатной доставки осталось заказать на ' . commerce_currency_format($reason_to_pay['cost'] * 100 - $products_base_amount, 'RUB');
                    // если есть ограничение по весу, указать
                    $free_shipping .= (CHECKOUT_FREE_SHIPPING_MIN_WEIGHT_AMOUNT ? '<br /><span class="notice">(для заказов весом менее ' . CHECKOUT_FREE_SHIPPING_MIN_WEIGHT_AMOUNT . ' кг)</span>' : '');
                } elseif ($reason_to_pay['reason'] == 'weight') {
                    $delivery_text .= '<br /><span class="notice">' . $reason_to_pay['text'] . '</span>';
                } elseif ($reason_to_pay['reason'] == 'region') {
                    $delivery_text .= '<br /><span class="notice">' . $reason_to_pay['text'] . '</span>';
                }
            } else {
                $free_shipping = 'Вы получили <span class="text-success">бесплатную доставку</span> для Вашего заказа!';
                $delivery_text = 'бесплатная';
            }
            $back_url = '/';

            if (isset($free_shipping) && variable_get('free_shipping_show_sum', 0)) {
                if (variable_get('free_shipping_show_sum') == 1 || (CHECKOUT_FREE_SHIPPING_MIN_ORDER_AMOUNT * 100 - variable_get('free_shipping_show_sum', 0)*100 <= $products_base_amount)) {
                    $header = '<div class="cs-free">' . $free_shipping . '<a href="' . $back_url . '" class="btn btn-default">Добавить товары</a></div>';
                }
            }


            $form['actions']['summary'] = [
                '#markup' =>
                    '<div class="cs-header">' . $header . '</div>' .
                    '<div class="checkout-summary">' .
                    '<div class="cs-quantity"><span class="label">' . 'Товары (' . $products_qty . ')</span><span class="value">' . commerce_currency_format($products_base_amount, 'RUB') . '</span></div>' .
                    ($discount_amount < 0 ? '<div class="cs-discount"><span class="label">Скидка</span><span class="value">' . commerce_currency_format($discount_amount, 'RUB') . '</span></div>' : '') .
                    '<div class="cs-weight"><span class="label">Вес</span><span class="value">' . $weight_text . '</span></div>' .
                    '<div class="cs-delivery"><span class="label">Доставка</span><span class="value">' . $delivery_text . '</span></div>' .
                    '<div class="cs-total"><span class="label">' . t('Total') . '</span><span class="value">' . commerce_currency_format($products_amount, 'RUB') . '</span></div>' .
                    '</div>',
                '#weight' => -1,
            ];

        } else {
            $form['output']['#markup'] = theme('commerce_cart_empty_page');
        }
    }

}

function commerce_helper_cart_login_send_sms_validate($form, &$form_state)
{
  if (!ext_user_valid_phone($form_state['values']['phone'])) {
    form_set_error('phone', 'Укажите корректный номер мобильного телефона');
    return false;
  }
}

function commerce_helper_cart_login_send_sms_submit($form, &$form_state)
{
  // послать СМС с кодом
  $code = rand(1001, 9998);
  $phone = $form_state['values']['phone'];
  if (mailer_send_sms('user_code', ['phone' => $phone, 'code' => $code])) {
    $form_state['user_code'] = [
      'phone' => $phone,
      'code' => $code,
      'sent_time' => time()
    ];
    $form_state['rebuild'] = TRUE;
  }
  else {
    form_set_error('', 'Сервис отправки SMS пока недоступен. Попробуйте позже или зарегистрируйтесь с помощью E-Mail.');
  }
}

function commerce_helper_cart_sms_validate($form, $form_state)
{
  // проверить совпадение СМС
  if (empty($form_state['values']['code']) || $form_state['values']['code'] != $form_state['user_code']['code']) {
    form_set_error('code', 'Неверный код');
    return false;
  }
}

/**
 * cart login submit callback
 */
function commerce_helper_cart_login_check_sms_submit($form, &$form_state)
{
  global $user;

  $phone = $form_state['user_code']['phone'];
  $account = ext_user_user_load_by_phone($phone);

  if (!$account->uid) {
    // зарегистрировать
    $pass = user_password(6);
    $arguments = array(
      'name' => $phone,
      'pass' => $pass,
      'mail' => 'not@required.more',
      'init' => $phone,
      'status' => 1,
      'roles' => array(DRUPAL_AUTHENTICATED_RID => TRUE),
    );
    $arguments['field_phone'][LANGUAGE_NONE][0]['value'] = $phone;

    // создание пользователя
    if ($account = user_save(NULL, $arguments)) {
      // аутентификация пользователя
      // отправить СМС с паролем
      mailer_send_sms('user_pass', ['phone' => $phone, 'pass' => $pass]);
    }
  }

  // авторизовать
  $user = user_load($account->uid);
  user_login_finalize();
}

/**
 * validate callback формы ввода кода
 */
function commerce_helper_cart_login_repeat_sms_validate(&$form, &$form_state)
{
  if (time() - $form_state['user_code']['sent_time'] < 60) {
    form_set_error('code', 'Новое смс можно будет отправить через ' . (60 - (time() - $form_state['user_code']['sent_time'])) . ' с');
    unset($form["actions"]["login"]["messages"]);
    return false;
  }
}

/**
 * cart repeat sms submit callback
 */
function commerce_helper_cart_login_repeat_sms_submit($form, &$form_state)
{
  // новый код
  $code = rand(1001, 9998);
  $phone = $form_state['user_code']['phone'];
  if (mailer_send_sms('user_code', ['phone' => $phone, 'code' => $code])) {
    $form_state['user_code'] = [
      'phone' => $phone,
      'code' => $code,
      'sent_time' => time(),
    ];
    drupal_set_message('Новое СМС с кодом отправлено.');
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * cart login submit callback
 */
function commerce_helper_cart_login_change_phone_submit($form, &$form_state)
{
  // сбросить сохранённый отправленный код и перезагрузить форму
  unset($form_state['user_code']);
  $form_state['rebuild'] = TRUE;
}

/**
 * cart login submit callback
 */
function commerce_helper_cart_login_email_submit($form, &$form_state)
{
  drupal_goto('user/login');
}

/**
 * Сабмит в корзине
 * form_views_form_commerce_cart_form callback
 * @param $form
 * @param $form_state
 */
function commerce_helper_form_views_form_commerce_cart_form_submit($form, &$form_state)
{
  // добавить проверку на наличие в корзине отсутствующих товаров
    $out_of_stock_found = false;
    $order = $form_state['order'];
    foreach ($form_state['line_items'] as $line_item) {
        $line_item_wr = entity_metadata_wrapper('commerce_line_item', $line_item);
        $product_node = ext_product_get_product_display_by_product_id($line_item_wr->commerce_product->product_id->value(), false);
        if (!$product_node->status || $line_item_wr->commerce_product->field_p_out_of_stock->value()) {
            $order = commerce_cart_order_product_line_item_delete($order, $line_item->line_item_id, TRUE);
            $out_of_stock_found = true;
        }
    }
    if ($out_of_stock_found)  {
        drupal_set_message('Товары, которых нет в наличии, были удалены из корзины', 'warning');
        commerce_order_save($order);
    }

    // отправка события Инициации оформления заказа
   //fbq('InitiateCheckout');
}


/**
 * альтер AJAX callback commerce_acf_ajax_update_cart_view
 * для обновления количества в блоке корзины
 */
function commerce_helper_commerce_acf_commands_alter(&$commands, $cart_view)
{
    $commands[] = ajax_command_invoke('#cart', 'html', [trim(ext_order_cart_info_block())]);
}

/**
 * Processing Radios Element using #after_build property.
 * Adding the 'active' class attribute for selected item in Product display
 */
function commerce_helper_radios_alter($element, $form_state)
{
    if (isset($element['#default_value'])) {
        $radios_value = $element['#default_value'];

        // в мультиопциях Radios имеет неограниченное количество значений,
        // поэтому #default_value является массивом, берем только первое значение
        if (is_array($radios_value)) $radios_value = array_shift($radios_value);

        if (isset($element[$radios_value])) {
            $element[$radios_value]['#wrapper_attributes']['class'][] = 'active';
        }
    }
    return $element;
}








    ///**
// * Returns the payment details element for display via AJAX.
// */
//function commerce_helper_commerce_payment_pane_checkout_form_refresh($form, $form_state) {
//    return $form['commerce_payment'];
//}

///**
// * Returns all checkout form via AJAX.
// * или редирект при сабмите
// */
//function commerce_helper_checkout_form_refresh($form, $form_state) {
//    if (empty($form_state['redirect'])) {
//        return $form;
//    } else {
//        ctools_include('ajax'); ctools_add_js('ajax-responder');
//        $commands[] = ctools_ajax_command_redirect($form_state['redirect']);
//        print ajax_render($commands);
//        exit;
//    }
//}

/**
 * --------------------------------- Автозаполнение полей title и alt изображений в продукции при сохранении ноды ------
 */
function commerce_helper_node_submit($node, $form, &$form_state)
{
    if ($node->type == 'product_display' || $node->type == 'product') {
        $site_name = 'ООО "СТРАДА"';
        $pd_wrapper = entity_metadata_wrapper('node', $node);
        foreach($pd_wrapper->field_product as $p_wrapper) {
            foreach($p_wrapper->field_p_image as $image) {
                $image->alt = $p_wrapper->title->value() . ' - ' . strip_tags($pd_wrapper->body->summary->value()) . ' - ' . $site_name;
                $image->title = $p_wrapper->title->value() . ' - ' . strip_tags($pd_wrapper->body->summary->value()) . ' - ' . $site_name;
            }
            $p_wrapper->save();
        }
    }
}



/**
 * --------------------------------- Изменение формы редактирования термина ----------------------------------------------
 * Implements hook_form_FORM_ID_alter()
 */
function commerce_helper_form_taxonomy_form_term_alter(&$form, &$form_state)
{
  // в словаре Категорий товаров добавить поле для добавления товаров в категорию
  if ($form_state['term']->vid == 2) {
    $form_state['products'] = _commerce_helper_get_products_by_category($form_state['term']->tid, true);
    $form['products'] = [
      '#type' => 'select',
      '#title' => 'Список товаров категории',
      '#options' => _commerce_helper_get_products_by_category(),
      '#default_value' => $form_state['products'],
      '#chosen' => true,
      '#multiple' => true,
    ];
    $form['#submit'][] = 'commerce_helper_taxonomy_form_term_submit';

    // убрать лишние поля
    $form['description']['#access'] = false;
    $form['relations']['#access'] = false;
  }

  // в словаре Каталога (связанного с главным меню) убрать лишние поля
  if ($form_state['term']->vid == 10 && $GLOBALS['user']->uid != 1) {
    $form['relations']['#access'] = false;
    $form['description']['#access'] = false;
    $form['path']['#access'] = false;
  }
}

/**
 * submit callback на сохранение термина словаря Категорий
 * добавить или удалить товары из Категории
 */
function commerce_helper_taxonomy_form_term_submit($form, $form_state)
{
  $tid = $form_state['term']->tid;

  // добавленные в Категорию товары
  $products_add = array_diff(array_values($form_state['values']['products']), $form_state['products']);
  foreach($products_add as $nid) {
    $product_wr = entity_metadata_wrapper('node', $nid);
    $product_wr->field_pd_category[] = $tid;
    $product_wr->save();
  }

  // удалённые из Категории товары
  $products_del = array_diff(array_values($form_state['products']), $form_state['values']['products']);
  foreach($products_del as $nid) {
    $terms = [];
    $product_wr = entity_metadata_wrapper('node', $nid);
    foreach($product_wr->field_pd_category->value() as $term) {
      if (is_object($term) && $tid != $term->tid) $terms[] = $term;
    }
    $product_wr->field_pd_category = $terms;
    $product_wr->save();
  }
}

// определить товары, входящие в Категорию
function _commerce_helper_get_products_by_category($tid = null, $id_only = false)
{
  $output = [];
  $query = db_select('node', 'n')->distinct();
  $query->condition('n.type', 'product');
  $query->fields('n', array('nid', 'title'));
  if ($tid) {
    $query->innerJoin('field_data_field_pd_category', 'fc', 'fc.entity_id = n.nid');
    $query->condition('fc.field_pd_category_tid', $tid);
  }
  if ($result = $query->execute()) {
    foreach($result->fetchAll() as $item) {
      if ($id_only) {
        $output[] = $item->nid;
      }
      else {
        $output[$item->nid] = $item->title;
      }
    }
  }
  return $output;
}



/**
 * ------------------------------------------ Действия (Actions) --------------------------------------------------
 */

/**
 * hook_menu_local_tasks_alter
 */
function commerce_helper_menu_local_tasks_alter(&$data, $router_item, $root_path)
{
    if (!isset($GLOBALS['user']->roles[3])) {
        switch ($root_path) {
            case 'admin/commerce/orders':
                if (!empty($data['actions']['output'][0]['#link']['path']) && $data['actions']['output'][0]['#link']['path'] == 'admin/commerce/orders/add') {
                    unset($data['actions']['output'][0]);
                }
                break;
            case 'admin/commerce/orders/%':
                // добавим печать заказа в меню Действий на странице просмотра заказа для Менеджера
                $order_id = $router_item['original_map'][3];
                $item = menu_get_item('user/' . $GLOBALS['user']->uid . '/orders/' . $order_id . '/print');
                if ($item['access']) {
                    $data['actions']['output'][] = [
                        '#theme' => 'menu_local_action',
                        '#link' => $item
                    ];
                }
                break;
              // убираем. пока 2 способа онлайн оплаты, придётся делать доп страницу с выбором метода
//            case 'user/%/orders/%':
//                $order_id = $router_item['original_map'][3];
//                if (is_numeric($order_id) && !ext_payment_ya_commerce_api_check_order_paid($order_id)) {
//                    $item = menu_get_item('checkout/%/pay');
//                    if ($item['access']) {
//                        $data['actions']['output'][] = [
//                            '#theme' => 'menu_local_action',
//                            '#link' => $item
//                        ];
//                    }
//                }
//                break;
            case 'user/%':
//                $item = menu_get_item('user/' . $GLOBALS['user']->uid . '/edit');
//                if ($item['access']) {
//                    $data['actions']['output'][] = [
//                        '#theme' => 'menu_local_action',
//                        '#link' => $item
//                    ];
//                }
                break;
        }


        // убрать некоторые закладки
        if (!empty($data['tabs'])) {
            foreach ($data['tabs'][0]['output'] as $key => $value) {
                if ($value['#link']['path'] == "user/%/view") {
                    $data['tabs'][0]['output'][$key]['#link']['title'] = t('Summary', [], ['context' => 'account']);
                }
                if ($value['#link']['path'] == "user/%/edit") {
                    // редактирование аккаунта перенесено в Local Actions
                    unset($data['tabs'][0]['output'][$key]);
                }
            }
        }
    }
}



/**
 * ------------------------------------------ Убрать пустые копейки из цен ---------------------------------------------
 * http://xandeadx.ru/blog/drupal/736
 */
/**
 * Implements hook_commerce_currency_info_alter().
 */
function commerce_helper_commerce_currency_info_alter(&$currencies, $langcode) {
    // Удаляем копейки из вывода
    $currencies['RUB']['format_callback'] = 'commerce_helper_commerce_currency_format';
}

/**
 * Currency format callback.
 */
function commerce_helper_commerce_currency_format($amount, $currency, $object)
{
    // нужны ли копейки
    $decimals = $currency['decimals'];
    if ($amount == round($amount)) $decimals = 0;

    // Format the price as a number.
    $price = number_format(commerce_currency_round(abs($amount), $currency), $decimals, $currency['decimal_separator'], $currency['thousands_separator']);

    // Establish the replacement values to format this price for its currency.
    $replacements = array(
        '@code_before' => $currency['code_placement'] == 'before' ? $currency['code'] : '',
        '@symbol_before' => $currency['symbol_placement'] == 'before' ? $currency['symbol'] : '',
        '@price' => $price,
        '@symbol_after' => $currency['symbol_placement'] == 'after' ? $currency['symbol'] : '',
        '@code_after' => $currency['code_placement'] == 'after' ? $currency['code'] : '',
        '@negative' => $amount < 0 ? '-' : '',
        '@symbol_spacer' => $currency['symbol_spacer'],
        '@code_spacer' => $currency['code_spacer'],
    );

    return trim(t('@code_before@code_spacer@negative@symbol_before@price@symbol_spacer@symbol_after@code_spacer@code_after', $replacements));
}


/**
 * ------------------------------------------ Представления (Views) --------------------------------------------------
 */

/**
 * Implements hook_views_api().
 */
function commerce_helper_views_api() {
    return array(
        'api' => 3,
        'path' => drupal_get_path('module', 'commerce_helper') . '/includes/views',
    );
}

/**
 * Implements hook_views_data_alter().
 */
function commerce_helper_views_data_alter(&$data)
{
    $data['commerce_order']['cancel_order'] = array(
        'field' => array(
            'title' => t('Cancel order link'),
            'help' => t('Provide a link to change status of the order from Processing to canceled.'),
            'handler' => 'commerce_helper_commerce_order_handler_field_order_link_cancel',
        ),
    );
}




/**
 * ------------------------------------------ Вспомогательные функции --------------------------------------------------
 */

/**
 * Возвращает размер скидки (без учёта скидки по купонам)
 * @param $order
 *
 * @return array
 */
function commerce_helper_commerce_price_component_total_discounts($order)
{
    $order_wr = entity_metadata_wrapper('commerce_order', $order);
    $order_total = $order_wr->commerce_order_total->value();

    // Initialize the total price array.
    $total = array(
        'amount' => 0,
        'currency_code' => $order_total['currency_code'],
        'data' => array(),
    );

    // Bail out if there are no components.
    if (empty($order_total['data']['components'])) {
        return $total;
    }

    // получить список купонов, скидки по которым не будем учитывать
    $exclude_arr = ['userpoints'];
    if ($order_wr->commerce_coupons->value()) {
        foreach ($order_wr->commerce_coupons as $coupon_wr) {
            $exclude_arr[] = current($coupon_wr->commerce_discount_reference->value())->name;
        }
    }

    // Loop over each component.
    foreach ($order_total['data']['components'] as $key => $component) {
        // не учитывать скидки по купонам
        foreach($exclude_arr as $coupon_name) {
            if (strpos($component['name'], $coupon_name) !== false) continue 2;
        }
        // If we're totalling all components or this one matches the requested type...
        if ($component['price']['amount'] < 0) {
            $total['amount'] += commerce_currency_convert(
                $component['price']['amount'],
                $component['price']['currency_code'],
                $total['currency_code']
            );
        }
    }

    return $total;
}

/**
 * Возвращает размер скидки  по купонам
 * @param $order
 *
 * @return array
 */
function commerce_helper_commerce_price_component_total_coupons($order)
{
    $order_wr = entity_metadata_wrapper('commerce_order', $order);
    $order_total = $order_wr->commerce_order_total->value();

    // Initialize the total price array.
    $total = array(
        'amount' => 0,
        'currency_code' => $order_total['currency_code'],
        'data' => array(),
    );

    // Bail out if there are no components.
    if (empty($order_total['data']['components'])) {
        return $total;
    }

    // получить список купонов, скидки по которым не будем учитывать
    $coupons_arr = [];
    if ($order_wr->commerce_coupons->value()) {
        foreach ($order_wr->commerce_coupons as $coupon_wr) {
            $coupons_arr[] = current($coupon_wr->commerce_discount_reference->value())->name;
        }
    }

    // Loop over each component.
    foreach ($order_total['data']['components'] as $key => $component) {
        // учитывать только скидки по купонам
        foreach($coupons_arr as $coupon_name) {
            if (strpos($component['name'], $coupon_name) !== false) {
                if ($component['price']['amount'] < 0) {
                    $total['amount'] += commerce_currency_convert(
                        $component['price']['amount'],
                        $component['price']['currency_code'],
                        $total['currency_code']
                    );
                }
            }
        }
    }

    return $total;
}

/**
 * перевод компонент цены в заказе
 */
function commerce_helper_commerce_price_formatted_components_alter(&$components, $price, $entity)
{
    foreach($components as $key => &$component) {
        if ($component['title'] == 'Discount') $component['title'] = t('Discount');
    }
    $components['commerce_price_formatted_amount']['title'] = check_plain(t('Order total'));
}

/**
 * возвращает текст о бесплатной доставке в зависимости от населенного пункта
 */
function commerce_helper_free_shipping_cost_ajax_callback()
{
  $output = '';
  $kladr = $_POST["kladr"];
  $cost = ext_checkout_get_free_shipping_amount($kladr);
  if ($cost === 0) {
    $output = 'Бесплатная доставка';
  }
  elseif ($cost > 0) {
    $output = 'Бесплатная доставка от ' . format_plural((int)$cost, '@count rouble', '@count roubles');
  }
  print json_encode(['cost' => $output]);
}



/**
 * Возвращает список product id помещенных в корзину пользователя
 * @param $uid
 * @return array|mixed
 */
function _get_order_product_ids($uid)
{
    $pids = &drupal_static(__FUNCTION__);

    // заполнить массив id товаров в корзине
    if (!$pids) {
        $pids = array();

        if ($order = commerce_cart_order_load($GLOBALS['user']->uid)) {
            $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
            foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
                if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
                    $pids[] = $line_item_wrapper->commerce_product->product_id->value();
                }
            }
        }
    }
    return $pids;
}




