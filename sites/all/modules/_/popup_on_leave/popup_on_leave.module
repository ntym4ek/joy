<?php
/**
 * @file
 * Main module file.
 */

define('POPUP_ON_LEAVE_VISIBILITY_NOTLISTED', 0);
define('POPUP_ON_LEAVE_VISIBILITY_LISTED', 1);
define('POPUP_ON_LEAVE_VISIBILITY_PHP', 2);



/**
 * Implements hook_menu().
 */
function popup_on_leave_menu()
{
    $items = array();

    // Settings form.
    $items['admin/config/administration/popup_on_leave'] = array(
        'title' => t('Popup On Leave'),
        'description' => 'Натройки модуля',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('popup_on_leave_settings'),
        'file' => 'popup_on_leave.admin.inc',
        'access callback' => true,
//        'access arguments' => array('popup on leave administration'),
    );

    // получение сообщения и отправка письма
    $items['services/popup-on-leave'] = array(
        'page callback' => 'popup_on_leave_send_email_callback',
        'access callback' => true,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

/**
 * Implements hook_init().
 */
function popup_on_leave_init()
{
    // Get status: enabled/disabled.
    $status = variable_get('popup_on_leave_enable', 1);
    // Get popup message visibility settings.
    $visibility = variable_get('popup_on_leave_visibility', POPUP_ON_LEAVE_VISIBILITY_NOTLISTED);
    // Get popup message visibility pages settings.
    $visibility_pages = variable_get('popup_on_leave_visibility_pages', '');
    // Predefine value.
    $page_match = TRUE;

    // Limited visibility popup message must list at least one page.
    if ($visibility == POPUP_ON_LEAVE_VISIBILITY_LISTED && empty($visibility_pages)) {
        $status = FALSE;
    }

    // Match path if necessary.
    if ($visibility_pages && $status) {
        // Convert path to lowercase. This allows comparison of the same path
        // with different case. Ex: /Page, /page, /PAGE.
        $pages = drupal_strtolower($visibility_pages);
        if ($visibility < POPUP_ON_LEAVE_VISIBILITY_PHP) {
            // Convert the Drupal path to lowercase.
            $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
            // Compare the lowercase internal and lowercase path alias (if any).
            $page_match = drupal_match_path($path, $pages);
            if ($path != $_GET['q']) {
                $page_match = $page_match || drupal_match_path($_GET['q'], $pages);
            }
            // When $visibility has a value of 0 (POPUP_ON_LEAVE_VISIBILITY_NOTLISTED),
            // the popup message is displayed on all pages except those listed in
            // $visibility_pages.
            // When set to 1 (POPUP_ON_LEAVE_VISIBILITY_LISTED), it is displayed only
            // on those
            // pages listed in $visibility_pages.
            $page_match = !($visibility xor $page_match);
        }
        elseif (module_exists('php')) {
            $page_match = php_eval($visibility_pages);
        }
        else {
            $page_match = FALSE;
        }
    }

    if ($status && $page_match) {
        $popup_on_leave_parameters = array(
            'base_url' => $GLOBALS['base_url'],
            'uid' => $GLOBALS['user']->uid,
            'check_cookie' => variable_get('popup_on_leave_check_cookie', 1),
            'width' => variable_get('popup_on_leave_width', 300),
            'height' => variable_get('popup_on_leave_height', 300),
            'delay' => variable_get('popup_on_leave_delay', 0),
        );
        popup_on_leave_show_message($popup_on_leave_parameters);
    }
}

/**
 * Show popup message.
 *
 * @param array $popup_on_leave_parameters
 *   Array of parameters:
 *   - title: message title
 *   - body: message body
 *   - check_cookie: set FALSE if you dont want to check cookie.
 *   - width: window width
 *   - height: window height
 */
function popup_on_leave_show_message($popup_on_leave_parameters)
{
    drupal_add_js(array(
        'popup_on_leave' => $popup_on_leave_parameters,
    ), 'setting');
    drupal_add_js('misc/jquery.cookie.js');
    drupal_add_js(drupal_get_path('module', 'popup_on_leave') . '/js/popup_on_leave.js');
    drupal_add_css(drupal_get_path('module', 'popup_on_leave') . '/css/popup_on_leave.css');
}

function popup_on_leave_send_email_callback()
{
    // подготовить данные
    $params['data'] = [
        'text' => empty($_POST['data']['text']) ? '' : $_POST['data']['text'],
        'name' => empty($_POST['data']['name']) ? '' : $_POST['data']['name'],
        'checkbox' => empty($_POST['data']['email']) ? '' : $_POST['data']['email'],
        'email' => empty($_POST['data']['email']) ? '' : $_POST['data']['email'],
    ];
    $mail = variable_get('support_email', 'mega_comp@mail.ru');

    // отправить письмо
    drupal_mail('mailing', 'leave_feedback', $mail, 'ru', $params);
}