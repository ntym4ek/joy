<?php

/**
 * Implements hook_menu().
 */
function ext_order_menu()
{
  $items['user/%/orders/%/print'] = [
//  $items['admin/commerce/orders/64808/print'] = [
    'title' => 'Распечатать заказ',
    'page callback' => 'ext_order_print_order_info',
    'page arguments' => [3],
    'access arguments' => ['edit own commerce_order entities'],
    'type' => MENU_LOCAL_ACTION,
  ];
  $items['user/%/orders/%/to-cart'] = [
    'title' => 'Положить всё в корзину',
    'page callback' => 'ext_order_add_order_to_cart',
    'page arguments' => [3],
    'access arguments' => ['edit own commerce_order entities'],
    'type' => MENU_LOCAL_ACTION,
  ];
  $items['user/%/orders/%commerce_order/cancel'] = [
    'title' => 'Отменить заказ',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ext_order_commerce_order_order_cancel_form', 3],
    'access callback' => 'commerce_order_access',
    'access arguments' => ['update', 3],
    'type' => MENU_LOCAL_ACTION,
  ];

  return $items;
}

/**
 * Implements hook_theme().
 */
function ext_order_theme()
{
  return array(
    // шаблон для печати содержимого заказа
    'order_print_form' => array(
      'variables' => array('order_id' => NULL),
      'template' => 'order-print-form',
    ),
  );
}

/**
 * Implements hook_cron().
 */
function ext_order_cron()
{
  // Удаление устаревших корзин анонимов
  // http://xandeadx.ru/blog/drupal/907
  if (module_exists('commerce_order')) {
    $order_ids = db_select('commerce_order', 'o')
      ->fields('o', array('order_id'))
      ->condition('o.uid', 0)
      ->condition('o.status', array('cart', 'checkout_checkout'))
      ->condition('o.changed', REQUEST_TIME - max(ini_get('session.gc_maxlifetime'), 15592000), '<') // месяц
      ->range(0, 100)
      ->execute()
      ->fetchCol();

    if ($order_ids) {
      commerce_order_delete_multiple($order_ids);
      watchdog('commerce_cart', 'Удалено ' . count($order_ids) . ' анонимных корзин', NULL);
    }
  }
}

/**
 * проверка параметров Вес и Размеры
 */
function ext_order_check_product_parameters($order)
{
  $result = [];
  $order_wr = entity_metadata_wrapper('commerce_order', $order);
  foreach ($order_wr->commerce_line_items->getIterator() as $delta => $line_item_wr) {
    if (in_array($line_item_wr->getBundle(), commerce_product_line_item_types())) {
      $weight = commerce_physical_product_line_item_weight($line_item_wr->value());
      if (empty($weight['weight'])) {
        $result['errors']['weight'] = 'Не задан вес товара';
      } else {
        $weight = physical_weight_convert($weight, 'kg');
      }
      $result['products'][$line_item_wr->commerce_product->product_id->value()]['weight'] = $weight;

      if ($dimensions = commerce_physical_product_line_item_dimensions($line_item_wr->value())) {
        $dimensions_item = array_shift($dimensions);
        if (empty($dimensions_item['length']) || $dimensions_item['length'] == 0 || $dimensions_item['height'] == 0 || $dimensions_item['width'] == 0) {
          $result['errors']['dimentions'] = 'Не заданы размеры';
        } else {
          $dimensions_item = physical_dimensions_convert($dimensions_item, 'cm');
        }
        $result['products'][$line_item_wr->commerce_product->product_id->value()]['dimentions'] = $dimensions_item;
      }
    }
  }
  $result['weight'] = physical_weight_convert(commerce_physical_order_weight($order), 'kg');

  return $result;
}

/**
 * Implements hook_helper_commerce_order_presave
 */
function ext_order_commerce_order_presave($order)
{

  if (empty($order->original)) return;
  $order_wr = entity_metadata_wrapper('commerce_order', $order);

  // перенести из Rules отправку писем на оформление заказа и смену статуса
  // варианты писем
  // 1. оформление заказа Анонимом
  // 2. оформление заказа Зарегистрированным
  // 3. смена статуса заказа
  //      - простое информирование о смене статуса
  //      - информация об отправке

  // определить событие
  $event = '';
  $params = [];
  $mail_to_manager = false;
  if (strpos($order->original->status, 'checkout_') === 0 && $order->status == 'pending') {
    $event = 'order_creation';
    $mail_to_manager = true;
  }
  if ($order->original->status != 'paid' && $order->status == 'paid') {
    $event = 'order_paid';
    $mail_to_manager = true;
  }
  if ($order->original->status != 'completed' && $order->status == 'completed') {

    if ($order_wr->commerce_line_items->count()) {
      $td = 'border-bottom: 1px solid #ccc; border-right: 1px solid #ccc; padding: 4px 8px;';

      $table = array(
        'header' => array(
          array('data' => 'Наименование', 'style' => $td . 'min-width: 350px; text-align:center;'),
          array('data' => 'Упак.',        'style' => $td . 'width: 70px; text-align:center;'),
          array('data' => 'Цена',         'style' => $td . 'width: 100px; text-align:center;'),
          array('data' => 'Кол-во',       'style' => $td . 'width: 60px; text-align:center;'),
          array('data' => 'Сумма',        'style' => $td . 'width: 150px; text-align:center;'),
        ),
      );
      foreach ($order_wr->commerce_line_items as $item_wr) {
        if (in_array($item_wr->type->value(),commerce_product_line_item_types())) {
          $tare = $item_wr->commerce_product->field_p_tare->value() ? $item_wr->commerce_product->field_p_tare->name->value() : '';
          $table['rows'][] = array(
            array('data' => $item_wr->commerce_product->title->value(), 'style' => $td),
            array('data' => $tare, 'style' => $td . ' text-align: center;'),
            array('data' => commerce_currency_format($item_wr->commerce_unit_price->amount->value(), 'RUB', NULL, true), 'style' => $td . ' text-align: right;'),
            array('data' => (int)$item_wr->quantity->value(), 'style' => $td . ' text-align: center;'),
            array('data' => commerce_currency_format($item_wr->commerce_total->amount->value(), 'RUB', NULL, true), 'style' => $td . ' text-align: right;'),
          );
        } elseif ($item_wr->type->value() == 'shipping') {
          $table['rows'][] = array(
            array('data' => $item_wr->line_item_label->value(), 'colspan' => 4, 'style' => $td . ' text-align: right;'),
            array('data' => commerce_currency_format($item_wr->commerce_total->amount->value(), 'RUB', NULL, true) , 'style' => $td . ' text-align: right;'),
          );
        }
      }
      // добавить в таблицу вес, объём, сумму
      $weight = commerce_physical_order_weight($order, 'kg');

      $table['rows'][] = array(
        array('data' => t('Weight') . ': ' . $weight['weight'] . ' ' . t($weight['unit']), 'colspan' => 4, 'style' => $td),
        array('data' => commerce_currency_format($order_wr->commerce_order_total->amount->value(), 'RUB', NULL, true) , 'style' => $td . ' text-align: right;'),
      );
      $params['table'] = $table;
    }

    $event = 'order_sent';
  }
  if ($order->original->status == 'pending' && $order->status == 'processing') {
    $event = 'order_changed';
  }

  if ($event) {
    $account = user_load($order->uid);
    $params['account'] = $account;
    $params['order_info'] = ext_order_get_order_info($order);

    // письмо Пользователю
    if (!empty($order->mail)) {
      drupal_mail('mailer', $event, $order->mail, user_preferred_language($account), $params);
    }

    // смс пользователю
    // если есть, то на тлф из заказа, иначе с ЛК
    if ($order_wr->field_phone->value()) {
      $params['phone'] = $order_wr->field_phone->value();
    }
    mailer_send_sms($event, $params);

    // письмо Менеджеру
    if ($mail_to_manager) {
      $params['mail_to_manager'] = $mail_to_manager;
      $manager_mail = variable_get('support_email', 'help@joy-magazin.ru');
      drupal_mail('mailer', $event, $manager_mail, user_preferred_language($account), $params);

      // письмо Смирнову
      if ($event == 'order_creation' && $order->mail != 'support@kccc.ru' && $manager_mail != 'mega_comp@mail.ru') {
        drupal_mail('mailer', $event, 'ed_smr@kccc.ru', user_preferred_language($account), $params);
      }
    }

  }
}

/**
 * извлечь и оформить полную информацию о заказе
 *
 * @param $order
 *
 * @return array
 */
function ext_order_get_order_info($order, $including_line_items = false)
{
  $order_wr = entity_metadata_wrapper('commerce_order', $order);

  // товары
  $product_count = 0;

  // доставка
  $line_items = [];
  $shipping = [];
  $shipping_profile = $order_wr->commerce_customer_shipping->value();
  if (!empty($shipping_profile)) {
    $shipping_profile_wr = $order_wr->commerce_customer_shipping;
    foreach ($order_wr->commerce_line_items as $item_wr) {
      if ($item_wr->value()) {
        if ($item_wr->type->value() == 'shipping') {
          $shipping_method = $item_wr->commerce_shipping_service->value();

          // если есть данные, помимо стандартных
          $function = $shipping_method . '_info';
          if (function_exists($function)) {
            $shipping = $function($item_wr->value(), $shipping_profile_wr->value());
          }
          if (!$shipping) {
            $shipping = [
              'title' => t($item_wr->line_item_label->value()),
              'method' => $item_wr->commerce_shipping_service->value(),
            ];
          }

          $shipping['cost'] = commerce_currency_format($item_wr->commerce_total->amount->value() / 100, $item_wr->commerce_total->currency_code->value(), NULL, FALSE);
        }
        elseif (in_array($item_wr->type->value(), commerce_product_line_item_types())) {
          $product_count++;
          if ($including_line_items) {
            $line_items[] = ext_order_get_line_item_info($item_wr->value());
          }
        }
      }
    }
    if (empty($shipping['address'])) {
      $shipping['address'] = ($shipping_profile_wr->field_zipcode->value() ? $shipping_profile_wr->field_zipcode->value() . ', ': '')
        . ($shipping_profile_wr->field_city->value() ? $shipping_profile_wr->field_city->value() : '')
        . ($shipping_profile_wr->field_addr->value() ? ', ' . $shipping_profile_wr->field_addr->value() : '')
        . ($shipping_profile_wr->field_office->value() ? ' - ' . $shipping_profile_wr->field_office->value() : '');
    }
    $shipping['callme'] = $shipping_profile_wr->field_callme->value();
    $shipping['passport'] = $shipping_profile_wr->field_passport->value();
    $shipping['parcel_number'] = '';
    if (!empty($shipping_profile_wr->value()->field_parcel_number['und']))
      $shipping['parcel_number'] = $shipping_profile_wr->field_parcel_number->value();
    if (!empty($shipping_profile_wr->value()->field_parcel_photo['und']))
      $shipping['parcel_photo_url'] = file_create_url($shipping_profile_wr->field_parcel_photo->file->value()->uri);
  }

  $product_count_text = format_plural($product_count, '@count item', '@count items', [], ['context' => 'product count on a Commerce order']);

  //оплата
  $balance = $order_wr->commerce_order_total->amount->value();
  $payment_title = $payment_method = $payment_addon = '';
  $payment_before_shipping = $is_online = FALSE;
  if (!empty($order_wr->value()->data['payment_method'])) {
    $payment_method = $order_wr->value()->data['payment_method'];
    switch ($payment_method) {
      case 'commerce_rbspayment|commerce_payment_commerce_rbspayment':
        $payment_title = 'Онлайн, через сервис Сбербанка';
        $payment_before_shipping = TRUE;
        $is_online = true;
        break;

      case 'ya_commerce_api|commerce_payment_ya_commerce_api':
        $payment_title = 'Онлайн, через сервис Яндекс.Касса';
        $payment_before_shipping = TRUE;
        $is_online = true;
        ext_payment_ya_commerce_api_check_order_paid($order_wr->value());
        break;

      case 'pay_on_delivery|commerce_payment_pay_on_delivery':
        $payment_title = 'Оплата при получении';
        break;

      case 'bank_transfer|commerce_payment_bank_transfer':
        $payment_title = 'Банковским переводом';
        $payment_before_shipping = TRUE;
        $payment_addon = '<p>Счёт на оплату можно распечатать по <a href="/checkout/' . $order_wr->order_id->value() . '/complete/invoice" target="_blank">ссылке</a>.</p>';
        break;
    }

    // проверка оплаты
    if ($balance = commerce_payment_order_balance($order_wr->value())) {
      $balance = $balance['amount'];
    }
  }

  // купоны
  $coupons = [];
  foreach ($order_wr->commerce_coupons->getIterator() as $coupon_wr) {
    //      $coupon = $coupon_wr->value();
    $coupons[] = [
      'type' => $coupon_wr->type->value(),
      'code' => $coupon_wr->code->value(),
    ];
  }

  // инфо о пользователе
  $user_phone = empty($order_wr->field_phone->value()) ? '' : $order_wr->field_phone->value();
  $user_name = empty($order_wr->field_username->value()) ? '' : $order_wr->field_username->value();

  // компоненты итоговой цены (скидки и прочее)
  $components = [];
  $component_titles = commerce_price_component_titles();
  foreach($order_wr->commerce_order_total->data->value()['components'] as $component) {
    if ($component['included']) {
      $title = isset($component_titles[$component['name']]) ? $component_titles[$component['name']] : '';
      if (!$title && !empty($component['price']['data']['discount_component_title'])) {
        $title = $component['price']['data']['discount_component_title'];
      }

      $components[$component['name']] = [
        'title' => $title,
        'amount' => $component['price']['amount'],
      ];
    }
  }

  return [
    'id' => $order_wr->order_id->value(),
    'number' => $order_wr->order_number->value(),
    'url' => $GLOBALS['base_root'] . '/user/' . $order_wr->uid->value() . '/orders/' . $order_wr->order_id->value(),
    'placed' => $order_wr->placed->value(),
    'status' => $order_wr->status->value(),
    'user' => [
      'uid' => $order_wr->uid->value(),
      'mail' => $order_wr->mail->value(),
      'name' => $user_name,
      'phone' => $user_phone,
    ],
    'products' => [
      'qty' => $product_count,
      'qty_txt' => $product_count_text,
      'items' => $line_items,
    ],
    'coupons' => $coupons,
    'shipping' => $shipping,
    'payment' => [
      'title' => $payment_title,
      'method' => $payment_method,
      'before_shipping' => $payment_before_shipping,
      'is_online' => $is_online,
      'balance' => $balance, // неоплаченный остаток (или вся сумма)
      'balance_formatted' => commerce_currency_format($balance, 'RUB'),
      'paid_formatted' => commerce_currency_format($order_wr->commerce_order_total->amount->value() - $balance, 'RUB'),
      'addon' => $payment_addon,
    ],
    'weight' => commerce_physical_order_weight($order, 'kg'),
    'amount' => $order_wr->commerce_order_total->amount->value(),
    'total_formatted' => commerce_currency_format($order_wr->commerce_order_total->amount->value(), 'RUB'),
    'order' => $order_wr->value(),
    'total' => [
      'components' => $components,
      'amount' => $order_wr->commerce_order_total->amount->value(),
      'formatted' => commerce_currency_format($order_wr->commerce_order_total->amount->value(), 'RUB'),
    ],
  ];
}




/**
 * -------------------- Удаление заказа ----------------------------------------
 */
/**
 * Form callback: confirmation form for deleting an order.
 *
 * @see confirm_form()
 */
function ext_order_commerce_order_order_cancel_form($form, &$form_state, $order)
{
  if ($order) {
    $form_state['order'] = $order;

    $form['reason'] = [
      '#type' => 'select',
      '#title' => 'Причина отмены',
      '#options' => array_merge(['- Выберите вариант -'], _commerce_helper_order_cancel_statuses()),
      '#weight' => 1,
    ];
    $form['#validate'][] = 'ext_order_commerce_order_order_cancel_form_validate';
    $form['#submit'][] = 'ext_order_commerce_order_order_cancel_form_submit';

    $form = confirm_form($form,
      t('Are you sure you want to cancel order @number?', ['@number' => $order->order_number]),
      '',
      '<p>' . t('Cancelling this order cannot be undone.') . '</p>',
      t('Cancel order'),
      t('Back'),
      'confirm'
    );

    return $form;
  } else {
    drupal_access_denied();
  }
}

/**
 * Submit callback for ext_order_commerce_order_order_cancel_form().
 */
function ext_order_commerce_order_order_cancel_form_validate($form, &$form_state)
{
  if (empty($form_state['values']['reason'])) {
    form_set_error('reason', 'Выберите причину отказа');
    return false;
  }
  return true;
}

/**
 * Submit callback for ext_order_commerce_order_order_cancel_form().
 */
function ext_order_commerce_order_order_cancel_form_submit($form, &$form_state)
{
  $order = $form_state['order'];

  commerce_order_status_update($order, 'canceled', false, true, _ext_order_order_cancel_statuses($form_state['values']['reason']));
  drupal_set_message(t('Order @number has been canceled.', array('@number' => $order->order_number)));
}

function _ext_order_order_cancel_statuses($id = null)
{
  $options = [
    '0' => 'Мне больше не нужен этот заказ',
    '1' => 'Цена стала выше',
    '2' => 'Слишком долгая обработка',
  ];

  return $id ? $options[$id] : $options;
}

/**
 * ------------ Вспомогательные функции ----------------------------------------
 */

/**
 * Информация о commerce_line_item
 * @param $line_item
 *
 * @return array
 */
function ext_order_get_line_item_info($line_item)
{
  $result = [];
  $line_item_wr = entity_metadata_wrapper('commerce_line_item', $line_item);

  if ($line_item_wr->value()) {
    $pid = $line_item_wr->commerce_product->product_id->value();
    $product_info = ext_product_get_info($pid);

    // найти опции
    $options = [];
    foreach ((array) $line_item as $field_name => $field) {
      if (strpos($field_name, '_option_') && $line_item_wr->{$field_name}->value()) {
        $options[] = $line_item_wr->{$field_name}->info()['label'] . ': ' . $line_item_wr->{$field_name}->label();
      }
    }
    // добавить аттрибуты
    $options = array_merge($options, $product_info['attributes']);

    $result = [
      'product_info' => $product_info,
      'options' => $options,
      'qty' => $line_item_wr->quantity->value(),
      'total' => $line_item_wr->commerce_total->amount->value(),
    ];
  }
  return $result;
}

/**
 * html страницы с информацией о Заказе
 */
function ext_order_print_order_info($order_id = null)
{
  return theme('order_print_form', array('order_id' => $order_id));
}

/**
 * menu callback
 * добавить товары из Заказа в Корзину
 */
function ext_order_add_order_to_cart($order_id = null)
{
  if ($order_wr = entity_metadata_wrapper('commerce_order', $order_id)) {
    foreach($order_wr->commerce_line_items as $item_wr) {
      if ($item_wr->type->value() == 'product' && $product = $item_wr->commerce_product->value()) {
        $line_item = commerce_product_line_item_new($product, $item_wr->quantity->value());
        $line_item->commerce_display_path['und']['0']['value'] = drupal_get_path_alias('node/' . _get_product_display_by_product_id($product->product_id));
        commerce_cart_product_add($GLOBALS['user']->uid, $line_item, TRUE);
      }
    }
  }

  drupal_set_message('Все товары в том же количестве добавлены в корзину.');
  drupal_goto('cart');
}
