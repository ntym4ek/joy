<?php

/**
 * -------------------------------- Авторизация по тлф -------------------------
 */
function ext_cart_form_views_form_commerce_cart_form_default_alter(&$form, $form_state)
{
  if (arg(0) != 'admin') {

    if (!empty($form_state['order']) && $form['output']['#markup'] != '') {
      $form['#attributes']['class'][] = 'commerce-cart-form-checkout';

      foreach ($form['edit_delete'] as $key => &$item) {
        if (isset($item['#value'])) {
          $item['#value'] = _bootstrap_icon('trash');
        }
      }

      // добавить свои действия на сабмит
      $form['actions']['checkout']['#submit'][] = 'ext_cart_form_views_form_commerce_cart_form_submit';


      // авторизация или регистрация пользователя (если включена в настройках)
      if (variable_get('sign_in_before_checkout', 1) && !$GLOBALS["user"]->uid) {
        $form['actions']['login'] = [
          '#type' => 'container',
          '#attributes' => ['class' => ['cs-login']],
        ];
        // сначала выводим форму ввода телефона
        if (empty($form_state['user_code'])) {
          $form['actions']['checkout']['#access'] = false;

          $form['actions']['login']['greet'] = [
            '#markup' => '<div class="greet">Не получилось Вас узнать, давайте авторизуемся для продолжения!</div>',
          ];
          $form['actions']['login']['phone'] = [
            '#type' => 'textfield',
            '#attributes' => ['class' => ['masked-phone'], 'placeholder' => ['Введите номер телефона']],
            '#default_value' => '',
          ];
          $form['actions']['login_send_sms'] = [
            '#type' => 'submit',
            '#name' => 'login_send_sms',
            '#value' => 'Получить СМС',
            '#validate' => ['ext_cart_cart_login_send_sms_validate', 'ifec_form_validator'],
            '#submit' => ['ext_cart_cart_login_send_sms_submit'],
            '#attributes' => ['class' => ['btn-info', 'btn-lg', 'btn-wide']],
          ];
        }
        // если телефон уже был введён, то форму ввода СМС сообщения
        else {
          $form['actions']['login']['greet'] = [
            '#markup' => '<div class="greet">Введите код из СМС и перейдём к оформлению!</div>',
          ];
          $form['actions']['login']['messages'] = array(
            '#type' => 'markup',
            '#markup' => theme('status_messages'),
          );
          $form['actions']['login']['code'] = [
            '#type' => 'textfield',
            '#attributes' => ['placeholder' => ['Четырёхзначный код']],
            '#default_value' => '',
          ];
          //              $form['actions']['login']['login_check_sms'] = [
          //                '#type' => 'submit',
          //                '#name' => 'login_check_sms',
          //                '#value' => 'К оформлению',
          //                '#submit' => ['ext_cart_cart_login_check_sms_submit'],
          //                '#attributes' => ['class' => ['btn-brand', 'btn-lg', 'btn-wide']],
          //              ];
          $form['actions']['login_repeat_sms'] = [
            '#type' => 'submit',
            '#name' => 'login_repeat_sms',
            '#value' => 'Повторно отправить СМС',
            '#validate' => ['ext_cart_cart_login_repeat_sms_validate', 'ifec_form_validator'],
            '#limit_validation_errors' => [['code']],
            '#submit' => ['ext_cart_cart_login_repeat_sms_submit'],
            '#attributes' => ['class' => ['btn-link', 'btn-wide']],
            '#weight' => 10,
          ];
          $form['actions']['login_change_phone'] = [
            '#type' => 'submit',
            '#name' => 'login_change_phone',
            '#value' => 'Изменить телефон',
            '#limit_validation_errors' => [],
            '#submit' => ['ext_cart_cart_login_change_phone_submit'],
            '#attributes' => ['class' => ['btn-link', 'btn-wide']],
            '#weight' => 11,
          ];

          // проверка кода при нажатии на Перейти к оформлению
          $form['actions']['checkout']['#weight'] = 9;
          if (empty($form['actions']['checkout']['#validate'])) {
            $form['actions']['checkout']['#validate'] = [];
          }
          array_unshift($form['actions']['checkout']['#validate'], 'ext_cart_cart_sms_validate');
          $form['actions']['checkout']['#validate'][] = 'ifec_form_validator';
          array_unshift($form['actions']['checkout']['#submit'], 'ext_cart_cart_login_check_sms_submit');
          // текст при нажатии на кнопку
          $form['actions']['checkout']['#attributes']['data-processing-label'] = 'Проверяем код...';
        }

        // ссылка на вход по email
        $form['actions']['login_email'] = [
          '#type' => 'submit',
          '#name' => 'login_email',
          '#value' => 'Войти по e-mail',
          '#limit_validation_errors' => [],
          '#submit' => ['ext_cart_cart_login_email_submit'],
          '#attributes' => ['class' => ['btn-link', 'btn-wide']],
          '#weight' => 12,
        ];
      } else {
        $form['actions']['checkout']['#attributes']['data-processing-label'] = 'Подождите...';
      }

      // order summary
      $form['actions']['#prefix'] = '<div class="ch-info-container">';
      $form['actions']['checkout']['#attributes']['class'][] = 'btn-primary btn-lg checkout-continue';
      $form['actions']['checkout']['#value'] = 'Перейти к оформлению';
      $form['actions']['#suffix'] = '</div>';

      $order_wrapper = entity_metadata_wrapper('commerce_order', $form_state['order']);

      $order_total = $order_wrapper->commerce_order_total->value();
      $products_base_amount = commerce_price_component_total($order_total, 'base_price')['amount'];
      $products_amount = commerce_line_items_total($order_wrapper->commerce_line_items, commerce_product_line_item_types())['amount'];
      $discount_amount = $products_amount - $products_base_amount;

      $products_qty = commerce_line_items_quantity($order_wrapper->commerce_line_items, commerce_product_line_item_types());

      // вес заказа
      $weight = commerce_physical_order_weight($form_state['order'], 'kg')['weight'];
      $weight_text = number_format($weight, 2) . ' кг';

      $header = '<h4>Предварительный итог</h4>';

      // доставка
      $delivery_text = 'платная';

      if ($reason_to_pay = ext_checkout_non_free_shipping($form_state['order'])) {
        if ($reason_to_pay['reason'] == 'cost') {
          $free_shipping = 'Ещё немножко! До бесплатной доставки осталось заказать на ' . commerce_currency_format($reason_to_pay['cost'] * 100 - $products_base_amount, 'RUB');
          // если есть ограничение по весу, указать
          $free_shipping .= ($reason_to_pay['weight'] ? '<br /><span class="notice">(для заказов весом менее ' . $reason_to_pay['weight'] . ' кг)</span>' : '');
        } elseif ($reason_to_pay['reason'] == 'weight') {
          $delivery_text .= '<br /><span class="notice">' . $reason_to_pay['text'] . '</span>';
        } elseif ($reason_to_pay['reason'] == 'region') {
          $delivery_text .= '<br /><span class="notice">' . $reason_to_pay['text'] . '</span>';
        }
      } else {
        $free_shipping = 'Вы получили <span class="text-success">бесплатную доставку</span> для Вашего заказа!';
        $delivery_text = 'бесплатная';
      }
      $back_url = '/';

      if (isset($free_shipping) && variable_get('free_shipping_show_sum', 0)) {
        if (variable_get('free_shipping_show_sum') == 1 || ($reason_to_pay['cost'] * 100 - variable_get('free_shipping_show_sum', 0)*100 <= $products_base_amount)) {
          $header = '<div class="cs-free">' . $free_shipping . '<a href="' . $back_url . '" class="btn btn-default">Добавить товары</a></div>';
        }
      }


      $form['actions']['summary'] = [
        '#markup' =>
          '<div class="cs-header">' . $header . '</div>' .
          '<div class="checkout-summary">' .
          '<div class="cs-quantity"><span class="label">' . 'Товары (' . $products_qty . ')</span><span class="value">' . commerce_currency_format($products_base_amount, 'RUB') . '</span></div>' .
          ($discount_amount < 0 ? '<div class="cs-discount"><span class="label">Скидка</span><span class="value">' . commerce_currency_format($discount_amount, 'RUB') . '</span></div>' : '') .
          '<div class="cs-weight"><span class="label">Вес</span><span class="value">' . $weight_text . '</span></div>' .
          '<div class="cs-delivery"><span class="label">Доставка</span><span class="value">' . $delivery_text . '</span></div>' .
          '<div class="cs-total"><span class="label">' . t('Total') . '</span><span class="value">' . commerce_currency_format($products_amount, 'RUB') . '</span></div>' .
          '</div>',
        '#weight' => -1,
      ];

    } else {
      $form['output']['#markup'] = theme('commerce_cart_empty_page');
    }
  }

}

function ext_cart_cart_login_send_sms_validate($form, &$form_state)
{
  if (!ext_user_valid_phone($form_state['values']['phone'])) {
    form_set_error('phone', 'Укажите корректный номер мобильного телефона');
    return false;
  }
}

function ext_cart_cart_login_send_sms_submit($form, &$form_state)
{
  // послать СМС с кодом
  $code = rand(1001, 9998);
  $phone = $form_state['values']['phone'];
  if (mailer_send_sms('user_code', ['phone' => $phone, 'code' => $code])) {
    $form_state['user_code'] = [
      'phone' => $phone,
      'code' => $code,
      'sent_time' => time()
    ];
    $form_state['rebuild'] = TRUE;
  }
  else {
    form_set_error('', 'Сервис отправки SMS пока недоступен. Попробуйте позже или зарегистрируйтесь с помощью E-Mail.');
  }
}

function ext_cart_cart_sms_validate($form, $form_state)
{
  // проверить совпадение СМС
  if (empty($form_state['values']['code']) || $form_state['values']['code'] != $form_state['user_code']['code']) {
    form_set_error('code', 'Неверный код');
    return false;
  }
}

/**
 * cart login submit callback
 */
function ext_cart_cart_login_check_sms_submit($form, &$form_state)
{
  global $user;

  $phone = $form_state['user_code']['phone'];
  $account = ext_user_user_load_by_phone($phone);

  if (!$account->uid) {
    // зарегистрировать
    $pass = user_password(6);
    $arguments = array(
      'name' => $phone,
      'pass' => $pass,
      'mail' => 'not@required.more',
      'init' => $phone,
      'status' => 1,
      'roles' => array(DRUPAL_AUTHENTICATED_RID => TRUE),
    );
    $arguments['field_phone'][LANGUAGE_NONE][0]['value'] = $phone;

    // создание пользователя
    if ($account = user_save(NULL, $arguments)) {
      // аутентификация пользователя
      // отправить СМС с паролем
      mailer_send_sms('user_pass', ['phone' => $phone, 'pass' => $pass]);
    }
  }

  // авторизовать
  $user = user_load($account->uid);
  user_login_finalize();
}

/**
 * validate callback формы ввода кода
 */
function ext_cart_cart_login_repeat_sms_validate(&$form, &$form_state)
{
  if (time() - $form_state['user_code']['sent_time'] < 60) {
    form_set_error('code', 'Новое смс можно будет отправить через ' . (60 - (time() - $form_state['user_code']['sent_time'])) . ' с');
    unset($form["actions"]["login"]["messages"]);
    return false;
  }
}

/**
 * cart repeat sms submit callback
 */
function ext_cart_cart_login_repeat_sms_submit($form, &$form_state)
{
  // новый код
  $code = rand(1001, 9998);
  $phone = $form_state['user_code']['phone'];
  if (mailer_send_sms('user_code', ['phone' => $phone, 'code' => $code])) {
    $form_state['user_code'] = [
      'phone' => $phone,
      'code' => $code,
      'sent_time' => time(),
    ];
    drupal_set_message('Новое СМС с кодом отправлено.');
  }

  $form_state['rebuild'] = TRUE;
}

/**
 * cart login submit callback
 */
function ext_cart_cart_login_change_phone_submit($form, &$form_state)
{
  // сбросить сохранённый отправленный код и перезагрузить форму
  unset($form_state['user_code']);
  $form_state['rebuild'] = TRUE;
}

/**
 * cart login submit callback
 */
function ext_cart_cart_login_email_submit($form, &$form_state)
{
  drupal_goto('user/login');
}


/**
 * Сабмит в корзине
 * form_views_form_commerce_cart_form callback
 * @param $form
 * @param $form_state
 */
function ext_cart_form_views_form_commerce_cart_form_submit($form, &$form_state)
{
  // добавить проверку на наличие в корзине отсутствующих товаров
  $out_of_stock_found = false;
  $order = $form_state['order'];
  foreach ($form_state['line_items'] as $line_item) {
    $line_item_wr = entity_metadata_wrapper('commerce_line_item', $line_item);
    $product_node = ext_product_get_product_display_by_product_id($line_item_wr->commerce_product->product_id->value(), false);
    if (!$product_node->status || $line_item_wr->commerce_product->field_p_out_of_stock->value()) {
      $order = commerce_cart_order_product_line_item_delete($order, $line_item->line_item_id, TRUE);
      $out_of_stock_found = true;
    }
  }
  if ($out_of_stock_found)  {
    drupal_set_message('Товары, которых нет в наличии, были удалены из корзины', 'warning');
    commerce_order_save($order);
  }

  // отправка события Инициации оформления заказа
  fbq('InitiateCheckout');
}


/**
 * альтер AJAX callback commerce_acf_ajax_update_cart_view
 * для обновления количества в блоке корзины
 */
function ext_cart_commerce_acf_commands_alter(&$commands, $cart_view)
{
  $commands[] = ajax_command_invoke('#cart', 'html', [trim(ext_order_cart_info_block())]);
}
