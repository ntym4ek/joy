<?php

/**
 * @file
 * Install, update and uninstall functions for the commerce_russianpost module.
 */


/**
 * Implements hook_requirements().
 */
function commerce_russianpost_requirements($phase) {
  $t = get_t();

  // Has SimpleXML.
  $has_simplexml = extension_loaded('SimpleXML');
  $requirements['commerce_russianpost_simplexml'] = array(
    'title' => $t('SimpleXML'),
    'value' => ($has_simplexml) ? $t('enabled') : $t('not found'),
  );
  if (!$has_simplexml) {
    $requirements['commerce_russianpost_simplexml']['severity'] = REQUIREMENT_ERROR;
    $requirements['commerce_russianpost_simplexml']['description'] = $t('Commerce RussianPost requires the <a href="!url">SimpleXML library</a>.', array(
      '!url' => 'http://www.php.net/manual/en/simplexml.installation.php',
    ));
  }

  return $requirements;
}

/**
 * Implements hook_install().
 */
function commerce_russianpost_install() {
  $t = get_t();

  drupal_set_message($t('Commerce RussianPost has been installed successfully.  Please visit <a href="!url">this page</a> to configure your shipping settings.', array(
    '!url' => url('admin/commerce/config/shipping/methods/russianpost/edit'),
  )));
}

/**
 * Implements hook_uninstall().
 */
function commerce_russianpost_uninstall() {
  // Delete module settings.
  variable_del('commerce_russianpost_customer_number');
  variable_del('commerce_russianpost_api_key');
  variable_del('commerce_russianpost_origin');
  variable_del('commerce_russianpost_turnaround');
  variable_del('commerce_russianpost_delivery_date_format');
  variable_del('commerce_russianpost_package_count');
  variable_del('commerce_russianpost_cache_timeout');
  variable_del('commerce_russianpost_log');
  variable_del('commerce_russianpost_rate_markup');
  variable_del('commerce_russianpost_weight_markup');

  // Delete any rules related to this module.
  $entity_ids = array('commerce_shipping_method_russianpost');
  $enabled_services = db_query('SELECT * FROM {commerce_russianpost_service}')->fetchCol('name');
  foreach ($enabled_services as $service_name) {
    $entity_ids[] = 'commerce_shipping_service_' . $service_name;
  }
  rules_config_delete($entity_ids);
}

/**
 * Implements hook_schema().
 */
function commerce_russianpost_schema() {
  $schema = array();

  $schema['commerce_russianpost_service'] = array(
    'description' => 'Stores information about RussianPost package services enabled for the Shipping module.',
    'fields' => array(
      'name' => array(
        'description' => 'The machine-readable name of the package service.',
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'title' => array(
        'description' => 'The human-readable title of the package service.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => 'The weight assigned this package service when sorting lists of services.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The status name of this package service.',
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => 'enabled',
      ),
    ),
    'primary key' => array('name'),
  );

  return $schema;
}

/**
 * Remove old SellOnline variables.
 */
function commerce_russianpost_update_7200(&$sandbox) {
  // Delete old variable(s).
  variable_del('commerce_russianpost_cpcid');

  // Display update message.
  drupal_set_message(t('Commerce RussianPost has updated. Visit <a href="!url">the settings page</a> to add your API Key and Customer Number.', array(
    '!url' => url('admin/commerce/config/shipping/methods/russianpost/edit'),
  )));
}

/**
 * Update date format variable.
 */
function commerce_russianpost_update_7202(&$sandbox) {
  $date_format = variable_get('commerce_russianpost_delivery_date_format');

  // Check if update is needed (is $date_format already a valid date type).
  if (($date_format != '') && !in_array($date_format, array_keys(system_get_date_types()))) {
    // Create custom date type.
    if (system_get_date_types('commerce_russianpost_delivery_date') === FALSE) {
      $type = array(
        'type' => 'commerce_russianpost_delivery_date',
        'title' => 'Delivery Date',
        'locked' => 0,
      );
      db_insert('date_format_type')
        ->fields($type)
        ->execute();
    }

    // Create custom date format.
    $date_formats = system_get_date_formats();
    if (!isset($date_formats['custom'][$date_format])) {
      $format = array(
        'format' => $date_format,
        'type' => 'custom',
        'locked' => 0,
      );
      db_insert('date_formats')
        ->fields($format)
        ->execute();
    }

    // Set default format for new date type.
    variable_set('date_format_commerce_russianpost_delivery_date', $date_format);
    variable_set('commerce_russianpost_delivery_date_format', 'commerce_russianpost_delivery_date');

    // If locale module is enabled, set default format for each language.
    if (module_exists('locale')) {
      foreach (array_keys(language_list()) as $language_code) {
        locale_date_format_save($language_code, 'commerce_russianpost_delivery_date', $date_format);
      }
    }
  }
}

/**
 * Clean up RussianPost services table & add new 'status' field.
 */
function commerce_russianpost_update_7203(&$sandbox) {
  // Add new status field to services table.
  if (!db_field_exists('commerce_russianpost_service', 'status')) {
    db_add_field(
      'commerce_russianpost_service',
      'status',
      array(
        'description' => 'The status name of this package service.',
        'type' => 'varchar',
        'length' => 16,
        'not null' => TRUE,
        'default' => 'enabled',
      )
    );
  }

  // Clean up services table by "retiring" services from the 7.x-1.x branch.
  // The machine names for 7.x-2.x services are different (generated from the
  // service codes returned by the new RussianPost web services API).
  // Any 7.x-1.x services that have line items depending on them (from past
  // orders) are kept and marked disabled with the new status field.
  // The module now generates price components for disabled services, which
  // preserves data integrity in past orders.
  $v1_services = array(
    'russianpost_dom_regular',
    'russianpost_dom_xpdt',
    'russianpost_dom_xpresspost',
    'russianpost_dom_pri_courier',
    'russianpost_us_tracked',
    'russianpost_us_sp_surface',
    'russianpost_us_sp_air',
    'russianpost_us_xpdt_bus_contract',
    'russianpost_us_xpresspost',
    'russianpost_us_pri_world',
    'russianpost_us_pri_world_pak',
    'russianpost_intl_tracked',
    'russianpost_intl_sp_surface',
    'russianpost_intl_surface',
    'russianpost_intl_sp_air',
    'russianpost_intl_air',
    'russianpost_intl_xpresspost',
    'russianpost_intl_pri_world',
    'russianpost_intl_pri_world_pak',
  );
  $v1_rules = array();

  // Disable all 7.x-1.x services.
  db_update('commerce_russianpost_service')
    ->fields(array('status' => 'disabled'))
    ->condition('name', $v1_services, 'IN')
    ->execute();

  // Load services from 7.x-1.x branch.
  $v1_services = db_select('commerce_russianpost_service', 's')
    ->fields('s', array('name'))
    ->condition('name', $v1_services, 'IN')
    ->execute()
    ->fetchAllAssoc('name', PDO::FETCH_ASSOC);

  foreach ($v1_services as $service) {
    // Add machine name to list of rules marked for deletion.
    $v1_rules[] = 'commerce_shipping_service_' . $service['name'];

    // Check if there are line items depending on this service.
    $query = new EntityFieldQuery();
    $query
      ->entityCondition('entity_type', 'commerce_line_item', '=')
      ->fieldCondition('commerce_shipping_service', 'value', $service['name'], '=')
      ->count();
    $line_item_count = $query->execute();

    // Delete row if no line items exist.
    if ($line_item_count == 0) {
      db_delete('commerce_russianpost_service')
        ->condition('name', $service['name'])
        ->execute();
    }
  }

  // Delete 7.x-1.x rules in bulk.
  if (!empty($v1_rules)) {
    rules_config_delete($v1_rules);
  }
}
