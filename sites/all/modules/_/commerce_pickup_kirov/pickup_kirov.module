<?php

/**
 * @file
 * Defines an example shipping method for testing and development.
 */


/**
 * Implements hook_commerce_shipping_method_info().
 */
function pickup_kirov_commerce_shipping_method_info() {
    $shipping_methods = array();

    $shipping_methods['pickup_kirov_shipping_method'] = array(
        'title' => t('Pickup in Kirov shipping method'),
        'description' => t('Defines shipping method by pickup from point in Kirov.'),
    );

    return $shipping_methods;
}

/**
 * Implements hook_commerce_shipping_service_info().
 */
function pickup_kirov_commerce_shipping_service_info() {
  $shipping_services = array();

  $shipping_services['pickup_kirov_shipping_service'] = array(
    'title' => t('Pickup in Kirov shipping service'),
    'display_title' => 'Пункт выдачи',
    'shipping_method' => 'pickup_kirov_shipping_method',
    'price_component' => 'shipping',
    'weight' => 5,
    'callbacks' => array(
      'rate' => 'pickup_kirov_service_rate_order',
      'details_form' => 'pickup_kirov_service_details_form',
      'details_form_validate' => 'pickup_kirov_service_details_form_validate',
      'details_form_submit' => 'pickup_kirov_service_details_form_submit',
    ),
  );

  return $shipping_services;
}

/**
 * Shipping service callback: returns a base price array for a shipping service
 * calculated for the given order.
 */
function pickup_kirov_service_rate_order($shipping_service, $order)
{
  $rate = array(
    'amount' => -1,
    'currency_code' => 'RUB',
    'data' => [],
  );

  if (arg(0) != 'checkout') {
    $order_wr = entity_metadata_wrapper('commerce_order', $order);
    $field_name = commerce_physical_order_shipping_field_name($order);
    $field_data = json_decode($order_wr->{$field_name}->field_data->value(), TRUE);
    $products_amount_base = commerce_price_component_total($order_wr->commerce_order_total->value(), 'base_price')['amount'];

    // сумма заказа больше 1000 р. и только для кирова
    if (isset($field_data["region"]) && $field_data["region"]["data"]["city_kladr_id"] == '4300000100000') {
      if ($products_amount_base < 100000) $rate['amount'] = 15000;
      else $rate['amount'] = 0;
    }
  }

  return ($rate['amount'] != -1 || isset($rate['data']['errors'])) ? $rate : false;
}


/**
 * Allows modules to alter the options array generated to select a shipping
 * service on the checkout form.
 */
function pickup_kirov_commerce_shipping_service_rate_options_alter(&$options, $order)
{
  if (isset($order->shipping_rates['pickup_kirov_shipping_service'] )) {
    $line_item = $order->shipping_rates['pickup_kirov_shipping_service'];
    $line_item_wr = entity_metadata_wrapper('commerce_line_item', $line_item);
    $data = $line_item_wr->commerce_unit_price->data->value();

    $message = $cost = '';
    if (empty($data['errors'])) {
      $cost = $line_item_wr->commerce_unit_price->amount->value();
      $cost = $cost ? commerce_currency_format($cost, 'RUB') : t('free');
    } else {
      $message = 'Ошибка расчёта: ' . drupal_strtolower(implode(', ', $data['errors']));
    }

    $options['pickup_kirov_shipping_service'] =  '<div class="carrier">Пункт выдачи</div>' .
      '<div class="message">в г. Киров</div>' .
      '<div class="cost">' . $cost . '</div>';
  }
}

/**
 * Shipping service callback: returns the shipping service details form.
 */
function pickup_kirov_service_details_form($pane_form, $pane_values, $checkout_pane, $order, $shipping_service)
{
    // вывести инфо о пункте самовывоза
    $pane_form = array();

    $pane_form['info'] = array(
        '#markup' => '<div class="form-item form-item-markup"><p>Забрать товар можно по адресу г. Киров, Октябрьский проспект, д.87</p><p></p></div>',
    );

  $user_info = ext_user_get_user_info($order->uid, true);
    $pane_form['username'] = array(
        '#title' => 'Фамилия, Имя, Отчество',
        '#type' => 'textfield',
        '#default_value' => empty($user_info['name']['fullname']) ? '' : $user_info['name']['fullname'],
    );
    $pane_form['phone'] = array(
        '#title' => 'Телефон',
        '#type' => 'textfield',
        '#attributes' => ['class' => ['masked-phone']],
        '#default_value' => empty($user_info['phone']) ? '' : $user_info['phone'],
    );

    $pane_form['notes'] = array(
        '#title' => t('Notes to order'),
        '#type' => 'textarea',
        '#rows' => 2,
    );

    $pane_form['callme'] = array(
        '#title' => t('Call me to get details about my order and delivery'),
        '#type' => 'checkbox',
        '#default_value' => empty($user_info['address']['callme']) ? '' : $user_info['address']['callme'],
    );

    return $pane_form;
}

/**
 * Shipping service callback: validates the example shipping service details.
 */
function pickup_kirov_service_details_form_validate($details_form, $details_values, $shipping_service, $order, $form_parents)
{
  $validate = true;

  $field = 'username';
  if (empty($details_values[$field])) {
    form_set_error(implode('][', array_merge($form_parents, [$field])), 'Заполните это поле');
    $validate = false;
  }
  if (drupal_strlen($details_values[$field]) < 5) {
    form_set_error(implode('][', array_merge($form_parents, [$field])), 'Поле заполнено некорректно');
    $validate = false;
  }
  $field = 'phone';
  if (!ext_user_valid_phone($details_values[$field])) {
    form_set_error(implode('][', array_merge($form_parents, [$field])), 'Укажите в формате 7 (xxx) xxx-xxxx');
    $validate = false;
  }

  return $validate;
}

/**
 * Shipping service callback: increases the shipping line item's unit price if
 * express delivery was selected.
 */
function pickup_kirov_service_details_form_submit($details_form, $details_values, $line_item)
{
    // сохраняем введенные пользователем данные
    $order_wrapper = entity_metadata_wrapper('commerce_order', $line_item->order_id);

    $order_wrapper->field_username = $details_values['username'];
    $order_wrapper->field_phone = ext_user_normalize_phone($details_values['phone']);
    $order_wrapper->commerce_customer_shipping->field_notes = $details_values['notes'];
    $order_wrapper->commerce_customer_shipping->field_callme = $details_values['callme'];
    $order_wrapper->commerce_customer_shipping->save();
    $order_wrapper->save();
}

// callback функция, возвращающая информацию о доставке для заказов
function pickup_kirov_shipping_service_info($item)
{
    $component_data = empty($item->commerce_total['und'][0]['data']) ? [] : $item->commerce_total['und'][0]['data'];
    return [
        'title' => $item->line_item_label,
        'method' => $item->commerce_shipping_service,
        'address' => 'г. Киров, Октябрьский проспект, д.87',
    ];
}
