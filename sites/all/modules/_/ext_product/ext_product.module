<?php

/**
 * Implements hook_menu().
 */
function ext_product_menu() {
  $items['api/product/set'] = array (
    'page callback' => 'ext_product_product_update',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/joy/api'] = array(
    'title' => 'API сайта',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ext_product_api_settings'),
    'access arguments' => array('access manager settings'),
    'file' => 'includes/ext_product.admin.inc',
  );

  $items['cart/add-product/%'] = array (
    'page callback' => 'ext_product_product_cart_update',
    'page arguments' => array(2, 1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['cart/delete-product/%'] = array (
    'page callback' => 'ext_product_product_cart_update',
    'page arguments' => array(2, 1),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );


  return $items;
}



/**
 * ------------------------------------------ Добавление Product Teaser в корзину --------------------------------------
 * http://www.realtidings.com/blog/12/Apr/26/drupal-commerce-custom-add-cart-link
 * callback для добавления товара в корзину по id.
 */
function ext_product_product_cart_update($product_id, $op, $mode = null)
{
  if ($mode == 'ajax') {
    ctools_include('modal');
    $output = array();

    // добавляем в корзину
    if ($op == 'add-product') {
      if (ext_product_product_cart_add($product_id)) {
        // меняем кнопку
        $link =
          '<div id="product-' . $product_id . '-button" class="btn-group" role="group" >' .
          //                    '<a href="/cart/delete-product/' . $product_id . '/nojs"  class="btn btn-brand btn-sm btn-empty product-cart cart-full use-ajax" title="Убрать из корзины">В корзине</a>' .
          '<a href="/cart"  class="btn btn-brand btn-sm btn-empty" title="Перейти в корзину">В корзину</a>' .
          '<a href="/cart/add-product/' . $product_id . '/nojs" id="product-' . $product_id . '" class="btn btn-brand btn-sm btn-narrow btn-add-to-cart use-ajax" rel="nofollow">+1</a>' .
          '</div>';
        $output[] = ajax_command_replace('#product-' . $product_id . '-button', $link);

        // обновляем виджет корзины
        $output[] = ajax_command_invoke('#cart', 'html', [trim(commerce_helper_cart_info_block())]);
      } else {
        // сообщение о неудачном добавлении
        $output[] = ctools_modal_command_display('Ошибка', 'Ошибка при добавлении товара в корзину.');
      }
    };

    // удаляем из корзины
    //    if ($op == 'delete-from-cart' && $order = commerce_cart_order_load($GLOBALS['user']->uid)) {
    //        $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    //        foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    //            if ($line_item_wrapper->type->value() == 'product') {
    //                $product = $line_item_wrapper->commerce_product->value();
    //                if ($product->product_id == $product_id) {
    //                    commerce_cart_order_product_line_item_delete($order, $line_item_wrapper->line_item_id->value());
    //                }
    //            }
    //        }
    //
    //
    //        // меняем иконку на товаре
    //        $link = '<a href="/cart/add-product/' . $product_id . '/nojs" id="product-' . $product_id . '" class="btn btn-brand btn-sm btn-add-to-cart use-ajax" rel="nofollow">Купить</a>';
    //        $output[] = ajax_command_replace('#product-' . $product_id, $link);
    //
    //        // обновляем виджет корзины
    //        $output[] = ajax_command_invoke('#cart', 'html', [trim(commerce_helper_cart_info_block())]);
    //    }

    // очистить статусные сообщения
    // 'успешное добавление в корзину' в т.ч.
    drupal_get_messages('status');


    print ajax_render($output);
    drupal_exit();
  } else {
    drupal_goto(url('node/'. _get_product_display_by_product_id($product_id)), ['query' => ['id' => $product_id]]);
  }
}

/**
 * Добавить вариант товара в корзину
 * @param $product_id
 *
 * @return bool|null
 */
function ext_product_product_cart_add($product_id, $gift = false)
{
  if ($product = commerce_product_load($product_id)) {
    $fields = ['field_option_size' => ['und' => ['value' => NULL]]];
    $line_item = commerce_product_line_item_new($product, 1, 0, [$fields]);
    // задать в line_item пустые поля опций
    // требуется для корректного объединения одинаковых line_item's
    // т.к. если полей нет, то line_item не сравнивается с позициями в корзине и сразу создаётся новый
    // соотвественно, нельзя таким способом добавлять в корзину товары, имеющие опции
    foreach ((array) $product as $field_name => $field) {
      if (strpos($field_name, '_option_')) {
        $line_item->{$field_name} = [];
      }
    }
    $line_item->commerce_display_path['und']['0']['value'] = drupal_get_path_alias('node/' . _get_product_display_by_product_id($product_id));
    $line_item = commerce_cart_product_add($GLOBALS['user']->uid, $line_item, TRUE);
    return $line_item;
  }
  return false;
}

/**
 * ------------------------------------------ API ------------------------------------------------------------
 */

/**
 * menu callback
 * установка и сброс опции Нет в наличии для 1С
 */
function ext_product_product_update() {
  // проверить Токен
  $message = "Bad query";

  if ($_GET['api_key'] == variable_get('api_key') && isset($_GET['stock']) && in_array($_GET['stock'], [0, 1]) && isset($_GET['pid'])) {
    // изменить статус товара
    $stock = $_GET['stock'];
    $pid = $_GET['pid'];
    $product_wr = entity_metadata_wrapper('commerce_product', $pid);
    if ($product_wr->value()) {
        $product_wr->field_p_out_of_stock->set(!$stock);
        $product_wr->save();
        $message = "OK";
    }
  }

  drupal_json_output($message);
}
