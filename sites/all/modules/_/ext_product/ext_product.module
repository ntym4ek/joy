<?php

/**
 * Implements hook_menu().
 */
function ext_product_menu() {
  $items['api/product/set'] = [
    'page callback' => 'ext_product_product_update',
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  $items['admin/config/joy/api'] = [
    'title' => 'API сайта',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ext_product_api_settings'],
    'access arguments' => ['access manager settings'],
    'file' => 'includes/ext_product.admin.inc',
  ];

  $items['cart/add-product/%'] = [
    'page callback' => 'ext_product_product_cart_update',
    'page arguments' => [2, 1],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];
  $items['cart/delete-product/%'] = [
    'page callback' => 'ext_product_product_cart_update',
    'page arguments' => [2, 1],
    'access arguments' => ['access content'],
    'type' => MENU_CALLBACK,
  ];


  return $items;
}

/**
 * Implements hook_preprocess_page
 */
function ext_product_process_page(&$vars)
{
  // добавляем библиотеку ajax
  // (добавление товаров в корзину есть практически на любой странице)
  drupal_add_library('system', 'drupal.ajax');
}

/**
 * Implements hook_form_alter
 */
function ext_product_form_alter(&$form, &$form_state, $form_id)
{
  // --------------------------------- Изменение формы добавления в корзину
  // e.g form id: commerce_cart_add_to_cart_form_u6onPJSgS7pOgw0Tlo7zHy42LTQzbV913taANkYQKTo
  if (strpos($form_id, 'commerce_cart_add_to_cart_form') !== FALSE) {
    ext_product_form_commerce_add_to_cart_form_alter($form, $form_state);
  }
}

function ext_product_form_commerce_add_to_cart_form_alter(&$form, &$form_state)
{
  // назначить постобработку для добавления класса активному элементу
  if (!empty($form['attributes'])) {
    foreach($form['attributes'] as $field_name => &$field) {
      if (strpos($field_name, '_attribute_') || $field_name == 'field_p_tare') {
        $field['#after_build'][] = 'ext_product_radios_alter';
      }
    }
  }

  // если товар в наличии
  $product_id = isset($form['product_id']) ? $form['product_id']['#value'] : null;
  if (empty($form_state['default_product']->field_p_out_of_stock['und'][0]['value'])) {
    // - AJAXификация кнопки --------------------------------------------------------
    // - проверка наличия товара в корзине и смена состояния и текста кнопки --------
    if (in_array($product_id, _get_order_product_ids($GLOBALS['user']->uid))) {
      $form['submit']['#prefix'] = '<div class="btn-group" role="group"><a class="btn btn-primary btn-empty" href="/cart">Перейти в корзину</a>';
      $form['submit']['#value'] = '+1';
      $form['submit']['#attributes']['class'][] = 'btn-primary';
      $form['submit']['#suffix'] = '</div>';
    } else {
      $form['submit']['#value'] = 'В корзину';
      $form['submit']['#attributes']['class'][] = 'btn-primary';
    }
    $form['submit']['#ajax'] = array('callback' => 'ext_product_add_to_cart_ajax_callback');
    $form['#submit'][] = 'ext_product_add_to_cart_form_submit';
  }
  // если товара нет
  else {
    $form['submit']['#value'] = 'Товар ожидается';
    $form['submit']['#disabled'] = true;
    $form['submit']['#attributes']['class'][] = 'btn-warning';
  }

  // настройка мультиопций
  if (!empty($form['line_item_fields'])) {
    $have_options = false;
    foreach ($form['line_item_fields'] as $field_name => &$field) {
      if (strpos($field_name, '_option_')) {
        // проверить в Варианте продукта наличие установленных для поля опций
        // если есть - вывести
        $options = [];
        if (isset($form_state['default_product']->{$field_name}['und']) && is_array($form_state['default_product']->{$field_name}['und'])) {
          foreach ($form_state['default_product']->{$field_name}['und'] as $value) {
            $options[$value['value']] = $field['und']['#options'][$value['value']];
          }
        }

        if ($options) {
          $have_options = true;
          $field['und']['#type'] = 'radios';
          $field['und']['#options'] = $options;
          $field['und']['#after_build'][] = 'ext_product_radios_alter';
          if (count($options) == 1) {
            $field['und']['#default_value'] = key($options);
          } else {
            $field['und']['#default_value'] = '';
            $form_state['input']['line_item_fields'][$field_name]['und'] = null;
            $form_state['values']['line_item_fields'][$field_name]['und'][0]['value'] = null;
          }
        }
        else {
          $field['#access'] = FALSE;
        }
      }
    }
    if ($have_options) {
      // нужно проверить, что опции были заданы
      array_unshift($form['#validate'], 'ext_product_add_to_cart_form_validate');
    }
  }

  // разметка schema.org itemprop="productID" content="facebook_tshirt_001"
  if ($product_id) {
    $schema = '<meta itemprop="productID" content="' . $product_id . '">';
    $schema .= '<meta itemprop="url" content="' . url('node/' . $form_state["context"]["entity_id"], [
        'absolute' => TRUE,
        'query' => ['id' => $product_id]
      ]) . '">';
    if (!empty($form['attributes'])) {
      foreach ($form['attributes'] as $attribute) {
        if (isset($attribute["#options"])) {
          $schema .=
            '<div itemprop="value" itemscope itemtype="http://schema.org/PropertyValue">' .
            '<span itemprop="name">' . $attribute['#title'] . '</span>' .
            '<meta itemprop="value" content="True">' . $attribute['#options'][$attribute['#default_value']] . '</meta>' .
            '</div>';
        }
      }
    }
    $schema .=
      '<div itemprop="offers" itemscope itemtype="http://schema.org/Offer">' .
      '<link itemprop="availability" href="http://schema.org/' . ($form_state["default_product"]->status ? 'InStock' : 'OutOfStock') . '">' .
      '<meta itemprop="price" content="' . $form_state["default_product"]->commerce_price["und"][0]["amount"] / 100 . '">' .
      '<meta itemprop="priceCurrency" content="RUB">' .
      '</div>';
    $form["schema_org"]["#markup"] = '<div style="display: none;">' . $schema . '</div>';
  }
}


function ext_product_add_to_cart_ajax_callback($form, $form_state)
{
  drupal_get_messages();
  $product_ids = commerce_cart_add_to_cart_form_product_ids($form_state['line_item']);
  $class = drupal_html_class(commerce_cart_add_to_cart_form_id($product_ids));
  return array(
    '#type' => 'ajax',
    '#commands' => array(
      ajax_command_replace('.'. $class, trim(render($form))),
      ajax_command_invoke('#cart', 'html', [trim(ext_order_cart_info_block())]),
    ),
  );
}

function ext_product_add_to_cart_form_validate($form, &$form_state)
{
  foreach ($form_state['values']['line_item_fields'] as $field_name => $field) {
    if (strpos($field_name, '_option_')
      && $form['line_item_fields'][$field_name]['#access']
      && empty($field['und'][0]['value'])) {
      form_set_error('line_item_fields][' . $field_name, 'Выберите ' . $form['line_item_fields'][$field_name]['und']['#title']);
    }
  }
}

function ext_product_add_to_cart_form_submit($form, &$form_state)
{
  $form_state['rebuild'] = TRUE;
}

/**
 * Processing Radios Element using #after_build property.
 * Adding the 'active' class attribute for selected item in Product display
 */
function ext_product_radios_alter($element, $form_state)
{
  if (isset($element['#default_value'])) {
    $radios_value = $element['#default_value'];

    // в мультиопциях Radios имеет неограниченное количество значений,
    // поэтому #default_value является массивом, берем только первое значение
    if (is_array($radios_value)) $radios_value = array_shift($radios_value);

    if (isset($element[$radios_value])) {
      $element[$radios_value]['#wrapper_attributes']['class'][] = 'active';
    }
  }
  return $element;
}

/**
 * ------------------------------------------ Добавление Product Teaser в
 * корзину --------------------------------------
 * http://www.realtidings.com/blog/12/Apr/26/drupal-commerce-custom-add-cart-link
 * callback для добавления товара в корзину по id.
 */
function ext_product_product_cart_update($product_id, $op, $mode = NULL) {
  if ($mode == 'ajax') {
    ctools_include('modal');
    $output = [];

    // добавляем в корзину
    if ($op == 'add-product') {
      if (ext_product_product_cart_add($product_id)) {
        // меняем кнопку
        $link =
          '<div id="product-' . $product_id . '-button" class="btn-group" role="group" >' .
          //                    '<a href="/cart/delete-product/' . $product_id . '/nojs"  class="btn btn-brand btn-sm btn-empty product-cart cart-full use-ajax" title="Убрать из корзины">В корзине</a>' .
          '<a href="/cart"  class="btn btn-brand btn-sm btn-empty" title="Перейти в корзину">В корзину</a>' .
          '<a href="/cart/add-product/' . $product_id . '/nojs" id="product-' . $product_id . '" class="btn btn-brand btn-sm btn-narrow btn-add-to-cart use-ajax" rel="nofollow">+1</a>' .
          '</div>';
        $output[] = ajax_command_replace('#product-' . $product_id . '-button', $link);

        // обновляем виджет корзины
        $output[] = ajax_command_invoke('#cart', 'html', [trim(ext_order_cart_info_block())]);
        // если добавление товара со страницы корзины - обновить страницу
        // todo обновить только блок корзины
        if (str_replace($_SERVER["HTTP_ORIGIN"], '', $_SERVER["HTTP_REFERER"]) == '/cart') {
          $output[] = array('command' => 'refresh_page');
        }
      }
      else {
        // сообщение о неудачном добавлении
        $output[] = ctools_modal_command_display('Ошибка', 'Ошибка при добавлении товара в корзину.');
      }
    };

    // удаляем из корзины
    //    if ($op == 'delete-from-cart' && $order = commerce_cart_order_load($GLOBALS['user']->uid)) {
    //        $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    //        foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
    //            if ($line_item_wrapper->type->value() == 'product') {
    //                $product = $line_item_wrapper->commerce_product->value();
    //                if ($product->product_id == $product_id) {
    //                    commerce_cart_order_product_line_item_delete($order, $line_item_wrapper->line_item_id->value());
    //                }
    //            }
    //        }
    //
    //
    //        // меняем иконку на товаре
    //        $link = '<a href="/cart/add-product/' . $product_id . '/nojs" id="product-' . $product_id . '" class="btn btn-brand btn-sm btn-add-to-cart use-ajax" rel="nofollow">Купить</a>';
    //        $output[] = ajax_command_replace('#product-' . $product_id, $link);
    //
    //        // обновляем виджет корзины
    //        $output[] = ajax_command_invoke('#cart', 'html', [trim(ext_order_cart_info_block())]);
    //    }

    // очистить статусные сообщения
    // 'успешное добавление в корзину' в т.ч.
    drupal_get_messages('status');


    print ajax_render($output);
    drupal_exit();
  }
  else {
    drupal_goto(url('node/' . ext_product_get_product_display_by_product_id($product_id)), ['query' => ['id' => $product_id]]);
  }
}

/**
 * Добавить вариант товара в корзину
 *
 * @param $product_id
 *
 * @return bool|null
 */
function ext_product_product_cart_add($product_id, $gift = FALSE) {
  if ($product = commerce_product_load($product_id)) {
    $fields = ['field_option_size' => ['und' => ['value' => NULL]]];
    $line_item = commerce_product_line_item_new($product, 1, 0, [$fields]);
    // задать в line_item пустые поля опций
    // требуется для корректного объединения одинаковых line_item's
    // т.к. если полей нет, то line_item не сравнивается с позициями в корзине и сразу создаётся новый
    // соотвественно, нельзя таким способом добавлять в корзину товары, имеющие опции
    foreach ((array) $product as $field_name => $field) {
      if (strpos($field_name, '_option_')) {
        $line_item->{$field_name} = [];
      }
    }
    $line_item->commerce_display_path['und']['0']['value'] = drupal_get_path_alias('node/' . ext_product_get_product_display_by_product_id($product_id));
    $line_item = commerce_cart_product_add($GLOBALS['user']->uid, $line_item, TRUE);
    return $line_item;
  }
  return FALSE;
}

/**
 * ------------------------------------------ API
 * ------------------------------------------------------------
 */

/**
 * menu callback
 * установка и сброс опции Нет в наличии для 1С
 */
function ext_product_product_update() {
  // проверить Токен
  $message = "Bad query";

  if ($_GET['api_key'] == variable_get('api_key') && isset($_GET['stock']) && in_array($_GET['stock'], [
      0,
      1,
    ]) && isset($_GET['pid'])) {
    // изменить статус товара
    $stock = $_GET['stock'];
    $pid = $_GET['pid'];
    $product_wr = entity_metadata_wrapper('commerce_product', $pid);
    if ($product_wr->value()) {
      $product_wr->field_p_out_of_stock->set(!$stock);
      $product_wr->save();
      $message = "OK";
    }
  }

  drupal_json_output($message);
}

function ext_product_get_info($product)
{
  $product_wr = entity_metadata_wrapper('commerce_product', $product);
  $pid = $product_wr->product_id->value();
  $host_node_id = ext_product_get_product_display_by_product_id($pid);

  // заголовок
  $pd_title = db_select('node', 'n')
    ->fields('n', ['title'])
    ->condition('n.nid', $host_node_id)
    ->execute()->fetchField();
  $title = strip_tags($pd_title);

  // упаковка
  $arr = explode('|', $product_wr->title->value());
  $tare = empty($arr[1]) ? '' : trim($arr[1]);

//  if ($product_wr->field_p_tare->value()) {
//    $tare = $product_wr->field_p_tare->name->value();
//  }

  // получить краткое описание
  $pd_summary = db_select('field_data_body', 'b')
    ->fields('b', ['body_summary'])
    ->condition('b.entity_type', 'node')
    ->condition('b.entity_id', $host_node_id)
    ->execute()->fetchField();
  $summary = strip_tags($pd_summary);

  // сформировать ссылку на страницу подробного описания
    // параметр id для отображения соответствующего варианта товара в карточке (модуль Commerce Product URLs)
  $url_query['id'] = $pid;
    // включить доп параметр с категорией, откуда заходим в описание
  if (!empty($_GET['q']) && strpos($_GET['q'], 'taxonomy/term/') === 0) {
    $tid = str_replace('taxonomy/term/', '', $_GET['q']);
    if (is_numeric($tid)) {
      $url_query['cat'] = $tid;
    }
  }
  $node_url = url('node/'. $host_node_id, ['query' => $url_query]);

  // разрешение на покупку
  $lets_buy = true;
  //        if (drupal_is_front_page()) $lets_buy = false;

  // проверить наличие товара в корзине для вывода значка заполненной корзины
  $add_to_cart_link = '';
  $stock = !$product_wr->field_p_out_of_stock->value();
  if ($lets_buy) {
    if ($stock) {
      // если товар имеет опции, текст Выбрать размер
      $has_options = false;
      foreach((array)$product_wr->value() as $field_name => $field) {
        if (strpos($field_name, '_option_') && $field) {
          $has_options = true;
        }
      }
      if ($has_options) {
        $add_to_cart_link = '<div id="product-' . $pid . '-button"><a href="' . $node_url . '" class="btn btn-brand btn-sm btn-empty">Выбрать размер</a></div>';
      }
      // если уже добавлен "В корзину | +1"
      elseif (in_array($pid, _get_order_product_ids($GLOBALS['user']->uid))) {
        $add_to_cart_link =
          '<div id="product-' . $pid . '-button" class="btn-group" role="group" >' .
          '<a href="/cart"  class="btn btn-brand btn-sm btn-empty" title="Перейти в корзину">В корзину</a>' .
          '<a href="/cart/add-product/' . $pid . '/nojs" id="product-' . $pid . '" class="btn btn-brand btn-sm btn-narrow btn-add-to-cart use-ajax" rel="nofollow">+1</a>' .
          '</div>';
      }
      else {
        $add_to_cart_link = '<div id="product-' . $pid . '-button"><a href="/cart/add-product/' . $pid . '/nojs" id="product-' . $pid . '" class="btn btn-brand btn-sm btn-add-to-cart use-ajax" title="Добавить в корзину" rel="nofollow">Купить</a></div>';
      }
    } else {
      $add_to_cart_link = '<div id="product-' . $pid . '-button"><a href="' . $node_url . '" class="btn btn-brand btn-sm btn-empty">Товар ожидается</a></div>';
    }
  }

  // изображение
  if ($image = $product_wr->field_p_image[0]->value()) {
    $image_url = image_style_url('medium', $image['uri']);
  }

  // оценка
  $fivestar_html = '';
  $votes = fivestar_get_votes('node', $host_node_id);
  $fivestar_field = !empty($votes['count']['value']) ? field_view_field('node', node_load($host_node_id), 'field_pr_mark','teaser') : '';
  if ($fivestar_field) {
    $fivestar_html = drupal_render($fivestar_field);
  }

  // цена и скидка
  $discount_amount = 0;
  $commerce_price = $product_wr->commerce_price->value();
  $price = commerce_currency_format($commerce_price['amount'], 'RUB');
  $base_amount = commerce_price_component_total($commerce_price, 'base_price')['amount'];
  foreach ($commerce_price['data']['components'] as $key => $component) {
    if (strpos($component['name'], 'discount|') === 0) {
      $discount_amount += $component['price']['amount'];
    }
  }
  $discount_percent = $base_amount ? floor($discount_amount/$base_amount*100) : 0;

  // перебрать атрибуты
  $attributes = [];
  foreach ((array)$product_wr->value() as $field_name => $field) {
    if ((strpos($field_name, '_attribute_') || $field_name == 'field_p_tare') && $product_wr->{$field_name}->value()) {
      $attributes[] = $product_wr->{$field_name}->info()['label'] . ': ' . $product_wr->{$field_name}->label();
    }
  }

  return [
    'id' => $pid,
    'title' => $title,
    'tare' => $tare,
    'summary' => $summary,
    'price_wo_format' => $commerce_price['amount']/100,
    'price' => $price,
    'discount_percent' => $discount_percent,
    'node_url' => $node_url,
    'lets_buy' => $lets_buy,
    'add_to_cart_link' => $add_to_cart_link,
    'image_uri' => $image['uri'],
    'image_medium' => $image_url,
    'fivestar_html' => $fivestar_html,
    'stock' => $stock,
    'attributes' => $attributes,
  ];
}


/**
 * Получить id ноды или ноду по id привязанного commerce product
 */
function ext_product_get_product_display_by_product_id($product_id, $only_id = true)
{
  if ($product_id) {
    $product_display_nid = db_select('field_data_field_product', 'f')
      ->fields('f', array('entity_id'))
      ->condition('f.field_product_product_id', $product_id)
      ->range(0, 1)
      ->execute()
      ->fetchField();
    if ($only_id) return  $product_display_nid;
    else return node_load($product_display_nid);
  }
  return false;
}

/**
 * Implements hook_field_attach_view_alter().
 */
function ext_product_field_attach_view_alter(&$output, $context)
{
  if ($context["entity_type"] == 'node' && $context["view_mode"] == 'full') {
    if (!empty($output["field_pd_related"]["#items"])) {
      foreach ($output["field_pd_related"]["#items"] as $index => $item) {
        $product_display_status = db_select('node', 'n')
          ->fields('n', ['status'])
          ->condition('n.nid', ext_product_get_product_display_by_product_id($item["product_id"]))
          ->execute()
          ->fetchField();
        if ($item['entity']->status == 0 || $product_display_status == 0) {
          unset($output["field_pd_related"][$index]);
          $output["field_pd_related"]["#items"][$index];
        }
      }
    }
  }
}


/**
 * Возвращает список product id помещенных в корзину пользователя
 * @param $uid
 * @return array|mixed
 */
function _get_order_product_ids($uid)
{
  $pids = &drupal_static(__FUNCTION__);

  // заполнить массив id товаров в корзине
  if (!$pids) {
    $pids = array();

    if ($order = commerce_cart_order_load($GLOBALS['user']->uid)) {
      $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
      foreach ($order_wrapper->commerce_line_items as $delta => $line_item_wrapper) {
        if (in_array($line_item_wrapper->type->value(), commerce_product_line_item_types())) {
          $pids[] = $line_item_wrapper->commerce_product->product_id->value();
        }
      }
    }
  }
  return $pids;
}
