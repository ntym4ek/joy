<?php

define('ADMIN_ROLE_ID', 3);
define('PRODUCT_MANAGER_ROLE_ID', 4);

/**
 * Implements hook_menu_alter().
 */
function ext_user_menu_alter(&$items)
{
    $items['user/register']['page arguments'] = array('ext_user_registration_wizard');
    $items['user/password']['page arguments'] = array('ext_user_user_pass_form');
}

/**
 * hook_module_implements_alter
 * change hook execution order, commerce_helper - last
 */
function ext_user_module_implements_alter(&$implementations, $hook)
{
    // Name of the hook.
    if (in_array($hook, ['form_alter'])) {
        // ext_user - last
        $module = 'ext_user';
        if (isset($implementations[$module])) {
            $group = $implementations[$module];
            unset($implementations[$module]);
            $implementations[$module] = $group;
        }
    }

//    if ($hook == 'commerce_order_presave') {
//        // ext_user - first
//        $module = 'ext_user';
//        $group = array($module => $implementations[$module]);
//        unset($implementations[$module]);
//        $implementations = $group + $implementations;
//    }
}

/**
 * Implements hook_views_api().
 */
function ext_user_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'ext_user') . '/views',
  );
}

/**
 * Implements hook_user_insert().
 */
function ext_user_user_insert( &$edit, &$account, $category = NULL )
{
    // при регистрации нового пользователя установить уникальное имя: Пользователь #uid
    $new_name = t('User ') . $account->uid;

    db_update('users')
        ->fields(array('name' => $new_name))
        ->condition('uid', $account->uid)
        ->execute();

    $edit['name'] = $new_name;
    $account->name = $new_name;

    // для пользователей с регистрацией по тлф почта не требуется
    // поэтому временный email стираем
    if ($account->mail == 'not@required.more') {
        db_update('users')
            ->fields(array('mail' => ''))
            ->condition('uid', $account->uid)
            ->execute();
        $account->mail = '';
    }

    // установить флаги рассылок для пользователя
    if ($flag = flag_get_flag('subscriptions')) {
        $flag->flag('flag', SUBSCRIPTION_NOTIFY_EMAIL, $account);
        $flag->flag('flag', SUBSCRIPTION_NOTIFY_SMS, $account);
        $flag->flag('flag', SUBSCRIPTION_PROMO_EMAIL, $account);
        $flag->flag('flag', SUBSCRIPTION_PROMO_SMS, $account);
    }

    // отправить СМС о регистрации
    mailer_send_sms('user_new', ['account' => $account]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_login_alter (&$form, $form_state)
{
    $form['#attributes']['class'][] = 'user-form-container';
    $form['name']['#prefix'] = '<div class="user-form">';
    if (isset($form['actions']['continue_button'])) {
        $form['user_links'] = $form['actions']['continue_button'];
        unset($form['actions']['continue_button']);
    } else {
        $form['user_links'] = ['#markup' => ''];
    }
    $form['actions']['#weight'] = '1';
    $form['actions']['submit']['#value'] = t('Login');

    $form['user_links']['#weight'] = '10';

    $form['preactions'] = array(
        '#type' => 'container',
        '#attributes' => ['class' => ['form-subactions']],
    );

    $form['preactions']['forgot'] = ['#markup' => '<a href="/user/password">' . t('I forgot my password') .  '</a>'];
    $form['user_links']['#prefix'] = '</div>' .
        '<div class="user-links">';

    $form['user_links']['#suffix'] = '';
    if (isset($form['user_links']['#name'])) {
        $form['user_links']['#prefix'] .= '<h2>' . t('Guest checkout') . '</h2><p>' . t('Continue as guest. No sign up required.') . '</p>';
        $form['user_links']['#suffix'] = '<div class="divider"></div>';
    }
    $form['user_links']['#suffix'] .=    '<h2>' . t('New Customer') . '</h2>' .
        '<p>' . t('Create an account for a faster, easier checkout.') . '</p>' .
        '<div class="form-actions"><a href="/user/register" class="btn btn-default">' . t('Sign up') . '</a></div>' .
        '</div>';


    $form['name']['#description'] = '';
    $form['pass']['#description'] = '';

    // вход по email/phone
    if (variable_get('email_registration', false) || variable_get('phone_registration', false)) {
        if (variable_get('email_registration', false) && variable_get('phone_registration', false)) $form['name']['#title'] = t('E-Mail or mobile phone');
        elseif (variable_get('email_registration', false)) $form['name']['#title'] = t('E-Mail');
        elseif (variable_get('phone_registration', false)) $form['name']['#title'] = t('Mobile phone');

        $form['name']['#element_validate'][] = 'ext_user_login_name_validate';
    }
}

/**
 * Form element validation handler for the user login form.
 *
 * Allows users to authenticate by username OR email.
 */
function ext_user_login_name_validate($form, &$form_state)
{
  $user = ext_user_user_load_by_login($form_state['values']['name']);
  if ($user->uid) {
    $form_state['values']['name'] = $user->name;
    return TRUE;
  }

  return FALSE;
}


/**
 * Загрузить пользователя по указанному логину
 * @param $login
 *
 * @return object
 */
function ext_user_user_load_by_login($login)
{
  // Try loading by email.
  if ($user = user_load_by_mail($login)) {
    return $user;
  }

  // Try loading by phone.
  if ($user = ext_user_user_load_by_phone($login)) {
    return $user;
  }

  // Try loading by username.
  if ($user = user_load_by_name($login)) {
    return $user;
  }
  return user_load(0);
}

function ext_user_user_load_by_phone($phone)
{
  $phone = ext_user_normalize_phone($phone);
  $uid = 0;
  if (ext_user_valid_phone($phone)) {
    $query = db_select('users', 'u');
    $query->innerJoin('field_data_field_phone', 'fp', 'fp.entity_id = u.uid');
    $query->condition('fp.field_phone_value', $phone);
    $query->addField('u', 'uid');
    if ($result = $query->execute()->fetchField()) {
      $uid = $result;
    }
  }
  return user_load($uid);
}

/**
 * Normalize phone to standart view
 * @param $phone
 *
 * @return string|string[]|null
 */
function ext_user_normalize_phone($phone)
{
    // убираем всё лишнее кроме цифр
    $phone = preg_replace('/[^\d]/', '', trim($phone));
    // заменить первую 8 на 7
    $phone = preg_replace('/8(\d{10})/', '7$1', $phone);
    return $phone;
}

/**
 * Format phone to user view
 * @param $phone
 *
 * @return string
 */
function ext_user_format_phone($phone)
{
  // форматируем - +7-xxx-xxx-xx-xx
  $phone = preg_replace('/(\d)(\d\d\d)(\d\d\d)(\d\d)(\d\d)/', '+$1 $2 $3-$4-$5', trim($phone));

  return $phone;
}

function ext_user_valid_phone($phone)
{
    // номер правильный, если имеет минимум 11 цифр
    preg_match('/\d+(\d{10})$/', ext_user_normalize_phone($phone), $match);

    return !empty($match[1]);
}

/**
 * menu callback
 * Замена стандартной формы user_register_form
 * для добавления второго шага при регистрации:
 * страница подтверждения телефона кодом из СМС
 */
function ext_user_registration_wizard($form, &$form_state)
{
    // начальная настройка двухстраничной формы
    if (empty($form_state['step'])) {
        $form_state['step'] = 1;
        $form_state['step_information'] = array(
            1 => ['form' => 'user_register_form'],
            2 => ['form' => 'ext_user_registration_code_form'],
        );
    }
    $step = &$form_state['step'];

    // форма согласно текущего шага
    $form = $form_state['step_information'][$step]['form']($form, $form_state);

    // альтер формы регистрации, т.к. при таком вызове он не срабатывает
    if ($step == 1) {
        ext_user_form_user_register_form_alter($form, $form_state);
    }

    return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_register_form_alter (&$form, &$form_state)
{
    // если активирована регистрация по email и\или телефону
    // изменить заголовок поля и убрать дублирующие поля
    $enabled_email = variable_get('email_registration', false);
    $enabled_phone = variable_get('phone_registration', false);
    if ($enabled_email || $enabled_phone) {
        if ($enabled_email && $enabled_phone) {
            $form['account']['name']['#title'] = t('E-Mail or mobile phone');
            if (isset($form['field_phone'])) $form['field_phone']['#access'] = false;
        }
        elseif ($enabled_email) $form['account']['name']['#title'] = t('E-Mail');
        elseif ($enabled_phone) $form['account']['name']['#title'] = t('Mobile phone');

        if ($enabled_phone) $form['account']['mail']['#value'] = 'not@required.more';

        $form['account']['mail']['#access'] = false;
        $form['account']['name']['#element_validate'][] = 'ext_user_register_name_validate';
        $form['account']['name']['#description'] = '';

        $form['account']['name']['#default_value'] = empty($form_state['values']['name']) ? '' : $form_state['values']['name'];
        $form['field_name_first']['und'][0]['value']['#default_value'] = empty($form_state['values']['field_name_first']['und'][0]['value']) ? '' : $form_state['values']['field_name_first']['und'][0]['value'];
        $form['field_surname']['und'][0]['value']['#default_value'] = empty($form_state['values']['field_surname']['und'][0]['value']) ? '' : $form_state['values']['field_surname']['und'][0]['value'];
    }

    $form['account']['pass']['#title'] = t('Password');
    $form['account']['pass']['#type'] = 'password';
    $form['account']['pass']['#description'] = '';

    // меняем оформление формы
    if (isset($form['actions']['continue_button'])) {
        $form['user_links'] = $form['actions']['continue_button'];
        unset($form['actions']['continue_button']);
    } else {
        $form['user_links'] = ['#markup' => ''];
    }
    $form['#attributes']['class'][] = 'user-form-container';
    $form['prefix'] = [
        '#markup' => '<div class="user-form">',
        '#weight' => -99,
    ];

    $form['actions']['submit']['#value'] = t('Create an account');

    if (isset($form['field_phone'])) $form['field_phone']['#weight'] = 3;
    if (isset($form['fz152_agreement'])) $form['fz152_agreement']['#weight'] = 4;
    $form['actions']['#weight'] = 8;
    $form['captcha']['#weight'] = 9;
    $form['user_links']['#weight'] = 10;

    if (isset($form['captcha']))    $form['captcha']['#suffix'] = '</div><div class="user-links">';
    else                            $form['actions']['#suffix'] = '</div><div class="user-links">';

    if (isset($form['user_links']['#name'])) {
        $form['user_links']['#prefix'] = '<h2>' . t('Guest checkout') . '</h2><p>' . t('Continue as guest. No sign up required.') . '</p>';
    }
    $form['user_links']['#suffix'] = '<h2>' . t('Login') . '</h2>' .
        '<p>' . t('Already have JOY account.') . '</p>' .
        '<div class="form-actions"><a href="/user/login" class="btn btn-default">' . t('Sign in') . '</a></div>' .
        '</div>';

    $form['#validate'][] = 'ext_user_user_register_validate';
}

/**
 * form element validation callback
 */
function ext_user_register_name_validate($element, &$form_state)
{
    $enabled_email = variable_get('email_registration', false);
    $its_email = $enabled_email && valid_email_address($form_state['values']['name']);
    $enabled_phone = variable_get('phone_registration', false);
    $its_phone = $enabled_phone && ext_user_valid_phone($form_state['values']['name']);

    // проверка правильности ввода email или телефона
    if (!$its_email && !$its_phone) {
        if ($enabled_email & $enabled_phone)    form_set_error('name', t('Uncorrect E-Mail or mobile phone number'));
        if ($enabled_email)                     form_set_error('name', t('Uncorrect E-Mail'));
        if ($enabled_phone)                     form_set_error('name', t('Uncorrect mobile phone number'));
    }

    // проверка на наличие тлф в БД
    if (($account = ext_user_user_load_by_phone($form_state['values']['name'])) && $account->uid) {
        form_set_error('name', t('This phone number is already registered.'));
    }

    if ($its_email) $form_state['values']['mail'] = $form_state['values']['name'];
    if ($its_phone) $form_state['values']['field_phone']['und'][0]['value'] = ext_user_normalize_phone($form_state['values']['name']);

    return true;
}

function ext_user_user_register_validate(&$form, &$form_state)
{
    // если регистрация по номеру, то заменить стандартный сабмит
    // на отправку и проверку кода подтверждения
    if (!empty($form_state['values']['field_phone']['und'][0]['value'])) {
        if ($index = array_search('user_register_submit', $form['#submit'])) {
            $form['#submit'][$index] = 'ext_user_registration_wizard_check_code';
        }
    }
}


/**
 * submit callback, когда введен телефон
 * отправка код проверки телефона и переход к странице проверки
 */
function ext_user_registration_wizard_check_code($form, &$form_state)
{
    // послать СМС с кодом
    $code = rand(1001, 9998);
    $phone = $form_state['values']['field_phone']['und'][0]['value'];
    if (mailer_send_sms('user_code', ['phone' => $phone, 'code' => $code])) {
        $form_state['user_code'] = ['code' => $code, 'sent_time' => time()];

        $step = &$form_state['step'];
        $form_state['step_information'][$step]['stored_values'] = $form_state['values'];
        $form_state['step_information'][$step]['stored_form'] = $form;
        $step++;
        $form_state['rebuild'] = TRUE;
    }
    else {
        form_set_error('', 'Сервис отправки SMS пока недоступен. Попробуйте позже или зарегистрируйтесь с помощью E-Mail.');
    }
}



/**
 *  Шаг 2
 *  форма ввода проверочного кода
 */
function ext_user_registration_code_form($form, &$form_state)
{
    $form['#attributes']['class'][] = 'user-form-container';
    $form['prefix'] = [
        '#markup' => '<div class="user-form">',
        '#weight' => -99,
    ];

    $form['code'] = array(
        '#type' => 'textfield',
        '#title' => 'Код подтверждения',
        '#description' => 'Введите код, полученный в SMS',
    );

    $form['subactions'] = array(
        '#type' => 'container',
        '#attributes' => ['class' => ['form-subactions']]
    );
    $form['subactions']['prev'] = array(
        '#type' => 'submit',
        '#value' => t('Back'),
        '#name' => 'prev',
        '#attributes' => ['class' => ['btn', 'btn-link']],
        '#submit' => array('ext_user_registration_wizard_prev'),
        '#limit_validation_errors' => array(),
    );
    $form['subactions']['repeat'] = array(
        '#type' => 'submit',
        '#value' => t('Repeat SMS'),
        '#name' => 'repeat',
        '#attributes' => ['class' => ['btn', 'btn-link']],
        '#validate' => array('ext_user_registration_wizard_repeat_validate', 'ifec_form_validator'),
        '#submit' => array('ext_user_registration_wizard_repeat'),
        '#limit_validation_errors' => array(['code']),
    );

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['finish'] = array(
        '#type' => 'submit',
        '#value' => t('Confirm'),
        '#attributes' => ['class' => ['btn', 'btn-default']],
    );
    $form['actions']['#suffix'] = '</div>';

    $form['#validate'][] = 'ext_user_registration_code_form_validate';

    // при вводе правильного кода - зарегистрировать пользователя
    $form['#submit'][] = 'user_register_submit';

    return $form;
}

/**
 * validate callback формы ввода кода
 */
function ext_user_registration_wizard_repeat_validate(&$form, &$form_state)
{
    if (time() - $form_state['user_code']['sent_time'] < 60) {
        form_set_error('code', 'Новое смс можно будет отправить через ' . (60 - (time() - $form_state['user_code']['sent_time'])) . ' с'); return false;
    }
    return true;
}

/**
 * validate callback формы ввода кода
 */
function ext_user_registration_code_form_validate(&$form, &$form_state)
{
        // проверка введенного кода
    if (empty($form_state['values']['code'])) { form_set_error('code', 'Введите код из СМС'); return false; }
    if ($form_state['values']['code'] != $form_state['user_code']['code']) { form_set_error('code', 'Неверный код'); return false; }

    // восстанавливаем значения формы регистрации
    $form_state['values'] = $form_state['step_information'][1]['stored_values'];
    // user_registration_submit требует наличия значения в $form['#user']
    $form['#user'] = $form_state['step_information'][1]['stored_form']['#user'];

    return true;
}

/**
 * prev button callback
 */
function ext_user_registration_wizard_prev($form, &$form_state)
{
    $step = &$form_state['step'];
    $step--;
    $form_state['values'] = $form_state['step_information'][$step]['stored_values'];
    $form_state['rebuild'] = TRUE;
}

/**
 * repeat button callback
 */
function ext_user_registration_wizard_repeat($form, &$form_state)
{
    $code = rand(1001, 9998);
    $phone = $form_state['step_information'][1]['stored_values']['field_phone']['und'][0]['value'];
    if (mailer_send_sms('user_code', ['phone' => $phone, 'code' => $code])) {
        $form_state['user_code'] = [
            'code' => $code,
            'sent_time' => time(),
        ];
        drupal_set_message('Новое СМС с кодом отправлено.');
    }

    $form_state['rebuild'] = TRUE;
}



/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_profile_form_alter (&$form, $form_state)
{
  if ($GLOBALS['user']->uid != 1) {
    $form["account"]["name"]["#access"] = false;
      $form['timezone']['#access'] = false;
      $form['locale']['#access'] = false;
      $form['mimemail']['#access'] = false;
      $form['account']['#prefix'] = '<br /><h4>' . t('Account info') . '</h4>';
      $form['field_user_surname']['#prefix'] = '<h4>' . t('Personal info') . '</h4>';
      $form['flag']['#title'] = 'Подписки';
      // не даём менять телефон пользователю
      if (!_user_has_role('product manager') && ext_user_valid_phone($form["field_phone"]["und"][0]["value"]["#default_value"])) {
        $form["field_phone"]["und"][0]["#disabled"] = true;
      }
  }

  $form['field_phone']['#element_validate'][] = 'ext_user_profile_phone_validate';

  // для манагеров, не проверять наличие почты
  if (user_has_role(PRODUCT_MANAGER_ROLE_ID, $GLOBALS['user']) || user_has_role(ADMIN_ROLE_ID, $GLOBALS['user'])) {
    $form['account']['mail']['#required'] = false;
    if ($form["#validate"][0] == 'user_account_form_validate') {
      array_shift($form["#validate"]);
    }
  }
}

function ext_user_profile_phone_validate($element, &$form_state)
{
    if ($phone = $form_state['values']['field_phone']['und'][0]['value']) {
      $phone = ext_user_normalize_phone($phone);
      // проверка на валидность
      if (!ext_user_valid_phone($phone)) {
        form_set_error('field_phone][und][0][value', t('Type valid phone number.')); return false;
      }
      // проверка на наличие тлф в БД
      $account = ext_user_user_load_by_phone($phone);
      if ($account->uid && $account->uid != $form_state["user"]->uid) {
          form_set_error('field_phone][und][0][value', t('This phone number is already registered.'));
      }
    }
}

/**
 * Implements hook_form_alter().
 */
function ext_user_form_user_admin_settings_alter(&$form, &$form_state)
{
    // add new registration methods
    $form['registration_method'] = array(
        '#type' => 'fieldset',
        '#title' => t('Registration methods'),
        '#weight' => 1,
    );
    $form['registration_method']['email_registration'] = array(
        '#type' => 'checkbox',
        '#title' => t('E-Mail registration'),
        '#description' => t('Add registration and login with E-Mail.'),
        '#default_value' => variable_get('email_registration', 0),
        '#weight' => 0,
    );

    $form['registration_method']['phone_registration'] = array(
        '#type' => 'checkbox',
        '#title' => t('Phone registration'),
        '#description' => t('Add registration and login with phone.'),
        '#default_value' => variable_get('phone_registration', 0),
        '#weight' => 1,
    );

    $form['email_title']['#weight'] = 10;
    $form['email']['#weight'] = 11;
}

/**
 * ----------------- Оформление ЛК ---------------------------------------------
 */

/**
 * Implements hook_preprocess_page
 */
function ext_user_preprocess_page(&$vars)
{
  if (in_array(menu_get_item()['path'], ['user/%', 'user/%/view'])) {
    drupal_set_title(t('Account'));
  }
}

/**
 * Implements hook_user_view().
 */
function ext_user_user_view($account, $view_mode) {
  global $user;
  // блок желаний в аккаунте
  if (user_access('administer wish lists') || (user_access('manage own wish list') && $user->uid == $account->uid)) {
    $count = 0;
    $wishlist_user = menu_get_object('user');
    if ($wishlist = commerce_wishlist_order_load($wishlist_user->uid)) {
      $wishlist_wrapper = entity_metadata_wrapper('commerce_order', $wishlist);
      $count = commerce_line_items_quantity($wishlist_wrapper->commerce_line_items, commerce_product_line_item_types());
    }

    $links = array();
    if (user_access('manage own wish list') && $user->uid == $account->uid) {
      $links['wishlist-view'] = array(
        'title' => t('View wishlist'),
        'href' => 'user/' . $account->uid . '/wishlist',
      );
    }

    $account->content['wishlist'] = array(
      'title' => array('#markup' => 'Отложенные товары'),
      'counter' => array('#markup' => $count),
      'actions' => array(
        '#theme' => 'links',
        '#links' => $links,
        '#attributes' => array('class' => array('links')),
      )
    );
  }

  // количество заказов
  if (user_access('edit any commerce_order entity') || (user_access('view own commerce_order entities') && $user->uid == $account->uid)) {
    $count = db_select('commerce_order', 'co')
      ->condition('co.uid', $account->uid)
      ->condition('co.status', ['pending', 'completed', 'processing'], 'IN')
      ->countQuery()
      ->execute()
      ->fetchField();

    $links = array();
    if (user_access('view own commerce_order entities') && $user->uid == $account->uid) {
      $links['order-view'] = array(
        'title' => t('View orders'),
        'href' => 'user/' . $account->uid . '/orders',
      );
    }

    $account->content['orders'] = array(
      'title' => array('#markup' => 'Заказы'),
      'counter' => array('#markup' => $count),
      'actions' => array(
        '#theme' => 'links',
        '#links' => $links,
        '#attributes' => array('class' => array('links')),
      )
    );
  }
}

/**
 * Implements hook_user_view_alter().
 */
function ext_user_user_view_alter(&$build)
{
    $build["userpoints"]["title"]['#markup'] = strip_tags($build["userpoints"]["title"]['#markup']);
    $build["userpoints"]["list"] = ['#markup' => userpoints_get_current_points($build["#account"]->uid, 0)];
    $build["userpoints"]["actions"]["#links"]["userpoints-view"]["href"] = 'user/' . $build["#account"]->uid . '/points';
}

/**
 * на базе user_authenticate

 * Try to validate the user's login credentials locally.
 *
 * @param $name
 *   User name, phone or email to authenticate.
 * @param $password
 *   A plain-text password, such as trimmed text from form values.
 * @return
 *   The user's uid on success, or FALSE on failure to authenticate.
 */
function ext_user_user_authenticate($name, $password)
{
  $uid = FALSE;
  if (!empty($name) && strlen(trim($password)) > 0) {
    $account = ext_user_user_load_by_login($name);
    if ($account->uid) {
      // Allow alternate password hashing schemes.
      require_once DRUPAL_ROOT . '/' . variable_get('password_inc', 'includes/password.inc');
      if (user_check_password($password, $account)) {
        // Successful authentication.
        $uid = $account->uid;

        // Update user to new password scheme if needed.
        if (user_needs_new_hash($account)) {
          user_save($account, array('pass' => $password));
        }
      }
    }
  }
  return $uid;
}

/**
 * ---------------------------- Password recovery ------------------------------
 */

/**
 * hook_form_alter
 */
function ext_user_user_pass_form($form, &$form_state)
{
  global $user;

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('E-Mail or phone number'),
    '#size' => 60,
    '#maxlength' => max(USERNAME_MAX_LENGTH, EMAIL_MAX_LENGTH),
    '#required' => TRUE,
    '#default_value' => isset($_GET['name']) ? $_GET['name'] : '',
  );

  // Allow logged in users to request this also.
  if ($user->uid > 0) {
    $user_wr = entity_metadata_wrapper('user', $user);
    $login = $user->mail;
    if (!empty($user_wr->field_phone->value())) {
      $login = $user_wr->field_phone->value();
    }

    if ($login) {
      $form['name']['#type'] = 'value';
      $form['name']['#value'] = $login;
      $form['mail'] = [
        '#prefix' => '<p>',
        '#markup' => t('New password will be sent to %login. You must log in with new password.', ['%login' => $login]),
        '#suffix' => '</p>',
      ];
    }
  }
  $form["#validate"][] = 'ext_user_user_pass_validate';
  $form["#submit"][] = 'ext_user_user_pass_submit';
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('E-mail new password'));

  return $form;
}

/**
 * Form validation handler for user_pass().
 */
function ext_user_user_pass_validate($form, &$form_state)
{
  $login = trim($form_state['values']['name']);
  // Try to load by email.
  $account = ext_user_user_load_by_login($login);
  if (!empty($account->uid)) {
    form_set_value(array('#parents' => array('account')), $account, $form_state);
  }
  else {
    form_set_error('name', t('Sorry, there is no user with e-mail or phone %name in our base.', array('%name' => $login)));
  }
}

/**
 * Form submission handler for user_pass().
 */
function ext_user_user_pass_submit($form, &$form_state)
{
  $account = $form_state['values']['account'];

  // определить как зарегистрирован
  $method = '';
  if (ext_user_valid_phone($form_state['values']['name'])) {
    $method = 'phone';
  }
  elseif ((valid_email_address($form_state['values']['name']))) {
    $method = 'email';
  }

  if ($method) {
    $pass = user_password(6);
    if (user_save($account, ['pass' => $pass])) {
      if ($method == 'phone') {
        mailer_send_sms('user_pass', ['phone' => $form_state['values']['name'], 'pass' => $pass]);
      }
      if ($method == 'email') {
        drupal_mail('mailer', 'user_pass', $form_state['values']['name'], user_preferred_language($account), ['pass' => $pass]);
      }
    }
  }
  else {
    watchdog('user', 'Неудачная попытка восстановления пароля по логину %name.', array('%name' => $form_state['values']['name']), WATCHDOG_ERROR);
  }

  drupal_set_message(t('New password sent.'));

  $form_state['redirect'] = 'user';
  return;
}

/**
 * ---------------------------- Токен города пользователя ------------------------
 */

/**
 * Provide information about our custom placeholder/token.
 *
 * @see http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_token_info/7
 * @see http://api.lullabot.com/token_example_token_info/7
 * @return array
 *   An associative array of available tokens and token types.
 */
function ext_user_token_info()
{
  $info['tokens']['user']['city'] = array(
    'name' => t('City'),
    'description' => t('User city from cookies'),
  );
  return $info;
}

/**
 * Provide replacement values for placeholder tokens.
 *
 * @see http://api.drupal.org/api/drupal/modules--system--system.api.php/function/hook_tokens/7
 * @see http://api.lullabot.com/token_example_tokens/7
 * @param string $type
 *   The machine-readable name of the type (group) of token being replaced, such
 *   as 'node', 'user', or another type defined by a hook_token_info()
 *   implementation.
 * @param array $tokens
 *   An array of tokens to be replaced. The keys are the machine-readable token
 *   names, and the values are the raw [type:token] strings that appeared in the
 *   original text.
 * @param array $data (optional)
 *   An associative array of data objects to be used when generating replacement
 *   values, as supplied in the $data parameter to token_replace().
 * @param array $options (optional)
 *   An associative array of options for token replacement; see token_replace()
 *   for possible values.
 * @return array
 *   An associative array of replacement values, keyed by the raw [type:token]
 *   strings from the original text.
 */
function ext_user_tokens($type, $tokens, array $data = array(), array $options = array())
{
  $replacements = array();

  if ($type == 'user' && !empty($data['user'])) {

    foreach ($tokens as $name => $original) {
      switch ($name) {
        case 'city':
          if (!empty($_COOKIE["user_region"])) {
            $user_region = json_decode($_COOKIE["user_region"], true);
            $replacements[$original] = filter_xss($user_region["data"]["city"]);
          }
          break;
      }
    }
  }

  return $replacements;
}


/**
 * ---------------------------- Вспомогательные функции ------------------------
 */

/**
 * Информация о пользователе, опционально включая адрес из последнего заказа
 * @param $uid
 * @param bool|int $from_order нужно ли брать информацию из последнего заказа или заданного
 *
 * @return array|mixed
 */
function ext_user_get_user_info($uid, $from_order = false)
{
  $data = &drupal_static(__FUNCTION__);
  if (isset($data)) {
    return $data;
  }

  $data = [];

  if ($uid) {
    // проверить наличие заказов и взять из последнего или заданного в $from_order
    $order_id = FALSE;
    if ($from_order === TRUE) {
      $order_id = db_select('commerce_order', 'co')
        ->condition('co.uid', $uid)
        ->condition('co.status', ['pending', 'completed', 'processing'], 'IN')
        ->fields('co', ['order_id'])
        ->orderBy('co.order_id', 'DESC')
        ->execute()
        ->fetchField();
    }
    elseif (is_numeric($from_order)) {
      $order_id = $from_order;
    }
    if ($order_id) {
      $order_wr = entity_metadata_wrapper('commerce_order', $order_id);
      if ($order_wr->commerce_customer_shipping->value()) {
        $shipping_wr = $order_wr->commerce_customer_shipping;
        $data['address']['zip'] = $shipping_wr->field_zipcode->value();
        $data['address']['address'] = $shipping_wr->field_addr->value();
        $data['address']['office'] = $shipping_wr->field_office->value();
        $data['address']['callme'] = $shipping_wr->field_callme->value();
        $data['name']['fullname'] = $order_wr->field_username->value();
        $data['email'] = $order_wr->mail->value();
        $data['phone'] = ext_user_normalize_phone($order_wr->field_phone->value());
      }
    }

    // проверить аккаунт
    if (!$data) {
      $user_wr = entity_metadata_wrapper('user', $uid);
      $data['name']['surname'] = $user_wr->field_surname->value();
      $data['name']['name'] = $user_wr->field_name_first->value();
      $data['name']['name2'] = $user_wr->field_name_second->value();
      $data['name']['fullname'] = trim(implode(' ', $data['name']));
      $data['name']['realname'] = $user_wr->value()->realname;
      $data['phone'] = ext_user_normalize_phone($user_wr->field_phone->value());
      $data['email'] = $user_wr->mail->value();
      $data['uid'] = $user_wr->uid->value();
    }
  }

  return $data;
}


