<?php

require 'includes/ext_user.sms_gate.inc';

/**
 * Implements hook_menu_alter().
 */
function ext_user_menu_alter(&$items)
{
    $items['user/register']['page arguments'] = array('ext_user_registration_wizard');
    return $items;
}

/**
 * hook_module_implements_alter
 * change hook execution order, commerce_helper - last
 */
function ext_user_module_implements_alter(&$implementations, $hook)
{
    // Name of the hook.
    if (in_array($hook, ['form_alter'])) {
        // ext_user - last
        $module = 'ext_user';
        if (isset($implementations[$module])) {
            $group = $implementations[$module];
            unset($implementations[$module]);
            $implementations[$module] = $group;
        }
    }

//    if ($hook == 'commerce_order_presave') {
//        // ext_user - first
//        $module = 'ext_user';
//        $group = array($module => $implementations[$module]);
//        unset($implementations[$module]);
//        $implementations = $group + $implementations;
//    }
}


/**
 * Implements hook_user_insert().
 */
function ext_user_user_insert( &$edit, &$account, $category = NULL )
{
    // при регистрации нового пользователя установить уникальное имя: Пользователь #uid
    $new_name = t('User ') . $account->uid;

    db_update('users')
        ->fields(array('name' => $new_name))
        ->condition('uid', $account->uid)
        ->execute();

    $edit['name'] = $new_name;
    $account->name = $new_name;

    // для пользователей с регистрацией по тлф почта не требуется
    // поэтому временный email стираем
    if ($account->mail == 'not@required.more') {
        db_update('users')
            ->fields(array('mail' => ''))
            ->condition('uid', $account->uid)
            ->execute();
        $account->mail = '';
    }

    // установить флаг рассылки для пользователя
    $flag = flag_get_flag('email_marketing');
    if ($flag) {
        $flag->flag('flag', $account->uid, $account);
    }

    // отправить СМС о регистрации
    ext_user_sms_gate_sms('user_new', ['account' => $account]);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_login_alter (&$form, $form_state)
{
    $form['#attributes']['class'][] = 'user-form-container';
    $form['name']['#prefix'] = '<div class="user-form">';
    if (isset($form['actions']['continue_button'])) {
        $form['user_links'] = $form['actions']['continue_button'];
        unset($form['actions']['continue_button']);
    } else {
        $form['user_links'] = ['#markup' => ''];
    }
    $form['actions']['#weight'] = '1';
    $form['actions']['submit']['#value'] = t('Login');

    $form['user_links']['#weight'] = '10';

    $form['preactions'] = array(
        '#type' => 'container',
        '#attributes' => ['class' => ['form-subactions']],
    );

    $form['preactions']['forgot'] = ['#markup' => '<a href="/user/password">' . t('I forgot my password') .  '</a>'];
    $form['user_links']['#prefix'] = '</div>' .
        '<div class="user-links">';

    $form['user_links']['#suffix'] = '';
    if (isset($form['user_links']['#name'])) {
        $form['user_links']['#prefix'] .= '<h2>' . t('Guest checkout') . '</h2><p>' . t('Continue as guest. No sign up required.') . '</p>';
        $form['user_links']['#suffix'] = '<div class="divider"></div>';
    }
    $form['user_links']['#suffix'] .=    '<h2>' . t('New Customer') . '</h2>' .
        '<p>' . t('Create an account for a faster, easier checkout.') . '</p>' .
        '<div class="form-actions"><a href="/user/register" class="btn btn-default">' . t('Sign up') . '</a></div>' .
        '</div>';


    $form['name']['#description'] = '';
    $form['pass']['#description'] = '';

    // вход по email/phone
    if (variable_get('email_registration', false) || variable_get('phone_registration', false)) {
        if (variable_get('email_registration', false) && variable_get('phone_registration', false)) $form['name']['#title'] = t('E-Mail or mobile phone');
        elseif (variable_get('email_registration', false)) $form['name']['#title'] = t('E-Mail');
        elseif (variable_get('phone_registration', false)) $form['name']['#title'] = t('Mobile phone');

        $form['name']['#element_validate'][] = 'ext_user_login_name_validate';
    }
}

/**
 * Form element validation handler for the user login form.
 *
 * Allows users to authenticate by username OR email.
 */
function ext_user_login_name_validate($form, &$form_state)
{
    $name_input = $form_state['values']['name'];

    // Try loading by email.
    if ($user = user_load_by_mail($name_input)) {
        // Set the username for further validation.
        $form_state['values']['name'] = $user->name;
        return TRUE;
    }

    // Try loading by phone.
    if ($user = ext_user_user_load_by_phone($name_input)) {
        $form_state['values']['name'] = $user->name;
        return TRUE;
    }

    // Try loading by username.
    if ($user = user_load_by_name($name_input)) {
        return TRUE;
    }

    return FALSE;
}

function ext_user_user_load_by_phone($phone)
{
    $phone = ext_user_normalize_phone($phone);
    if (ext_user_valid_phone($phone)) {
        $query = db_select('users', 'u');
        $query->innerJoin('field_data_field_phone', 'fp', 'fp.entity_id = u.uid');
        $query->condition('fp.field_phone_value', $phone);
        $query->addField('u', 'uid');
        if ($uid = $query->execute()->fetchField()) {
            $user = user_load($uid);
            return $user;
        }
    }
    return false;
}

/**
 * Normalize phone to standart view
 * @param $phone
 *
 * @return string|string[]|null
 */
function ext_user_normalize_phone($phone)
{
    // убираем всё лишнее кроме цифр
    $phone = preg_replace('/[^\d]/', '', $phone);
    // заменить первую 8 на 7
    $phone = preg_replace('/8(\d{10})/', '7$1', $phone);
    return $phone;
}

function ext_user_valid_phone($phone)
{
    // номер правильный, если имеет минимум 11 цифр
    preg_match('/\d+(\d{10})$/', ext_user_normalize_phone($phone), $match);

    return !empty($match[1]);
}

/**
 * menu callback
 * Замена стандартной формы user_register_form
 * для добавления второго шага при регистрации:
 * страница подтверждения телефона кодом из СМС
 */
function ext_user_registration_wizard($form, &$form_state)
{
    // начальная настройка двухстраничной формы
    if (empty($form_state['step'])) {
        $form_state['step'] = 1;
        $form_state['step_information'] = array(
            1 => ['form' => 'user_register_form'],
            2 => ['form' => 'ext_user_registration_code_form'],
        );
    }
    $step = &$form_state['step'];

    // форма согласно текущего шага
    $form = $form_state['step_information'][$step]['form']($form, $form_state);

    // альтер формы регистрации, т.к. при таком вызове он не срабатывает
    if ($step == 1) {
        ext_user_form_user_register_form_alter($form, $form_state);
    }

    return $form;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_register_form_alter (&$form, &$form_state)
{
    // если активирована регистрация по email и\или телефону
    // изменить заголовок поля и убрать дублирующие поля
    $enabled_email = variable_get('email_registration', false);
    $enabled_phone = variable_get('phone_registration', false);
    if ($enabled_email || $enabled_phone) {
        if ($enabled_email && $enabled_phone) {
            $form['account']['name']['#title'] = t('E-Mail or mobile phone');
            if (isset($form['field_phone'])) $form['field_phone']['#access'] = false;
        }
        elseif ($enabled_email) $form['account']['name']['#title'] = t('E-Mail');
        elseif ($enabled_phone) $form['account']['name']['#title'] = t('Mobile phone');

        if ($enabled_phone) $form['account']['mail']['#value'] = 'not@required.more';

        $form['account']['mail']['#access'] = false;
        $form['account']['name']['#element_validate'][] = 'ext_user_register_name_validate';
        $form['account']['name']['#description'] = '';

        $form['account']['name']['#default_value'] = empty($form_state['values']['name']) ? '' : $form_state['values']['name'];
        $form['field_name_first']['und'][0]['value']['#default_value'] = empty($form_state['values']['field_name_first']['und'][0]['value']) ? '' : $form_state['values']['field_name_first']['und'][0]['value'];
        $form['field_surname']['und'][0]['value']['#default_value'] = empty($form_state['values']['field_surname']['und'][0]['value']) ? '' : $form_state['values']['field_surname']['und'][0]['value'];
    }

    $form['account']['pass']['#title'] = t('Password');
    $form['account']['pass']['#type'] = 'password';
    $form['account']['pass']['#description'] = '';

    // меняем оформление формы
    if (isset($form['actions']['continue_button'])) {
        $form['user_links'] = $form['actions']['continue_button'];
        unset($form['actions']['continue_button']);
    } else {
        $form['user_links'] = ['#markup' => ''];
    }
    $form['#attributes']['class'][] = 'user-form-container';
    $form['prefix'] = [
        '#markup' => '<div class="user-form">',
        '#weight' => -99,
    ];

    $form['actions']['submit']['#value'] = t('Create an account');

    if (isset($form['field_phone'])) $form['field_phone']['#weight'] = 3;
    if (isset($form['fz152_agreement'])) $form['fz152_agreement']['#weight'] = 4;
    $form['actions']['#weight'] = 8;
    $form['captcha']['#weight'] = 9;
    $form['user_links']['#weight'] = 10;

    if (isset($form['captcha']))    $form['captcha']['#suffix'] = '</div><div class="user-links">';
    else                            $form['actions']['#suffix'] = '</div><div class="user-links">';

    if (isset($form['user_links']['#name'])) {
        $form['user_links']['#prefix'] = '<h2>' . t('Guest checkout') . '</h2><p>' . t('Continue as guest. No sign up required.') . '</p>';
    }
    $form['user_links']['#suffix'] = '<h2>' . t('Login') . '</h2>' .
        '<p>' . t('Already have JOY account.') . '</p>' .
        '<div class="form-actions"><a href="/user/login" class="btn btn-default">' . t('Sign in') . '</a></div>' .
        '</div>';

    $form['#validate'][] = 'ext_user_user_register_validate';
}

/**
 * form element validation callback
 */
function ext_user_register_name_validate($element, &$form_state)
{
    $enabled_email = variable_get('email_registration', false);
    $its_email = $enabled_email && valid_email_address($form_state['values']['name']);
    $enabled_phone = variable_get('phone_registration', false);
    $its_phone = $enabled_phone && ext_user_valid_phone($form_state['values']['name']);

    // проверка правильности ввода email или телефона
    if (!$its_email && !$its_phone) {
        if ($enabled_email & $enabled_phone)    form_set_error('name', t('Uncorrect E-Mail or mobile phone number'));
        if ($enabled_email)                     form_set_error('name', t('Uncorrect E-Mail'));
        if ($enabled_phone)                     form_set_error('name', t('Uncorrect mobile phone number'));
    }

    // проверка на наличие тлф в БД
    if (ext_user_user_load_by_phone(ext_user_normalize_phone($form_state['values']['name']))) {
        form_set_error('name', t('This phone number is already registered.'));
    }

    if ($its_email) $form_state['values']['mail'] = $form_state['values']['name'];
    if ($its_phone) $form_state['values']['field_phone']['und'][0]['value'] = ext_user_normalize_phone($form_state['values']['name']);

    return true;
}

function ext_user_user_register_validate(&$form, &$form_state)
{
    // если регистрация по номеру, то заменить стандартный сабмит
    // на отправку и проверку кода подтверждения
    if (!empty($form_state['values']['field_phone']['und'][0]['value'])) {
        if ($index = array_search('user_register_submit', $form['#submit'])) {
            $form['#submit'][$index] = 'ext_user_registration_wizard_check_code';
        }
    }
}


/**
 * submit callback, когда введен телефон
 * отправка код проверки телефона и переход к странице проверки
 */
function ext_user_registration_wizard_check_code($form, &$form_state)
{
    // послать СМС с кодом
    $code = rand(1001, 9998);
    $phone = $form_state['values']['field_phone']['und'][0]['value'];
    if (ext_user_sms_gate_sms('user_code', ['phone' => $phone, 'code' => $code])) {
        $form_state['user_code'] = ['code' => $code, 'sent_time' => time(),];

        $step = &$form_state['step'];
        $form_state['step_information'][$step]['stored_values'] = $form_state['values'];
        $form_state['step_information'][$step]['stored_form'] = $form;
        $step++;
        $form_state['rebuild'] = TRUE;
    }
    else {
        form_set_error('', 'Сервис отправки SMS пока недоступен. Попробуйте позже или зарегистрируйтесь с помощью E-Mail.');
    }
}



/**
 *  Шаг 2
 *  форма ввода проверочного кода
 */
function ext_user_registration_code_form($form, &$form_state)
{
    $form['#attributes']['class'][] = 'user-form-container';
    $form['prefix'] = [
        '#markup' => '<div class="user-form">',
        '#weight' => -99,
    ];

    $form['code'] = array(
        '#type' => 'textfield',
        '#title' => 'Код подтверждения',
        '#description' => 'Введите код, полученный в SMS',
    );

    $form['subactions'] = array(
        '#type' => 'container',
        '#attributes' => ['class' => ['form-subactions']]
    );
    $form['subactions']['prev'] = array(
        '#type' => 'submit',
        '#value' => t('Back'),
        '#name' => 'prev',
        '#attributes' => ['class' => ['btn', 'btn-link']],
        '#submit' => array('ext_user_registration_wizard_prev'),
        '#limit_validation_errors' => array(),
    );
    $form['subactions']['repeat'] = array(
        '#type' => 'submit',
        '#value' => t('Repeat SMS'),
        '#name' => 'repeat',
        '#attributes' => ['class' => ['btn', 'btn-link']],
        '#validate' => array('ext_user_registration_wizard_repeat_validate', 'ifec_form_validator'),
        '#submit' => array('ext_user_registration_wizard_repeat'),
        '#limit_validation_errors' => array(['code']),
    );

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['finish'] = array(
        '#type' => 'submit',
        '#value' => t('Confirm'),
        '#attributes' => ['class' => ['btn', 'btn-default']],
    );
    $form['actions']['#suffix'] = '</div>';

    $form['#validate'][] = 'ext_user_registration_code_form_validate';

    // при вводе правильного кода - зарегистрировать пользователя
    $form['#submit'][] = 'user_register_submit';

    return $form;
}

/**
 * validate callback формы ввода кода
 */
function ext_user_registration_wizard_repeat_validate(&$form, &$form_state)
{
    if (time() - $form_state['user_code']['sent_time'] < 60) {
        form_set_error('code', 'Новое смс можно будет отправить через ' . (60 - (time() - $form_state['user_code']['sent_time'])) . ' с'); return false;
    }
    return true;
}

/**
 * validate callback формы ввода кода
 */
function ext_user_registration_code_form_validate(&$form, &$form_state)
{
        // проверка введенного кода
    if (empty($form_state['values']['code'])) { form_set_error('code', 'Введите код из СМС'); return false; }
    if ($form_state['values']['code'] != $form_state['user_code']['code']) { form_set_error('code', 'Неверный код'); return false; }

    // восстанавливаем значения формы регистрации
    $form_state['values'] = $form_state['step_information'][1]['stored_values'];
    // user_registration_submit требует наличия значения в $form['#user']
    $form['#user'] = $form_state['step_information'][1]['stored_form']['#user'];

    return true;
}

/**
 * prev button callback
 */
function ext_user_registration_wizard_prev($form, &$form_state)
{
    $step = &$form_state['step'];
    $step--;
    $form_state['values'] = $form_state['step_information'][$step]['stored_values'];
    $form_state['rebuild'] = TRUE;
}

/**
 * repeat button callback
 */
function ext_user_registration_wizard_repeat($form, &$form_state)
{
        $code = rand(1001, 9998);
        $phone = $form_state['step_information'][1]['stored_values']['field_phone']['und'][0]['value'];
        if (ext_user_sms_gate_sms('user_code', ['phone' => $phone, 'code' => $code])) {
            $form_state['user_code'] = [
                'code' => $code,
                'sent_time' => time(),
            ];
            drupal_set_message('Новое СМС с кодом отправлено.');
        }

        $form_state['rebuild'] = TRUE;
}



/**
 * Implements hook_form_FORM_ID_alter().
 */
function ext_user_form_user_profile_form_alter (&$form, $form_state)
{
    if ($GLOBALS['user']->uid != 1) {
        $form['timezone']['#access'] = false;
        $form['locale']['#access'] = false;
        $form['mimemail']['#access'] = false;
        $form['account']['#prefix'] = '<br /><h4>' . t('Account info') . '</h4>';
        $form['field_user_surname']['#prefix'] = '<h4>' . t('Personal info') . '</h4>';
        $form['flag']['#title'] = 'Подписки';
    }
    $form['account']['mail']['#required'] = false;
    $form['field_phone']['#element_validate'][] = 'ext_user_profile_phone_validate';
}

function ext_user_profile_phone_validate($element, &$form_state)
{
    if ($form_state['values']['field_phone']['und'][0]['value']) {
        // проверка на наличие тлф в БД
        if (ext_user_user_load_by_phone(ext_user_normalize_phone($form_state['values']['field_phone']['und'][0]['value']))) {
            form_set_error('field_phone][und][0][value', t('This phone number is already registered.'));
        }
    }
}

/**
 * Implements hook_form_alter().
 */
function ext_user_form_user_admin_settings_alter(&$form, &$form_state)
{
    // add new registration methods
    $form['registration_method'] = array(
        '#type' => 'fieldset',
        '#title' => t('Registration methods'),
        '#weight' => 1,
    );
    $form['registration_method']['email_registration'] = array(
        '#type' => 'checkbox',
        '#title' => t('E-Mail registration'),
        '#description' => t('Add registration and login with E-Mail.'),
        '#default_value' => variable_get('email_registration', 0),
        '#weight' => 0,
    );

    $form['registration_method']['phone_registration'] = array(
        '#type' => 'checkbox',
        '#title' => t('Phone registration'),
        '#description' => t('Add registration and login with phone.'),
        '#default_value' => variable_get('phone_registration', 0),
        '#weight' => 1,
    );

    $form['email_title']['#weight'] = 10;
    $form['email']['#weight'] = 11;
}
