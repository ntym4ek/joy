<?php

/**
 * @file
 * DaData module.
 *
 * @todo https://www.drupal.org/node/7765
 * @todo Add support of organizations and individual entrepreneurs suggestions.
 * @todo Add geo location http://confluence.hflabs.ru/pages/viewpage.action?pageId=210763928
 * @todo Add translation.
 *
 */

/**
 * URI DaData.ru
 */
define('DADATA_URL', 'https://dadata.ru');

/**
 * Defines constants.
 */
define('DADATA_GENDER_UNKNOWN', 0);
define('DADATA_GENDER_MALE', 1);
define('DADATA_GENDER_FEMALE', 2);

define('DADATA_COMPANY_STATUS_ACTIVE', 1);
define('DADATA_COMPANY_STATUS_LIQUIDATING', 2);
define('DADATA_COMPANY_STATUS_LIQUIDATED', 3);

define('DADATA_COMPANY_TYPE_LEGAL', 1);
define('DADATA_COMPANY_TYPE_INDIVIDUAL', 2);

define('DADATA_COMPANY_MAIN', 1);
define('DADATA_COMPANY_BRANCH', 2);

function _dadata_types() {
    return array('fullname', 'address', 'party', 'email');
}

/**
 * Includes required.
 */
// Faster than module_load_include('inc', 'dadata', 'dadata_element');
require_once 'dadata_element.inc';
require_once 'dadata_webform.inc';
require_once 'dadata_field.inc';

/**
 * Implements hook_menu().
 */
function dadata_menu() {
    $items['admin/config/user-interface/dadata'] = array(
        'title' => 'DaData settings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('dadata_settings'),
        'access arguments' => array('access administration pages'),
        'file' => 'dadata.admin.inc',
    );
    $items['dadata/autocomplete'] = array(
        'page callback' => 'dadata_autocomplete_callback',
        'type' => MENU_CALLBACK,
        'access arguments' => array('access content'),
    );
    return $items;
}

/**
 * Implements hook_library().
 */
function dadata_library() {
    $version = '4.10';
    $module_path = drupal_get_path('module', 'dadata');
    if (variable_get('dadata_jquery_plugin_external', 0)) {
        $css[DADATA_URL . '/static/css/lib/suggestions-' . $version . '.css'] = array('type' => 'external');
        $js[DADATA_URL . '/static/js/lib/jquery.suggestions-' . $version . '.min.js'] = array('type' => 'external');
    }
    else {
        $css[$module_path . '/css/suggestions.css'] = array();
        $js[$module_path . '/js/jquery.suggestions.min.js'] = array();
    }
    $js[$module_path . '/js/dadata.js'] = array();

    $params = variable_get('dadata_jquery_plugin_params', array());
    $js[] = array(
        'type' => 'setting',
        'data' => array(
            'dadata' => array(
                    'serviceUrl' => variable_get('dadata_jquery_plugin_service_url', 'https://dadata.ru/api/v2'),
                    'token' => variable_get('dadata_token', ''),
                ) + $params),
    );
    $libraries['dadata.suggestions'] = array(
        'title' => 'DaData.ru suggestions',
        'website' => DADATA_URL . '/suggestions',
        'version' => $version,
        'css' => $css,
        'js' => $js,
    );
    return $libraries;
}

/**
 * Performs a DaData Rest API request.
 *
 * @param string $type
 *   Possible values: 'fullname', 'address', 'party'.
 * @param string $query
 *   Query string.
 *
 * @return mixed
 *   Request result data.
 *
 * @throws Exception
 */
function dadata_request($type, $query) {
    try {
        if (!in_array($type, _dadata_types())) {
            throw new Exception('Undefined DaData request type.');
        }
        if ('fullname' == $type) {
            $type = 'fio';
        }
        $url = trim(variable_get('dadata_rest_api_url', 'https://dadata.ru/api/v2/suggest'), '/') . '/' . $type;
        $options = array(
            'headers' => array(
                'Content-Type' => 'application/json',
                'Accept' => 'application/json',
                'Authorization' => 'Token ' . variable_get('dadata_token', ''),
            ),
            'method' => 'POST',
            'data' => drupal_json_encode(array('query' => $query)),
        );
        $response = drupal_http_request($url, $options);
        if (200 != $response->code) {
            throw new Exception(t('Error: @error. Code: @code.', array(
                '@error' => $response->error,
                '@code' => $response->code,
            )));
        }
    }
    catch (Exception $e) {
        watchdog_exception('dadata', $e);
        throw $e;
    }
    $result = drupal_json_decode($response->data);
    return $result['suggestions'];
}

/**
 * Autocomplete callback.
 */
function dadata_autocomplete_callback($type, $string = '') {
    $matches = array();
    if ($query = trim($string)) {
        try {
            $result = dadata_request($type, $query);
            foreach ($result as $item) {
                $matches[$item['value']] = check_plain($item['value']);
            }
        }
        catch (Exception $e) {
        }
    }
    drupal_json_output($matches);
}
